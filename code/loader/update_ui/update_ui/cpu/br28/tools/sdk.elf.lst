
sdk.elf:	file format ELF32-pi32v2

Disassembly of section .text:
user_api_ins:
  104000:    45 58             	if (r5 == 0) goto -208 <EX_RAM_SIZE+0xA0F32 : 103f32 >
  104002:    41 50             	if (r1 == 0) goto -224 <EX_RAM_SIZE+0xA0F24 : 103f24 >
  104004:    00 00             	nop
  104006:    00 00             	nop
  104008:    5e 78             	r6 = h[r5+-16] (u)
  10400a:    10 00              <unknown instruction>
  10400c:    74 7a             	r4 = [r7+-24] 
  10400e:    10 00              <unknown instruction>


delay:
  104010:    04 82             	goto 4 <delay+0x6 : 104016 >			  ## imd_mcu.c:40:0
  104012:    00 00             	nop			  ## imd_mcu.c:42:3
  104014:    f8 3f             	r0 += -1			  ## imd_mcu.c:41:12
  104016:    f0 5d             	if (r0 != 0) goto -6 <delay+0x2 : 104012 >
  104018:    80 00             	rts			  ## imd_mcu.c:44:1


local_irq_disable:
  10401a:    10 04             	[--sp] = rets			  ## hwi.c:95:0
  10401c:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:37:9
  104022:    00 62             	r0 = [r0+8] 			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:37:9
  104024:    00 41             	if (r0 == 0) goto 2 <local_irq_disable+0xE : 104028 >			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:37:9
  104026:    c0 00             	call r0			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:38:9
  104028:    20 00             	csync			  ## hwi.c:117:2
  10402a:    00 04             	pc = [sp++]			  ## hwi.c:118:1


local_irq_enable:
  10402c:    10 04             	[--sp] = rets			  ## hwi.c:123:0
  10402e:    20 00             	csync			  ## hwi.c:124:2
  104030:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:30:9
  104036:    00 63             	r0 = [r0+12] 			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:30:9
  104038:    00 41             	if (r0 == 0) goto 2 <local_irq_enable+0x10 : 10403c >			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:30:9
  10403a:    c0 00             	call r0			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:31:9
  10403c:    00 04             	pc = [sp++]			  ## hwi.c:143:1


disp_set_buffer_rect:
  10403e:    c1 ff b4 c8 10 00 	r1 = 1099956 <param_t+0x4 : 10c8b4 >			  ## ui_draw_arc.c:105:0
  104044:    12 61             	r2 = [r1+4] 			  ## ui_draw_arc.c:106:37
  104046:    13 60             	r3 = [r1+0] 			  ## ui_draw_arc.c:106:14
  104048:    13 e8 00 02       	if (r3 == r2) {			  ## ui_draw_arc.c:106:14
  10404c:    12 62             		r2 = [r1+8] 
                               	}			  ## ui_draw_arc.c:106:14
  10404e:    d8 ec 19 21       	[r1++=24] = r2			  ## ui_draw_arc.c:106:14
  104052:    10 83             	rep 4 4 {			  ## ui_draw_arc.c:113:2
  104054:    02 05             		r2 = [r0++=4] 			  ## ui_draw_arc.c:113:2
  104056:    92 05             		[r1++=4] = r2
                               	}			  ## ui_draw_arc.c:113:2
  104058:    80 00             	rts			  ## ui_draw_arc.c:114:1


disp_buffer_flush:
  10405a:    7e 04             	[--sp] = {rets, r14-r4}			  ## ui_draw_arc.c:126:0
  10405c:    14 16             	r4 = r1			  ## ui_draw_arc.c:126:0
  10405e:    05 16             	r5 = r0			  ## ui_draw_arc.c:126:0
  104060:    80 ff 44 2c 00 00 	call 11332 <lcd_qspi_st77903_mode : 106caa >			  ## ui_draw_arc.c:127:6
  104066:    d0 ec 50 e0       	r14 = [r5+0]			  ## ui_draw_arc.c:130:36
  10406a:    c8 ff 00 c8 10 00 	r8 = 1099776 <backlight_status : 10c800 >			  ## ui_draw_arc.c:130:36
  104070:    10 41             	if (r0 == 0) goto 66 <disp_buffer_flush+0x5A : 1040b4 >			  ## ui_draw_arc.c:127:6
  104072:    c7 ff 04 c4 10 00 	r7 = 1098756 <lcd_drive : 10c404 >
  104078:    71 6a             	r1 = [r7+40] 
  10407a:    c6 ff 1a ba 10 00 	r6 = 1096218 <imd_clock_init.div+0x5A : 10ba1a >
  104080:    11 58             	if (r1 == 0) goto 112 <disp_buffer_flush+0x98 : 1040f2 >
  104082:    73 64             	r3 = [r7+16] 
  104084:    50 62             	r0 = [r5+8] 			  ## ui_draw_arc.c:128:40
  104086:    23 44             	if (r3 == 0) goto 136 <disp_buffer_flush+0xB6 : 104110 >			  ## ui_draw_arc.c:128:40
  104088:    d0 ec 5c a0       	r10 = [r5+12]			  ## ui_draw_arc.c:128:93
  10408c:    c0 f1 01 90       	r9 = r0 << 1  #			  ## ui_draw_arc.c:128:46
  104090:    16 6b             		 r6 = [r1+44] 			  ## lcd_drive.c:423:36
  104092:    d0 ec 54 c0       	r12 = [r5+4]			  ## ui_draw_arc.c:128:69
  104096:    4d e0 03 00       	r13 = 3 <moveable_slot_size+0x3 : 3 >			  ## lcd_drive.c:423:27
  10409a:    06 42             	if (r6 == 0) goto 4 <disp_buffer_flush+0x46 : 1040a0 >			  ## lcd_drive.c:423:27
  10409c:    4d e0 02 00       	r13 = 2 <moveable_slot_size+0x2 : 2 >			  ## lcd_drive.c:423:27
  1040a0:    d0 ec 88 54       	r5 = [r8+72]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  1040a4:    05 44             	if (r5 == 0) goto 8 <disp_buffer_flush+0x54 : 1040ae >
  1040a6:    d0 ec 88 54       	r5 = [r8+72]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  1040aa:    85 f8 41 04       	if (r5 != 2) goto 130 <disp_buffer_flush+0xD6 : 104130 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  1040ae:    15 64             	r5 = [r1+16] 			  ## lcd_drive.c:427:31
  1040b0:    56 16             	r6 = r5			  ## lcd_drive.c:427:31
  1040b2:    24 80             	goto 128 <disp_buffer_flush+0xDA : 104134 >			  ## lcd_drive.c:427:31
  1040b4:    50 ec 58 00       	r1_r0 = d[r5+8]			  ## ui_draw_arc.c:130:61
  1040b8:    e0 d8             	r0 += r14  #			  ## ui_draw_arc.c:130:53
  1040ba:    56 61             		 r6 = [r5+4] 			  ## ui_draw_arc.c:130:78
  1040bc:    d0 ec 80 3b       	r3 = [r8+176]			  ## ui_draw_arc.c:130:11
  1040c0:    c2 ff ff ff 00 00 	r2 = 65535 <hd_quantize_intervals_LF+0x635B : ffff >			  ## ui_draw_arc.c:130:11
  1040c6:    20 d8             	r0 += r2  #			  ## ui_draw_arc.c:130:67
  1040c8:    37 65             		 r7 = [r3+20] 			  ## ui_draw_arc.c:130:16
  1040ca:    61 18             	r1 += r6			  ## ui_draw_arc.c:130:93
  1040cc:    12 18             	r2 += r1			  ## ui_draw_arc.c:130:108
  1040ce:    81 17             	r1 = r0.l (u)			  ## ui_draw_arc.c:130:3
  1040d0:    a3 17             	r3 = r2.l (u)			  ## ui_draw_arc.c:130:3
  1040d2:    b0 e1 40 e0       	r0 = uextra(r14, p:0, l:16)			  ## ui_draw_arc.c:130:3
  1040d6:    e2 17             	r2 = r6.l (u)			  ## ui_draw_arc.c:130:3
  1040d8:    c7 00             	call r7			  ## ui_draw_arc.c:130:3
  1040da:    d0 ec 80 0b       	r0 = [r8+176]			  ## ui_draw_arc.c:131:11
  1040de:    51 63             	r1 = [r5+12] 			  ## ui_draw_arc.c:131:55
  1040e0:    52 62             	r2 = [r5+8] 			  ## ui_draw_arc.c:131:41
  1040e2:    f0 f1 20 01       	r0 = r2 * r1  #			  ## ui_draw_arc.c:131:62
  1040e6:    03 64             		 r3 = [r0+16] 			  ## ui_draw_arc.c:131:16
  1040e8:    01 a1             	r1 = r0 << 1			  ## ui_draw_arc.c:131:62
  1040ea:    42 20             	r2 = 0			  ## ui_draw_arc.c:131:3
  1040ec:    40 16             	r0 = r4			  ## ui_draw_arc.c:131:3
  1040ee:    c3 00             	call r3			  ## ui_draw_arc.c:131:3
  1040f0:    5e 04             	{pc, r14-r4} = [sp++]			  ## ui_draw_arc.c:133:1
  1040f2:    00 e1 44 60       	r0 = r6 + 68			  ## lcd_drive.c:420:5
  1040f6:    02 e1 90 67       	r2 = r6 + 1936			  ## lcd_drive.c:420:5
  1040fa:    41 20             	r1 = 0			  ## lcd_drive.c:420:5
  1040fc:    43 e0 a4 01       	r3 = 420 <_MASK_MEM_SIZE : 1a4 >			  ## lcd_drive.c:420:5
  104100:    80 ff fe bc f1 ff 	call -934658 <printf : 1fe04 >			  ## lcd_drive.c:420:5
  104106:    60 16             	r0 = r6			  ## lcd_drive.c:420:5
  104108:    80 ff f6 bc f1 ff 	call -934666 <printf : 1fe04 >			  ## lcd_drive.c:420:5
  10410e:    f7 9f             	goto -2 <disp_buffer_flush+0xB4 : 10410e >			  ## lcd_drive.c:420:5
  104110:    00 e1 44 60       	r0 = r6 + 68			  ## lcd_drive.c:421:5
  104114:    02 e1 90 67       	r2 = r6 + 1936			  ## lcd_drive.c:421:5
  104118:    41 20             	r1 = 0			  ## lcd_drive.c:421:5
  10411a:    43 e0 a5 01       	r3 = 421 <_MASK_MEM_SIZE+0x1 : 1a5 >			  ## lcd_drive.c:421:5
  10411e:    80 ff e0 bc f1 ff 	call -934688 <printf : 1fe04 >			  ## lcd_drive.c:421:5
  104124:    00 e1 ac 60       	r0 = r6 + 172			  ## lcd_drive.c:421:5
  104128:    80 ff d6 bc f1 ff 	call -934698 <printf : 1fe04 >			  ## lcd_drive.c:421:5
  10412e:    f7 9f             	goto -2 <disp_buffer_flush+0xD4 : 10412e >			  ## lcd_drive.c:421:5
  104130:    15 64             	r5 = [r1+16] 			  ## lcd_drive.c:429:32
  104132:    5e 88             	r6 = r5 + 8			  ## lcd_drive.c:429:42
  104134:    50 ee 7c 31       	r3 = b[r7+28] (u)			  ## lcd_drive.c:438:33
  104138:    41 21             	r1 = 1			  ## lcd_drive.c:438:25
  10413a:    03 41             	if (r3 == 0) goto 2 <disp_buffer_flush+0xE4 : 10413e >			  ## lcd_drive.c:438:25
  10413c:    41 20             	r1 = 0
  10413e:    7b 94             	r3 = r7 + 20			  ## lcd_drive.c:438:9
  104140:    d8 ec 3a 11       	r1 = [r3+r1<<2]			  ## lcd_drive.c:438:9
  104144:    f0 e1 60 3d       	r3 = r6 * r13
  104148:    c3 23             	r3 += 3
  10414a:    46 24             	r6 = 4
  10414c:    f4 e1 31 76       	r7 = r3 / r6 (s)
  104150:    c0 e1 72 b0       	r11 = r7 << 2
  104154:    8e f8 13 00       	if (r14 != 0) goto 38 <disp_buffer_flush+0x124 : 10417e >
  104158:    80 e8 11 50       	if (r5 != r0) goto 34 <disp_buffer_flush+0x124 : 10417e >
  10415c:    d0 ec 88 24       	r2 = [r8+72]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  104160:    02 44             	if (r2 == 0) goto 8 <disp_buffer_flush+0x110 : 10416a >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  104162:    d0 ec 88 24       	r2 = [r8+72]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  104166:    82 f8 2a 04       	if (r2 != 2) goto 84 <disp_buffer_flush+0x164 : 1041be >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  10416a:    f0 e1 a0 29       	r2 = r10 * r9			  ## lcd_drive.c:442:72
  10416e:    f0 e1 b0 0c       	r0 = r11 * r12			  ## lcd_drive.c:442:24
  104172:    10 18             	r0 += r1			  ## lcd_drive.c:442:24
  104174:    41 16             	r1 = r4			  ## lcd_drive.c:442:13
  104176:    80 ff f8 bb f1 ff 	call -934920 <memcpy : 1fd74 >			  ## lcd_drive.c:442:13
  10417c:    5e 04             	{pc, r14-r4} = [sp++]			  ## ui_draw_arc.c:133:1
  10417e:    f0 e1 d0 2e       	r2 = r13 * r14
  104182:    f0 e1 c0 37       	r3 = r12 * r7			  ## lcd_drive.c:418:9
  104186:    33 a2             	r3 = r3 << 2			  ## lcd_drive.c:418:9
  104188:    32 18             	r2 += r3			  ## lcd_drive.c:418:9
  10418a:    95 1c             	r5 = r1 + r2			  ## lcd_drive.c:418:9
  10418c:    f0 e1 d0 60       	r6 = r13 * r0			  ## lcd_drive.c:418:9
  104190:    47 20             	r7 = 0			  ## lcd_drive.c:418:9
  104192:    04 92             	goto 36 <disp_buffer_flush+0x15E : 1041b8 >			  ## lcd_drive.c:418:9
  104194:    d0 ec 88 04       	r0 = [r8+72]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  104198:    00 44             	if (r0 == 0) goto 8 <disp_buffer_flush+0x148 : 1041a2 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  10419a:    d0 ec 88 04       	r0 = [r8+72]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  10419e:    80 f8 02 04       	if (r0 != 2) goto 4 <disp_buffer_flush+0x14C : 1041a6 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  1041a2:    50 16             	r0 = r5			  ## lcd_drive.c:451:17
  1041a4:    04 81             	goto 2 <disp_buffer_flush+0x14E : 1041a8 >			  ## lcd_drive.c:451:17
  1041a6:    58 90             	r0 = r5 + 16			  ## lcd_drive.c:453:105
  1041a8:    41 16             	r1 = r4
  1041aa:    62 16             	r2 = r6
  1041ac:    80 ff c2 bb f1 ff 	call -934974 <memcpy : 1fd74 >
  1041b2:    94 18             	r4 += r9			  ## lcd_drive.c:449:9
  1041b4:    b5 18             	r5 += r11			  ## lcd_drive.c:449:9
  1041b6:    c7 21             	r7 += 1			  ## lcd_drive.c:449:34
  1041b8:    8a ed ec 71       	ifs (r7 < r10) goto -40 <disp_buffer_flush+0x13A : 104194 >
  1041bc:    5e 04             	{pc, r14-r4} = [sp++]			  ## ui_draw_arc.c:133:1
  1041be:    f0 e1 d0 50       	r5 = r13 * r0
  1041c2:    f0 e1 c0 07       	r0 = r12 * r7			  ## lcd_drive.c:418:9
  1041c6:    00 a2             	r0 = r0 << 2			  ## lcd_drive.c:418:9
  1041c8:    10 18             	r0 += r1			  ## lcd_drive.c:418:9
  1041ca:    0e 90             	r6 = r0 + 16			  ## lcd_drive.c:418:9
  1041cc:    47 20             	r7 = 0			  ## lcd_drive.c:418:9
  1041ce:    04 89             	goto 18 <disp_buffer_flush+0x188 : 1041e2 >			  ## lcd_drive.c:418:9
  1041d0:    60 16             	r0 = r6			  ## lcd_drive.c:445:17
  1041d2:    41 16             	r1 = r4			  ## lcd_drive.c:445:17
  1041d4:    52 16             	r2 = r5			  ## lcd_drive.c:445:17
  1041d6:    80 ff 98 bb f1 ff 	call -935016 <memcpy : 1fd74 >			  ## lcd_drive.c:445:17
  1041dc:    94 18             	r4 += r9			  ## lcd_drive.c:444:13
  1041de:    b6 18             	r6 += r11			  ## lcd_drive.c:444:13
  1041e0:    c7 21             	r7 += 1			  ## lcd_drive.c:444:38
  1041e2:    8a ed f5 71       	ifs (r7 < r10) goto -22 <disp_buffer_flush+0x176 : 1041d0 >
  1041e6:    5e 04             	{pc, r14-r4} = [sp++]			  ## ui_draw_arc.c:133:1


ui_draw_rect:
  1041e8:    7c 04             	[--sp] = {rets, r12-r4}			  ## ui_draw_text.c:56:0
  1041ea:    e2 9c             	sp += -16			  ## ui_draw_text.c:56:0
  1041ec:    3b d6             	r11 = r3  #			  ## ui_draw_text.c:56:0
  1041ee:    80 20             		 [sp] = r0			  ## ui_draw_text.c:60:2
  1041f0:    15 16             	r5 = r1
  1041f2:    20 d6             	r0 = r2  #			  ## ui_draw_text.c:62:14
  1041f4:    85 21             		 [sp+4] = r5			  ## ui_draw_text.c:60:2
  1041f6:    d0 e9 09 20       	d[sp+8] = r3_r2			  ## ui_draw_text.c:60:2
  1041fa:    80 ea 0a 09       	call 4628 <disp_get_buffer_line : 105412 >			  ## ui_draw_text.c:62:14
  1041fe:    06 16             	r6 = r0			  ## ui_draw_text.c:62:14
  104200:    b4 e0 b0 06       	r0 = r11 + r6
  104204:    f8 3f             	r0 += -1
  104206:    f4 e1 01 96       	r9 = r0 / r6 (s)
  10420a:    d4 e9 38 80       	r8 = [sp+56]
  10420e:    f8 e8 00 a0       	r10 = sp + 0
  104212:    44 20             	r4 = 0
  104214:    cc ff 00 c8 10 00 	r12 = 1099776 <backlight_status : 10c800 >
  10421a:    04 96             	goto 44 <ui_draw_rect+0x60 : 104248 >
  10421c:    d0 ec a5 50       	[r10+4] = r5			  ## ui_draw_text.c:65:12
  104220:    35 e4 b1 06       	r0 = smin(r11, r6)			  ## ui_draw_text.c:66:17
  104224:    d0 ec ad 00       	[r10+12] = r0			  ## ui_draw_text.c:66:15
  104228:    8f 80             	r7 = sp + 0			  ## ui_draw_text.c:66:15
  10422a:    70 16             	r0 = r7			  ## ui_draw_text.c:68:3
  10422c:    bf ea 07 ff       	call -498 <disp_set_buffer_rect : 10403e >			  ## ui_draw_text.c:68:3
  104230:    70 16             	r0 = r7			  ## ui_draw_text.c:69:3
  104232:    81 16             	r1 = r8			  ## ui_draw_text.c:69:3
  104234:    01 8d             	call 26 <disp_buffer_clear : 104250 >			  ## ui_draw_text.c:69:3
  104236:    d0 ec c4 1b       	r1 = [r12+180]			  ## ui_draw_arc.c:88:17
  10423a:    70 16             	r0 = r7			  ## ui_draw_text.c:70:3
  10423c:    bf ea 0d ff       	call -486 <disp_buffer_flush : 10405a >			  ## ui_draw_text.c:70:3
  104240:    65 18             	r5 += r6			  ## ui_draw_text.c:64:2
  104242:    b4 e0 b2 b6       	r11 = r11 - r6			  ## ui_draw_text.c:64:2
  104246:    c4 21             	r4 += 1			  ## ui_draw_text.c:64:54
  104248:    89 ed e8 41       	ifs (r4 < r9) goto -48 <ui_draw_rect+0x34 : 10421c >
  10424c:    02 84             	sp += 16
  10424e:    5c 04             	{pc, r12-r4} = [sp++]			  ## ui_draw_text.c:72:1


disp_buffer_clear:
  104250:    79 04             	[--sp] = {rets, r9-r4}			  ## ui_draw_arc.c:137:0
  104252:    c8 ff 00 c8 10 00 	r8 = 1099776 <backlight_status : 10c800 >			  ## ui_draw_arc.c:137:0
  104258:    d0 ec 8c 2c       	r2 = [r8+204]			  ## ui_draw_arc.c:141:37
  10425c:    d0 ec 00 90       	r9 = [r0+0]			  ## ui_draw_arc.c:141:12
  104260:    99 ed 00 42       	ifs (r9 < r2) {			  ## ui_draw_arc.c:141:12
  104264:    82 60             		[r0+0] = r2			  ## ui_draw_arc.c:142:14
  104266:    29 16             		r9 = r2
                               	}			  ## ui_draw_arc.c:147:13
  104268:    d0 ec 80 2d       	r2 = [r8+208]			  ## ui_draw_arc.c:144:36
  10426c:    06 61             	r6 = [r0+4] 			  ## ui_draw_arc.c:144:12
  10426e:    96 ed 00 42       	ifs (r6 < r2) {			  ## ui_draw_arc.c:144:12
  104272:    82 61             		[r0+4] = r2			  ## ui_draw_arc.c:145:13
  104274:    26 16             		r6 = r2
                               	}			  ## ui_draw_arc.c:150:13
  104276:    d0 ec 8c 4c       	r4 = [r8+204]			  ## ui_draw_arc.c:147:54
  10427a:    d0 ec 84 5d       	r5 = [r8+212]			  ## ui_draw_arc.c:147:79
  10427e:    54 d8             	r4 += r5  #			  ## ui_draw_arc.c:147:59
  104280:    02 62             		 r2 = [r0+8] 			  ## ui_draw_arc.c:147:26
  104282:    b4 e0 20 59       	r5 = r2 + r9			  ## ui_draw_arc.c:147:18
  104286:    15 ee 00 44       	ifs (r5 > r4) {			  ## ui_draw_arc.c:147:18
  10428a:    b4 e0 42 29       		r2 = r4 - r9			  ## ui_draw_arc.c:148:66
  10428e:    82 62             		[r0+8] = r2
                               	}			  ## ui_draw_arc.c:148:15
  104290:    d0 ec 80 7d       	r7 = [r8+208]			  ## ui_draw_arc.c:150:54
  104294:    d0 ec 88 4d       	r4 = [r8+216]			  ## ui_draw_arc.c:150:78
  104298:    74 d8             	r4 += r7  #			  ## ui_draw_arc.c:150:58
  10429a:    05 63             		 r5 = [r0+12] 			  ## ui_draw_arc.c:150:25
  10429c:    d3 1d             	r3 = r5 + r6			  ## ui_draw_arc.c:150:17
  10429e:    13 ee 00 84       	ifs (r3 > r4) {			  ## ui_draw_arc.c:150:17
  1042a2:    c5 1f             		r5 = r4 - r6			  ## ui_draw_arc.c:151:67
  1042a4:    85 63             		[r0+12] = r5			  ## ui_draw_arc.c:151:16
  1042a6:    d0 ec 80 7d       		r7 = [r8+208]
                               	}			  ## ui_draw_arc.c:151:16
  1042aa:    00 e1 b4 80       	r0 = r8 + 180			  ## ui_draw_arc.c:151:16
  1042ae:    ec df             	r4 = r6 - r7  #			  ## ui_draw_arc.c:139:6
  1042b0:    03 68             		 r3 = [r0+32] 			  ## ui_draw_arc.c:139:6
  1042b2:    34 db             	r4 *= r3  #			  ## ui_draw_arc.c:139:6
  1042b4:    06 66             		 r6 = [r0+24] 			  ## ui_draw_arc.c:139:6
  1042b6:    94 d8             	r4 += r9  #			  ## ui_draw_arc.c:139:6
  1042b8:    00 60             		 r0 = [r0+0] 			  ## ui_draw_arc.c:139:6
  1042ba:    c4 1f             	r4 = r4 - r6			  ## ui_draw_arc.c:139:6
  1042bc:    44 a1             	r4 = r4 << 1			  ## ui_draw_arc.c:139:6
  1042be:    40 18             	r0 += r4			  ## ui_draw_arc.c:139:6
  1042c0:    33 a1             	r3 = r3 << 1			  ## ui_draw_arc.c:139:6
  1042c2:    44 20             	r4 = 0			  ## ui_draw_arc.c:139:6
  1042c4:    04 89             	goto 18 <disp_buffer_clear+0x88 : 1042d8 >			  ## ui_draw_arc.c:139:6
  1042c6:    46 20             	r6 = 0
  1042c8:    07 16             	r7 = r0
  1042ca:    04 82             	goto 4 <disp_buffer_clear+0x80 : 1042d0 >
  1042cc:    f1 06             	h[r7++=2] = r1			  ## ui_draw_arc.c:158:140
  1042ce:    c6 21             	r6 += 1			  ## ui_draw_arc.c:157:33
  1042d0:    82 ed fc 61       	ifs (r6 < r2) goto -8 <disp_buffer_clear+0x7C : 1042cc >
  1042d4:    30 18             	r0 += r3			  ## ui_draw_arc.c:156:2
  1042d6:    c4 21             	r4 += 1			  ## ui_draw_arc.c:156:33
  1042d8:    85 ed f5 41       	ifs (r4 < r5) goto -22 <disp_buffer_clear+0x76 : 1042c6 >
  1042dc:    59 04             	{pc, r9-r4} = [sp++]			  ## ui_draw_arc.c:162:1


_area_intersect:
  1042de:    77 04             	[--sp] = {rets, r7-r4}			  ## ui_draw_arc.c:224:0
  1042e0:    13 d6             	r3 = r1  #			  ## ui_draw_arc.c:225:14
  1042e2:    24 60             		 r4 = [r2+0] 			  ## ui_draw_arc.c:225:14
  1042e4:    15 60             	r5 = [r1+0] 			  ## ui_draw_arc.c:225:14
  1042e6:    95 ee 00 04       	ifs (r5 <= r4) {			  ## ui_draw_arc.c:225:14
  1042ea:    23 16             		r3 = r2
                               	}			  ## ui_draw_arc.c:225:14
  1042ec:    14 d6             	r4 = r1  #			  ## ui_draw_arc.c:226:14
  1042ee:    33 60             		 r3 = [r3+0] 			  ## ui_draw_arc.c:226:14
  1042f0:    83 60             	[r0+0] = r3			  ## ui_draw_arc.c:225:12
  1042f2:    25 61             	r5 = [r2+4] 			  ## ui_draw_arc.c:226:14
  1042f4:    16 61             	r6 = [r1+4] 			  ## ui_draw_arc.c:226:14
  1042f6:    96 ee 00 05       	ifs (r6 <= r5) {			  ## ui_draw_arc.c:226:14
  1042fa:    24 16             		r4 = r2
                               	}			  ## ui_draw_arc.c:226:14
  1042fc:    15 d6             	r5 = r1  #			  ## ui_draw_arc.c:227:14
  1042fe:    44 61             		 r4 = [r4+4] 			  ## ui_draw_arc.c:227:14
  104300:    84 61             	[r0+4] = r4			  ## ui_draw_arc.c:226:12
  104302:    26 62             	r6 = [r2+8] 			  ## ui_draw_arc.c:227:14
  104304:    17 62             	r7 = [r1+8] 			  ## ui_draw_arc.c:227:14
  104306:    17 ed 00 06       	ifs (r7 >= r6) {			  ## ui_draw_arc.c:227:14
  10430a:    25 16             		r5 = r2
                               	}			  ## ui_draw_arc.c:227:14
  10430c:    55 62             	r5 = [r5+8] 			  ## ui_draw_arc.c:227:14
  10430e:    85 62             	[r0+8] = r5			  ## ui_draw_arc.c:227:12
  104310:    26 63             	r6 = [r2+12] 			  ## ui_draw_arc.c:228:14
  104312:    17 63             	r7 = [r1+12] 			  ## ui_draw_arc.c:228:14
  104314:    17 ed 00 06       	ifs (r7 >= r6) {			  ## ui_draw_arc.c:228:14
  104318:    21 16             		r1 = r2
                               	}			  ## ui_draw_arc.c:228:14
  10431a:    11 63             	r1 = [r1+12] 
  10431c:    81 63             	[r0+12] = r1			  ## ui_draw_arc.c:228:12
  10431e:    40 21             	r0 = 1			  ## ui_draw_arc.c:231:30
  104320:    42 21             	r2 = 1			  ## ui_draw_arc.c:231:30
  104322:    13 ee 00 05       	ifs (r3 > r5) {
  104326:    42 20             		r2 = 0
                               	}			  ## ui_draw_arc.c:231:30
  104328:    14 ee 00 01       	ifs (r4 > r1) {			  ## ui_draw_arc.c:231:30
  10432c:    40 20             		r0 = 0
                               	}			  ## ui_draw_arc.c:231:30
  10432e:    a0 19             	r0 &= r2			  ## ui_draw_arc.c:231:30
  104330:    57 04             	{pc, r7-r4} = [sp++]			  ## ui_draw_arc.c:235:2


_mem_buf_get:
  104332:    c1 ff 00 c8 10 00 	r1 = 1099776 <backlight_status : 10c800 >			  ## ui_draw_arc.c:166:0
  104338:    d0 ec 1c 0d       	r0 = [r1+220]			  ## ui_draw_arc.c:169:15
  10433c:    80 44             	if (r0 != 0) goto 8 <_mem_buf_get+0x14 : 104346 >			  ## ui_draw_arc.c:169:15
  10433e:    00 e1 cc 11       	r0 = r1 + 460			  ## ui_draw_arc.c:170:23
  104342:    d0 ec 1d 0d       	[r1+220] = r0			  ## ui_draw_arc.c:170:23
  104346:    80 00             	rts			  ## ui_draw_arc.c:175:2


mask_radius_init:
  104348:    79 04             	[--sp] = {rets, r9-r4}			  ## ui_mask.c:66:0
  10434a:    16 16             	r6 = r1			  ## ui_mask.c:66:0
  10434c:    28 d5             	r9_r8 = r3_r2  #			  ## ui_mask.c:66:0
  10434e:    61 62             		 r1 = [r6+8] 			  ## ui_mask.c:66:0
  104350:    04 d6             	r4 = r0  #			  ## ui_mask.c:66:0
  104352:    67 60             		 r7 = [r6+0] 			  ## ui_mask.c:66:0
  104354:    70 16             	r0 = r7			  ## ui_mask.c:67:10
  104356:    80 ff 60 36 00 00 	call 13920 <area_get_width.55 : 1079bc >			  ## ui_mask.c:67:10
  10435c:    07 d6             	r7 = r0  #			  ## ui_mask.c:67:10
  10435e:    61 63             		 r1 = [r6+12] 			  ## ui_mask.c:67:10
  104360:    62 61             	r2 = [r6+4] 			  ## ui_mask.c:67:10
  104362:    20 16             	r0 = r2			  ## ui_mask.c:68:10
  104364:    80 ff 58 36 00 00 	call 13912 <area_get_height.56 : 1079c2 >			  ## ui_mask.c:68:10
  10436a:    05 16             	r5 = r0			  ## ui_mask.c:68:10
  10436c:    48 88             	r0 = r4 + 8			  ## ui_mask.c:74:24
  10436e:    61 16             	r1 = r6			  ## ui_mask.c:74:2
  104370:    80 ff 52 36 00 00 	call 13906 <area_copy.57 : 1079c8 >			  ## ui_mask.c:74:2
  104376:    35 e4 71 05       	r0 = smin(r7, r5)			  ## ui_mask.c:69:19
  10437a:    88 a1             	r0 = r0 >>> 1			  ## ui_mask.c:70:26
  10437c:    35 e4 01 08       	r0 = smin(r0, r8)			  ## ui_mask.c:70:6
  104380:    c0 66             	[r4+24] = r0			  ## ui_mask.c:75:20
  104382:    40 21             	r0 = 1			  ## ui_mask.c:75:20
  104384:    39 e8 00 00       	if (r9 == 0) {			  ## ui_mask.c:75:20
  104388:    90 16             		r0 = r9
                               	}			  ## ui_mask.c:76:21
  10438a:    50 ee 4c 11       	r1 = b[r4+28] (u)			  ## ui_mask.c:76:19
  10438e:    b9 20             	r1 &= 4294967294			  ## ui_mask.c:76:19
  104390:    10 19             	r0 |= r1			  ## ui_mask.c:76:19
  104392:    52 ee 4c 01       	b[r4+28] = r0			  ## ui_mask.c:76:19
  104396:    c0 ff 10 5b 10 00 	r0 = 1071888 <mask_radius : 105b10 >			  ## ui_mask.c:77:16
  10439c:    c0 60             	[r4+0] = r0			  ## ui_mask.c:77:16
  10439e:    40 22             	r0 = 2			  ## ui_mask.c:78:18
  1043a0:    c8 44             	b[r4+4] = r0			  ## ui_mask.c:78:18
  1043a2:    48 ea 00 44       	[r4+32] = 0x80000000			  ## ui_mask.c:79:16
  1043a6:    49 ea 00 40       	[r4+36] = 0x0			  ## ui_mask.c:81:20
  1043aa:    59 04             	{pc, r9-r4} = [sp++]			  ## ui_mask.c:82:1


mask_add:
  1043ac:    01 16             	r1 = r0			  ## ui_mask.c:979:0
  1043ae:    c2 ff 4c c9 10 00 	r2 = 1100108 <_mask_list : 10c94c >			  ## ui_mask.c:979:0
  1043b4:    10 3f             	r0 = -1			  ## ui_mask.c:979:0
  1043b6:    c0 21             	r0 += 1			  ## ui_mask.c:981:16
  1043b8:    00 fc 07 1e       	if (r0 > 15) goto 14 <mask_add+0x1E : 1043ca >			  ## ui_mask.c:981:16
  1043bc:    d8 ec 28 30       	r3 = [r2++=8]			  ## ui_mask.c:982:21
  1043c0:    f3 5a             	if (r3 != 0) goto -12 <mask_add+0xA : 1043b6 >			  ## ui_mask.c:982:21
  1043c2:    a1 7e             	[r2+-8] = r1			  ## ui_mask.c:991:22
  1043c4:    7f ea 00 20       	[r2+-4] = 0x0			  ## ui_mask.c:992:26
  1043c8:    80 00             	rts			  ## ui_mask.c:995:1
  1043ca:    10 3f             	r0 = -1
  1043cc:    80 00             	rts			  ## ui_mask.c:995:1


mask_apply:
  1043ce:    79 04             	[--sp] = {rets, r9-r4}			  ## ui_mask.c:1023:0
  1043d0:    e2 9f             	sp += -4			  ## ui_mask.c:1023:0
  1043d2:    38 16             	r8 = r3			  ## ui_mask.c:1023:0
  1043d4:    29 16             	r9 = r2			  ## ui_mask.c:1023:0
  1043d6:    16 16             	r6 = r1			  ## ui_mask.c:1023:0
  1043d8:    07 16             	r7 = r0			  ## ui_mask.c:1023:0
  1043da:    c4 ff 4c c9 10 00 	r4 = 1100108 <_mask_list : 10c94c >			  ## ui_mask.c:1023:0
  1043e0:    d8 ec 48 00       	r0 = [r4++=8]			  ## ui_mask.c:1029:12
  1043e4:    00 48             	if (r0 == 0) goto 16 <mask_apply+0x28 : 1043f6 >
  1043e6:    61 d6             	r1 = r6  #			  ## ui_mask.c:1032:9
  1043e8:    05 60             		 r5 = [r0+0] 			  ## ui_mask.c:1032:14
  1043ea:    70 d6             	r0 = r7  #			  ## ui_mask.c:1032:9
  1043ec:    80 20             		 [sp] = r0			  ## ui_mask.c:1032:9
  1043ee:    92 16             	r2 = r9			  ## ui_mask.c:1032:9
  1043f0:    83 16             	r3 = r8			  ## ui_mask.c:1032:9
  1043f2:    c5 00             	call r5			  ## ui_mask.c:1032:9
  1043f4:    f0 55             	if (r0 != 0) goto -22 <mask_apply+0x12 : 1043e0 >			  ## ui_mask.c:1032:9
  1043f6:    02 81             	sp += 4
  1043f8:    59 04             	{pc, r9-r4} = [sp++]


get_rect_cover:
  1043fa:    7b 04             	[--sp] = {rets, r11-r4}			  ## ui_draw_arc.c:1011:0
  1043fc:    03 d6             	r3 = r0  #			  ## ui_draw_arc.c:1014:11
  1043fe:    14 61             		 r4 = [r1+4] 			  ## ui_draw_arc.c:1014:11
  104400:    05 61             	r5 = [r0+4] 			  ## ui_draw_arc.c:1014:11
  104402:    95 ee 00 04       	ifs (r5 <= r4) {			  ## ui_draw_arc.c:1014:11
  104406:    13 16             		r3 = r1
                               	}			  ## ui_draw_arc.c:1014:11
  104408:    d0 ec 34 80       	r8 = [r3+4]			  ## ui_draw_arc.c:1014:11
  10440c:    d0 ec 25 80       	[r2+4] = r8			  ## ui_draw_arc.c:1014:9
  104410:    03 d6             	r3 = r0  #			  ## ui_draw_arc.c:1015:12
  104412:    14 60             		 r4 = [r1+0] 			  ## ui_draw_arc.c:1015:12
  104414:    05 60             	r5 = [r0+0] 			  ## ui_draw_arc.c:1015:12
  104416:    95 ee 00 04       	ifs (r5 <= r4) {			  ## ui_draw_arc.c:1015:12
  10441a:    13 16             		r3 = r1
                               	}			  ## ui_draw_arc.c:1015:12
  10441c:    d0 ec 30 90       	r9 = [r3+0]			  ## ui_draw_arc.c:1015:12
  104420:    d0 ec 21 90       	[r2+0] = r9			  ## ui_draw_arc.c:1015:10
  104424:    0a d6             	r10 = r0  #			  ## ui_draw_arc.c:1016:10
  104426:    17 60             		 r7 = [r1+0] 			  ## ui_draw_arc.c:1016:10
  104428:    13 62             	r3 = [r1+8] 			  ## ui_draw_arc.c:1016:10
  10442a:    73 d8             	r3 += r7  #			  ## ui_draw_arc.c:1016:10
  10442c:    05 60             		 r5 = [r0+0] 			  ## ui_draw_arc.c:1016:10
  10442e:    06 62             	r6 = [r0+8] 			  ## ui_draw_arc.c:1016:10
  104430:    6c 1d             	r4 = r6 + r5			  ## ui_draw_arc.c:1016:10
  104432:    14 ed 00 43       	ifs (r4 >= r3) {			  ## ui_draw_arc.c:1016:10
  104436:    1a 16             		r10 = r1			  ## ui_draw_arc.c:1016:10
  104438:    75 16             		r5 = r7
                               	}			  ## ui_draw_arc.c:1016:10
  10443a:    d0 ec 14 b0       	r11 = [r1+4]			  ## ui_draw_arc.c:1017:11
  10443e:    14 63             	r4 = [r1+12] 			  ## ui_draw_arc.c:1017:11
  104440:    b4 d8             	r4 += r11  #			  ## ui_draw_arc.c:1017:11
  104442:    07 61             		 r7 = [r0+4] 			  ## ui_draw_arc.c:1017:11
  104444:    06 63             	r6 = [r0+12] 			  ## ui_draw_arc.c:1017:11
  104446:    d0 ec a8 30       	r3 = [r10+8]			  ## ui_draw_arc.c:1017:11
  10444a:    76 18             	r6 += r7			  ## ui_draw_arc.c:1017:11
  10444c:    35 18             	r5 += r3			  ## ui_draw_arc.c:1017:11
  10444e:    16 ed 00 44       	ifs (r6 >= r4) {
  104452:    10 16             		r0 = r1			  ## ui_draw_arc.c:1017:11
  104454:    b7 16             		r7 = r11
                               	}			  ## ui_draw_arc.c:1017:11
  104456:    41 20             	r1 = 0			  ## ui_draw_arc.c:1017:11
  104458:    89 ee 0b 50       	ifs (r5 <= r9) goto 22 <get_rect_cover+0x78 : 104472 >
  10445c:    00 63             	r0 = [r0+12] 
  10445e:    70 18             	r0 += r7
  104460:    88 ee 07 00       	ifs (r0 <= r8) goto 14 <get_rect_cover+0x78 : 104472 >
  104464:    b4 e0 52 19       	r1 = r5 - r9			  ## ui_draw_arc.c:1019:20
  104468:    b4 f0 02 08       	r0 = r0 - r8  #			  ## ui_draw_arc.c:1020:22
  10446c:    a1 62             		 [r2+8] = r1			  ## ui_draw_arc.c:1019:12
  10446e:    a0 63             	[r2+12] = r0			  ## ui_draw_arc.c:1020:13
  104470:    41 21             	r1 = 1			  ## ui_draw_arc.c:1020:13
  104472:    10 16             	r0 = r1			  ## ui_draw_arc.c:1025:1
  104474:    5b 04             	{pc, r11-r4} = [sp++]			  ## ui_draw_arc.c:1025:1


blend:
  104476:    7d 04             	[--sp] = {rets, r13-r4}			  ## ui_draw_arc.c:290:0
  104478:    e2 98             	sp += -32			  ## ui_draw_arc.c:290:0
  10447a:    0c d6             	r12 = r0  #			  ## ui_draw_arc.c:290:0
  10447c:    81 24             		 [sp+16] = r1			  ## ui_draw_arc.c:299:12
  10447e:    d0 e9 15 20       	d[sp+20] = r3_r2			  ## ui_draw_arc.c:300:11
  104482:    40 21             	r0 = 1			  ## ui_draw_arc.c:300:11
  104484:    80 27             	[sp+28] = r0			  ## ui_draw_arc.c:302:14
  104486:    c5 ff b4 c8 10 00 	r5 = 1099956 <param_t+0x4 : 10c8b4 >			  ## ui_draw_arc.c:302:14
  10448c:    58 98             	r0 = r5 + 24			  ## ui_draw_arc.c:304:7
  10448e:    89 90             	r1 = sp + 16			  ## ui_draw_arc.c:304:7
  104490:    8a 80             	r2 = sp + 0
  104492:    51 93             	call -154 <get_rect_cover : 1043fa >			  ## ui_draw_arc.c:304:7
  104494:    30 49             	if (r0 == 0) goto 210 <blend+0xF2 : 104568 >
  104496:    06 33             	r6 = [sp+76]
  104498:    88 90             	r0 = sp + 16
  10449a:    89 80             	r1 = sp + 0
  10449c:    42 30             	r2 = 16			  ## ui_draw_arc.c:310:2
  10449e:    80 ff d8 b8 f1 ff 	call -935720 <memcmp : 1fd7c >			  ## ui_draw_arc.c:310:2
  1044a4:    00 52             	if (r0 == 0) goto 36 <blend+0x54 : 1044ca >			  ## ui_draw_arc.c:310:2
  1044a6:    c4 ff 5e ba 10 00 	r4 = 1096286 <imd_clock_init.div+0x9E : 10ba5e >			  ## ui_draw_arc.c:310:2
  1044ac:    02 e1 81 46       	r2 = r4 + 1665			  ## ui_draw_arc.c:310:2
  1044b0:    41 20             	r1 = 0			  ## ui_draw_arc.c:310:2
  1044b2:    43 e0 36 01       	r3 = 310 <UPDATE_SIZE+0xB6 : 136 >			  ## ui_draw_arc.c:310:2
  1044b6:    40 16             	r0 = r4			  ## ui_draw_arc.c:310:2
  1044b8:    80 ff 46 b9 f1 ff 	call -935610 <printf : 1fe04 >			  ## ui_draw_arc.c:310:2
  1044be:    00 e1 27 43       	r0 = r4 + 807			  ## ui_draw_arc.c:310:2
  1044c2:    80 ff 3c b9 f1 ff 	call -935620 <printf : 1fe04 >			  ## ui_draw_arc.c:310:2
  1044c8:    f7 9f             	goto -2 <blend+0x52 : 1044c8 >			  ## ui_draw_arc.c:310:2
  1044ca:    50 67             	r0 = [r5+28] 			  ## ui_draw_arc.c:314:83
  1044cc:    01 21             	r1 = [sp+4]			  ## ui_draw_arc.c:314:48
  1044ce:    10 de             	r0 = r1 - r0  #			  ## ui_draw_arc.c:314:63
  1044d0:    52 68             		 r2 = [r5+32] 			  ## ui_draw_arc.c:314:110
  1044d2:    29 81             	r1 = r2 + 1			  ## ui_draw_arc.c:314:116
  1044d4:    42 22             	r2 = 2			  ## ui_draw_arc.c:314:121
  1044d6:    f4 f1 11 12       	r1 = r1 / r2 (s)  #			  ## ui_draw_arc.c:314:121
  1044da:    52 66             		 r2 = [r5+24] 			  ## ui_draw_arc.c:314:172
  1044dc:    10 db             	r0 *= r1  #			  ## ui_draw_arc.c:314:88
  1044de:    03 20             		 r3 = [sp]			  ## ui_draw_arc.c:314:138
  1044e0:    00 a1             	r0 = r0 << 1			  ## ui_draw_arc.c:314:88
  1044e2:    b2 de             	r2 = r3 - r2  #			  ## ui_draw_arc.c:314:152
  1044e4:    51 60             		 r1 = [r5+0] 			  ## ui_draw_arc.c:314:30
  1044e6:    20 18             	r0 += r2			  ## ui_draw_arc.c:314:130
  1044e8:    00 a1             	r0 = r0 << 1			  ## ui_draw_arc.c:314:22
  1044ea:    10 18             	r0 += r1			  ## ui_draw_arc.c:314:22
  1044ec:    e2 17             	r2 = r6.l (u)			  ## ui_draw_arc.c:312:12
  1044ee:    c0 e1 28 b8       	r11 = r2 >> 8			  ## ui_draw_arc.c:312:50
  1044f2:    ab e1 40 24       	r11 <= insert(r2, p:8, l:16)			  ## ui_draw_arc.c:312:36
  1044f6:    68 e1 1f 60       	r8 = r6 & 0x1F			  ## ui_draw_arc.c:319:6
  1044fa:    d4 e9 08 d0       	r13 = [sp+8]			  ## ui_draw_arc.c:319:6
  1044fe:    b9 e1 98 22       	r9 = uextra(r2, p:5, l:6)			  ## ui_draw_arc.c:318:6
  104502:    c0 e1 2b a8       	r10 = r2 >> 11			  ## ui_draw_arc.c:317:15
  104506:    47 20             	r7 = 0
  104508:    14 8d             	goto 90 <blend+0xEE : 104564 >
  10450a:    d8 ee c0 27       	r2 = b[r12+r7] (u)			  ## ui_draw_arc.c:322:11
  10450e:    12 48             	if (r2 == 0) goto 80 <blend+0xEA : 104560 >			  ## ui_draw_arc.c:322:11
  104510:    92 f8 02 fe       	if (r2 != 255) goto 4 <blend+0xA2 : 104518 >
  104514:    b2 16             	r2 = r11
  104516:    14 83             	goto 70 <blend+0xE8 : 10455e >
  104518:    a6 f0 80 2f       	r6 = 0x100 - r2  #			  ## ui_draw_arc.c:323:17
  10451c:    0d 60             		 r5 = h[r0+0] (u)			  ## ui_draw_arc.c:328:21
  10451e:    d1 a8             	r1 = r5 >> 8			  ## ui_draw_arc.c:328:65
  104520:    64 e1 1f 10       	r4 = r1 & 0x1F			  ## ui_draw_arc.c:332:24
  104524:    a1 e1 40 54       	r1 <= insert(r5, p:8, l:16)			  ## ui_draw_arc.c:328:48
  104528:    f0 f1 20 38       	r3 = r2 * r8  #			  ## ui_draw_arc.c:332:42
  10452c:    89 60             		 h[r0+0] = r1			  ## ui_draw_arc.c:328:18
  10452e:    64 1b             	r4 *= r6			  ## ui_draw_arc.c:332:29
  104530:    43 18             	r3 += r4			  ## ui_draw_arc.c:332:38
  104532:    63 e1 fe 3c       	r3 = r3 & 0x7F00			  ## ui_draw_arc.c:334:54
  104536:    f0 e1 20 4a       	r4 = r2 * r10			  ## ui_draw_arc.c:330:40
  10453a:    b5 e1 94 51       	r5 = uextra(r5, p:3, l:5)			  ## ui_draw_arc.c:330:11
  10453e:    65 1b             	r5 *= r6			  ## ui_draw_arc.c:330:27
  104540:    54 18             	r4 += r5			  ## ui_draw_arc.c:330:36
  104542:    c4 a8             	r4 = r4 >> 8			  ## ui_draw_arc.c:334:40
  104544:    44 a3             	r4 = r4 << 3			  ## ui_draw_arc.c:330:49
  104546:    43 19             	r3 |= r4			  ## ui_draw_arc.c:334:33
  104548:    92 1b             	r2 *= r9			  ## ui_draw_arc.c:331:44
  10454a:    b1 e1 98 12       	r1 = uextra(r1, p:5, l:6)			  ## ui_draw_arc.c:331:25
  10454e:    61 1b             	r1 *= r6			  ## ui_draw_arc.c:331:31
  104550:    21 18             	r1 += r2			  ## ui_draw_arc.c:331:40
  104552:    92 ab             	r2 = r1 >> 11			  ## ui_draw_arc.c:334:27
  104554:    32 19             	r2 |= r3			  ## ui_draw_arc.c:334:46
  104556:    11 a5             	r1 = r1 << 5			  ## ui_draw_arc.c:334:77
  104558:    61 e1 60 1c       	r1 = r1 & 0xE000			  ## ui_draw_arc.c:334:77
  10455c:    12 19             	r2 |= r1			  ## ui_draw_arc.c:334:60
  10455e:    8a 60             	h[r0+0] = r2
  104560:    c7 21             	r7 += 1			  ## ui_draw_arc.c:321:40
  104562:    c0 22             	r0 += 2			  ## ui_draw_arc.c:336:11
  104564:    8d ed d1 71       	ifs (r7 < r13) goto -94 <blend+0x94 : 10450a >
  104568:    02 88             	sp += 32
  10456a:    5d 04             	{pc, r13-r4} = [sp++]			  ## ui_draw_arc.c:338:1


mask_remove_id:
  10456c:    70 f8 09 fe       	if (r0 == -1) goto 18 <mask_remove_id+0x16 : 104582 >			  ## ui_mask.c:1010:0
  104570:    c1 ff 4c c9 10 00 	r1 = 1100108 <_mask_list : 10c94c >			  ## ui_mask.c:1014:22
  104576:    00 a3             	r0 = r0 << 3			  ## ui_mask.c:1014:22
  104578:    10 18             	r0 += r1			  ## ui_mask.c:1014:22
  10457a:    42 20             	r2 = 0			  ## ui_mask.c:1015:24
  10457c:    43 20             	r3 = 0			  ## ui_mask.c:1015:24
  10457e:    50 ec 01 20       	d[r0+0] = r3_r2			  ## ui_mask.c:1015:24
  104582:    80 00             	rts


draw_rectangle:
  104584:    7f 04             	[--sp] = {rets, r15-r4}			  ## ui_draw_arc.c:992:0
  104586:    a2 97             	sp += -292			  ## ui_draw_arc.c:992:0
  104588:    2d d6             	r13 = r2  #			  ## ui_draw_arc.c:992:0
  10458a:    22 63             		 r2 = [r2+12] 			  ## ui_draw_arc.c:993:11
  10458c:    16 16             	r6 = r1
  10458e:    0a 16             	r10 = r0
  104590:    02 f8 c6 00       	if (r2 == 0) goto 396 <draw_rectangle+0x19C : 104720 >
  104594:    50 ee d4 01       	r0 = b[r13+20] (u)			  ## ui_draw_arc.c:816:11
  104598:    03 ff 03 00 ac 01 	if (r0 < 3) goto 856 <draw_rectangle+0x372 : 1048f6 >			  ## ui_draw_arc.c:816:11
  10459e:    d0 ec d0 01       	r0 = [r13+16]			  ## ui_draw_arc.c:822:11
  1045a2:    00 ff 00 00 a7 01 	if (r0 == 0) goto 846 <draw_rectangle+0x372 : 1048f6 >			  ## ui_draw_arc.c:822:11
  1045a8:    d0 ec a8 10       	r1 = [r10+8]
  1045ac:    d0 ec a0 00       	r0 = [r10+0]
  1045b0:    80 ff 26 34 00 00 	call 13350 <area_get_width : 1079dc >			  ## ui_draw_arc.c:826:17
  1045b6:    d0 ec ac 10       	r1 = [r10+12]			  ## ui_draw_arc.c:826:17
  1045ba:    d0 ec a4 20       	r2 = [r10+4]			  ## ui_draw_arc.c:826:17
  1045be:    04 16             	r4 = r0			  ## ui_draw_arc.c:826:17
  1045c0:    20 16             	r0 = r2			  ## ui_draw_arc.c:827:17
  1045c2:    80 ff 1a 34 00 00 	call 13338 <area_get_height : 1079e2 >			  ## ui_draw_arc.c:827:17
  1045c8:    d0 ec d0 70       	r7 = [r13+0]			  ## ui_draw_arc.c:831:18
  1045cc:    05 16             	r5 = r0			  ## ui_draw_arc.c:827:17
  1045ce:    f8 e8 b4 00       	r0 = sp + 180
  1045d2:    a1 16             	r1 = r10			  ## ui_draw_arc.c:837:2
  1045d4:    80 ff da 33 00 00 	call 13274 <area_copy : 1079b4 >			  ## ui_draw_arc.c:837:2
  1045da:    35 e4 41 05       	r0 = smin(r4, r5)			  ## ui_draw_arc.c:832:19
  1045de:    d0 ec dc 10       	r1 = [r13+12]
  1045e2:    8a a1             	r2 = r0 >>> 1			  ## ui_draw_arc.c:833:24
  1045e4:    d0 ec d0 01       	r0 = [r13+16]			  ## ui_draw_arc.c:838:26
  1045e8:    35 e4 71 82       	r8 = smin(r7, r2)			  ## ui_draw_arc.c:833:6
  1045ec:    b4 e0 10 28       	r2 = r1 + r8			  ## ui_draw_arc.c:838:101
  1045f0:    a2 e0 00 20       	r2 = 0x0 - r2			  ## ui_draw_arc.c:838:80
  1045f4:    23 16             	r3 = r2			  ## ui_draw_arc.c:838:20
  1045f6:    30 ea 04 00       	if ((r0 & 0x4) != 0) {			  ## ui_draw_arc.c:838:20
  1045fa:    13 16             		r3 = r1
                               	}			  ## ui_draw_arc.c:838:20
  1045fc:    24 2d             	r4 = [sp+180]			  ## ui_draw_arc.c:838:16
  1045fe:    34 18             	r4 += r3			  ## ui_draw_arc.c:838:16
  104600:    23 d6             	r3 = r2  #			  ## ui_draw_arc.c:839:20
  104602:    a4 2d             		 [sp+180] = r4			  ## ui_draw_arc.c:838:16
  104604:    30 ea 08 00       	if ((r0 & 0x8) != 0) {			  ## ui_draw_arc.c:838:16
  104608:    13 16             		r3 = r1
                               	}			  ## ui_draw_arc.c:839:20
  10460a:    25 2f             	r5 = [sp+188]			  ## ui_draw_arc.c:839:16
  10460c:    df 1e             	r7 = r5 - r3			  ## ui_draw_arc.c:839:16
  10460e:    23 d6             	r3 = r2  #			  ## ui_draw_arc.c:840:20
  104610:    a7 2f             		 [sp+188] = r7			  ## ui_draw_arc.c:839:16
  104612:    30 ea 02 00       	if ((r0 & 0x2) != 0) {			  ## ui_draw_arc.c:839:16
  104616:    13 16             		r3 = r1
                               	}			  ## ui_draw_arc.c:840:20
  104618:    25 2e             	r5 = [sp+184]			  ## ui_draw_arc.c:840:16
  10461a:    35 18             	r5 += r3			  ## ui_draw_arc.c:840:16
  10461c:    a5 2e             	[sp+184] = r5			  ## ui_draw_arc.c:840:16
  10461e:    30 ea 01 00       	if ((r0 & 0x1) != 0) {			  ## ui_draw_arc.c:840:16
  104622:    12 16             		r2 = r1
                               	}			  ## ui_draw_arc.c:841:20
  104624:    21 30             	r1 = [sp+192]			  ## ui_draw_arc.c:841:16
  104626:    b4 e0 12 e2       	r14 = r1 - r2			  ## ui_draw_arc.c:841:16
  10462a:    d4 e9 c1 e0       	[sp+192] = r14			  ## ui_draw_arc.c:841:16
  10462e:    80 f8 b1 1e       	if (r0 != 15) goto 354 <draw_rectangle+0x210 : 104794 >			  ## ui_draw_arc.c:842:6
  104632:    d0 ec d0 f0       	r15 = [r13+0]			  ## ui_draw_arc.c:843:52
  104636:    d0 ec a8 c0       	r12 = [r10+8]			  ## ui_draw_arc.c:353:33
  10463a:    50 ee d9 00       	r0 = b[r13+9] (u)			  ## ui_draw_arc.c:353:33
  10463e:    c1 d6             	r1 = r12  #			  ## ui_draw_arc.c:363:21
  104640:    80 21             		 [sp+4] = r0			  ## ui_draw_arc.c:363:21
  104642:    50 ee d8 b0       	r11 = b[r13+8] (u)			  ## ui_draw_arc.c:363:21
  104646:    d0 ec a0 00       	r0 = [r10+0]			  ## ui_draw_arc.c:363:21
  10464a:    80 ff 8c 33 00 00 	call 13196 <area_get_width : 1079dc >			  ## ui_draw_arc.c:363:21
  104650:    d0 ec ac 10       	r1 = [r10+12]			  ## ui_draw_arc.c:363:21
  104654:    d0 ec a4 20       	r2 = [r10+4]			  ## ui_draw_arc.c:363:21
  104658:    08 16             	r8 = r0			  ## ui_draw_arc.c:363:21
  10465a:    20 16             	r0 = r2			  ## ui_draw_arc.c:364:21
  10465c:    80 ff 80 33 00 00 	call 13184 <area_get_height : 1079e2 >			  ## ui_draw_arc.c:364:21
  104662:    09 16             	r9 = r0			  ## ui_draw_arc.c:364:21
  104664:    f8 e8 14 01       	r0 = sp + 276
  104668:    a1 16             	r1 = r10			  ## ui_draw_arc.c:372:14
  10466a:    62 16             	r2 = r6			  ## ui_draw_arc.c:372:14
  10466c:    bf ea 37 fe       	call -914 <_area_intersect : 1042de >			  ## ui_draw_arc.c:372:14
  104670:    00 ff 00 00 40 01 	if (r0 == 0) goto 640 <draw_rectangle+0x372 : 1048f6 >
  104676:    00 e1 01 e0       	r0 = r14 + 1			  ## ui_mask.h:139:26
  10467a:    08 1f             	r0 = r0 - r5			  ## ui_mask.h:139:39
  10467c:    79 81             	r1 = r7 + 1			  ## ui_mask.h:134:26
  10467e:    11 1f             	r1 = r1 - r4			  ## ui_mask.h:134:39
  104680:    35 e4 11 00       	r0 = smin(r1, r0)			  ## ui_draw_arc.c:356:19
  104684:    88 a1             	r0 = r0 >>> 1			  ## ui_draw_arc.c:357:23
  104686:    35 e4 01 2f       	r2 = smin(r0, r15)			  ## ui_draw_arc.c:357:6
  10468a:    b4 e0 c2 07       	r0 = r12 - r7			  ## ui_draw_arc.c:353:36
  10468e:    26 1c             	r6 = r2 + r0			  ## ui_draw_arc.c:361:17
  104690:    d4 e9 14 41       	r4 = [sp+276]			  ## ui_mask.h:134:36
  104694:    d4 e9 1c c1       	r12 = [sp+284]			  ## ui_mask.h:134:23
  104698:    35 e4 81 09       	r0 = smin(r8, r9)			  ## ui_draw_arc.c:365:15
  10469c:    8f a1             	r7 = r0 >>> 1			  ## ui_draw_arc.c:366:24
  10469e:    00 21             	r0 = [sp+4]
  1046a0:    ab e1 60 04       	r11 <= insert(r0, p:8, l:24)
  1046a4:    f8 e8 ec 50       	r5 = sp + 236
  1046a8:    f8 e8 b4 10       	r1 = sp + 180
  1046ac:    43 21             	r3 = 1			  ## ui_draw_arc.c:380:2
  1046ae:    50 16             	r0 = r5			  ## ui_draw_arc.c:380:2
  1046b0:    bf ea 4a fe       	call -876 <mask_radius_init : 104348 >			  ## ui_draw_arc.c:380:2
  1046b4:    35 e4 61 67       	r6 = smin(r6, r7)			  ## ui_draw_arc.c:366:6
  1046b8:    50 16             	r0 = r5			  ## ui_draw_arc.c:381:20
  1046ba:    bf ea 77 fe       	call -786 <mask_add : 1043ac >			  ## ui_draw_arc.c:381:20
  1046be:    08 16             	r8 = r0			  ## ui_draw_arc.c:381:20
  1046c0:    f8 e8 c4 50       	r5 = sp + 196
  1046c4:    43 20             	r3 = 0			  ## ui_draw_arc.c:384:2
  1046c6:    50 16             	r0 = r5			  ## ui_draw_arc.c:384:2
  1046c8:    a1 16             	r1 = r10			  ## ui_draw_arc.c:384:2
  1046ca:    62 16             	r2 = r6			  ## ui_draw_arc.c:384:2
  1046cc:    bf ea 3c fe       	call -904 <mask_radius_init : 104348 >			  ## ui_draw_arc.c:384:2
  1046d0:    00 e1 01 c0       	r0 = r12 + 1			  ## ui_mask.h:134:26
  1046d4:    07 1f             	r7 = r0 - r4			  ## ui_mask.h:134:39
  1046d6:    50 16             	r0 = r5			  ## ui_draw_arc.c:385:21
  1046d8:    bf ea 68 fe       	call -816 <mask_add : 1043ac >			  ## ui_draw_arc.c:385:21
  1046dc:    09 16             	r9 = r0			  ## ui_draw_arc.c:385:21
  1046de:    bf ea 28 fe       	call -944 <_mem_buf_get : 104332 >			  ## ui_draw_arc.c:387:17
  1046e2:    d4 e9 20 a1       	r10 = [sp+288]			  ## ui_draw_arc.c:387:17
  1046e6:    d4 e9 18 51       	r5 = [sp+280]			  ## ui_draw_arc.c:413:22
  1046ea:    06 16             	r6 = r0			  ## ui_draw_arc.c:387:17
  1046ec:    04 95             	goto 42 <draw_rectangle+0x194 : 104718 >
  1046ee:    79 3f             	r1 = 255			  ## ui_basic.c:61:2
  1046f0:    60 16             	r0 = r6			  ## ui_basic.c:61:2
  1046f2:    72 16             	r2 = r7			  ## ui_basic.c:61:2
  1046f4:    80 ff 86 b6 f1 ff 	call -936314 <memset : 1fd80 >			  ## ui_basic.c:61:2
  1046fa:    60 16             	r0 = r6			  ## ui_draw_arc.c:415:15
  1046fc:    41 16             	r1 = r4			  ## ui_draw_arc.c:415:15
  1046fe:    52 16             	r2 = r5			  ## ui_draw_arc.c:415:15
  104700:    73 16             	r3 = r7			  ## ui_draw_arc.c:415:15
  104702:    bf ea 64 fe       	call -824 <mask_apply : 1043ce >			  ## ui_draw_arc.c:415:15
  104706:    d4 e9 01 b0       	[sp] = r11			  ## ui_draw_arc.c:416:4
  10470a:    60 16             	r0 = r6			  ## ui_draw_arc.c:416:4
  10470c:    41 16             	r1 = r4			  ## ui_draw_arc.c:416:4
  10470e:    52 16             	r2 = r5			  ## ui_draw_arc.c:416:4
  104710:    73 16             	r3 = r7			  ## ui_draw_arc.c:416:4
  104712:    bf ea b0 fe       	call -672 <blend : 104476 >			  ## ui_draw_arc.c:416:4
  104716:    c5 21             	r5 += 1			  ## ui_draw_arc.c:413:46
  104718:    8a ee e9 51       	ifs (r5 <= r10) goto -46 <draw_rectangle+0x16A : 1046ee >
  10471c:    80 16             	r0 = r8			  ## ui_draw_arc.c:420:2
  10471e:    74 86             	goto 460 <draw_rectangle+0x368 : 1048ec >			  ## ui_draw_arc.c:420:2
  104720:    50 ee d6 00       	r0 = b[r13+6] (u)			  ## ui_draw_arc.c:932:11
  104724:    80 f9 e7 06       	if (r0 < 3) goto 462 <draw_rectangle+0x372 : 1048f6 >			  ## ui_draw_arc.c:932:11
  104728:    cc 80             	r4 = sp + 64
  10472a:    40 16             	r0 = r4			  ## ui_draw_arc.c:937:2
  10472c:    a1 16             	r1 = r10			  ## ui_draw_arc.c:937:2
  10472e:    80 ff 80 32 00 00 	call 12928 <area_copy : 1079b4 >			  ## ui_draw_arc.c:937:2
  104734:    50 ee d6 50       	r5 = b[r13+6] (u)			  ## ui_draw_arc.c:940:16
  104738:    a8 90             	r0 = sp + 48			  ## ui_draw_arc.c:940:16
  10473a:    41 16             	r1 = r4			  ## ui_draw_arc.c:947:14
  10473c:    62 16             	r2 = r6			  ## ui_draw_arc.c:947:14
  10473e:    bf ea ce fd       	call -1124 <_area_intersect : 1042de >			  ## ui_draw_arc.c:947:14
  104742:    49 e0 ff ff       	r9 = -1 <_HEAP_END+0x1D84FFF : 1ffffff >			  ## ui_draw_arc.c:941:6
  104746:    b5 ec fd 00       	if (r5 <= 253) {			  ## ui_draw_arc.c:941:6
  10474a:    59 16             		r9 = r5
                               	}			  ## ui_draw_arc.c:941:6
  10474c:    00 f8 d3 00       	if (r0 == 0) goto 422 <draw_rectangle+0x372 : 1048f6 >			  ## ui_draw_arc.c:941:6
  104750:    06 2c             	r6 = [sp+48]			  ## ui_mask.h:134:36
  104752:    03 2e             	r3 = [sp+56]			  ## ui_mask.h:134:23
  104754:    bf ea ed fd       	call -1062 <_mem_buf_get : 104332 >			  ## ui_draw_arc.c:954:17
  104758:    07 d6             	r7 = r0  #			  ## ui_draw_arc.c:954:17
  10475a:    01 33             		 r1 = [sp+76]			  ## ui_mask.h:139:23
  10475c:    00 31             	r0 = [sp+68]			  ## ui_mask.h:139:36
  10475e:    c1 21             	r1 += 1			  ## ui_mask.h:139:26
  104760:    04 30             	r4 = [sp+64]			  ## ui_mask.h:134:36
  104762:    10 de             	r0 = r1 - r0  #			  ## ui_mask.h:139:39
  104764:    02 32             		 r2 = [sp+72]			  ## ui_mask.h:134:23
  104766:    29 81             	r1 = r2 + 1			  ## ui_mask.h:134:26
  104768:    d0 ec d0 20       	r2 = [r13+0]			  ## ui_draw_arc.c:966:18
  10476c:    11 1f             	r1 = r1 - r4			  ## ui_mask.h:134:39
  10476e:    35 e4 11 00       	r0 = smin(r1, r0)			  ## ui_draw_arc.c:967:19
  104772:    88 a1             	r0 = r0 >>> 1			  ## ui_draw_arc.c:968:24
  104774:    35 e4 21 20       	r2 = smin(r2, r0)			  ## ui_draw_arc.c:968:6
  104778:    3d 81             	r5 = r3 + 1			  ## ui_mask.h:134:26
  10477a:    82 fd 27 02       	ifs (r2 < 1) goto 78 <draw_rectangle+0x248 : 1047cc >			  ## ui_mask.h:134:26
  10477e:    8c 88             	r4 = sp + 8
  104780:    c9 80             	r1 = sp + 64
  104782:    43 20             	r3 = 0			  ## ui_draw_arc.c:974:3
  104784:    40 16             	r0 = r4			  ## ui_draw_arc.c:974:3
  104786:    bf ea df fd       	call -1090 <mask_radius_init : 104348 >			  ## ui_draw_arc.c:974:3
  10478a:    40 16             	r0 = r4			  ## ui_draw_arc.c:975:18
  10478c:    bf ea 0e fe       	call -996 <mask_add : 1043ac >			  ## ui_draw_arc.c:975:18
  104790:    08 16             	r8 = r0			  ## ui_draw_arc.c:975:18
  104792:    04 9e             	goto 60 <draw_rectangle+0x24C : 1047d0 >
  104794:    f8 e8 a4 00       	r0 = sp + 164
  104798:    a1 16             	r1 = r10			  ## ui_draw_arc.c:852:15
  10479a:    62 16             	r2 = r6			  ## ui_draw_arc.c:852:15
  10479c:    bf ea 9f fd       	call -1218 <_area_intersect : 1042de >			  ## ui_draw_arc.c:852:15
  1047a0:    00 f8 a9 00       	if (r0 == 0) goto 338 <draw_rectangle+0x372 : 1048f6 >
  1047a4:    26 2b             	r6 = [sp+172]			  ## ui_mask.h:134:23
  1047a6:    d4 e9 a4 c0       	r12 = [sp+164]			  ## ui_mask.h:134:36
  1047aa:    bf ea c2 fd       	call -1148 <_mem_buf_get : 104332 >			  ## ui_draw_arc.c:859:18
  1047ae:    07 16             	r7 = r0			  ## ui_draw_arc.c:859:18
  1047b0:    88 fd 2b 02       	ifs (r8 < 1) goto 86 <draw_rectangle+0x286 : 10480a >
  1047b4:    ec 9c             	r4 = sp + 124
  1047b6:    43 20             	r3 = 0			  ## ui_draw_arc.c:864:4
  1047b8:    40 16             	r0 = r4			  ## ui_draw_arc.c:864:4
  1047ba:    a1 16             	r1 = r10			  ## ui_draw_arc.c:864:4
  1047bc:    82 16             	r2 = r8			  ## ui_draw_arc.c:864:4
  1047be:    bf ea c3 fd       	call -1146 <mask_radius_init : 104348 >			  ## ui_draw_arc.c:864:4
  1047c2:    40 16             	r0 = r4			  ## ui_draw_arc.c:865:19
  1047c4:    bf ea f2 fd       	call -1052 <mask_add : 1043ac >			  ## ui_draw_arc.c:865:19
  1047c8:    09 16             	r9 = r0			  ## ui_draw_arc.c:865:19
  1047ca:    14 81             	goto 66 <draw_rectangle+0x28A : 10480e >
  1047cc:    48 e0 ff ff       	r8 = -1 <_HEAP_END+0x1D84FFF : 1ffffff >
  1047d0:    d4 e9 3c a0       	r10 = [sp+60]
  1047d4:    d5 df             	r5 = r5 - r6  #			  ## ui_mask.h:134:39
  1047d6:    04 2d             		 r4 = [sp+52]			  ## ui_draw_arc.c:980:21
  1047d8:    04 94             	goto 40 <draw_rectangle+0x27E : 104802 >
  1047da:    70 16             	r0 = r7			  ## ui_basic.c:10:2
  1047dc:    91 16             	r1 = r9			  ## ui_basic.c:10:2
  1047de:    52 16             	r2 = r5			  ## ui_basic.c:10:2
  1047e0:    80 ff 9a b5 f1 ff 	call -936550 <memset : 1fd80 >			  ## ui_basic.c:10:2
  1047e6:    70 16             	r0 = r7			  ## ui_draw_arc.c:982:14
  1047e8:    61 16             	r1 = r6			  ## ui_draw_arc.c:982:14
  1047ea:    42 15             	r3_r2 = r5_r4			  ## ui_draw_arc.c:982:14
  1047ec:    bf ea ef fd       	call -1058 <mask_apply : 1043ce >			  ## ui_draw_arc.c:982:14
  1047f0:    50 ed d4 00       	r0 = h[r13+4] (u)			  ## ui_draw_arc.c:983:3
  1047f4:    70 d6             	r0 = r7  #			  ## ui_draw_arc.c:983:3
  1047f6:    80 20             		 [sp] = r0			  ## ui_draw_arc.c:983:3
  1047f8:    61 16             	r1 = r6			  ## ui_draw_arc.c:983:3
  1047fa:    42 15             	r3_r2 = r5_r4			  ## ui_draw_arc.c:983:3
  1047fc:    bf ea 3b fe       	call -906 <blend : 104476 >			  ## ui_draw_arc.c:983:3
  104800:    c4 21             	r4 += 1			  ## ui_draw_arc.c:980:45
  104802:    8a ee ea 41       	ifs (r4 <= r10) goto -44 <draw_rectangle+0x256 : 1047da >
  104806:    80 16             	r0 = r8			  ## ui_draw_arc.c:986:2
  104808:    34 94             	goto 232 <draw_rectangle+0x36E : 1048f2 >			  ## ui_draw_arc.c:986:2
  10480a:    49 e0 ff ff       	r9 = -1 <_HEAP_END+0x1D84FFF : 1ffffff >
  10480e:    d0 ec dc 00       	r0 = [r13+12]			  ## ui_draw_arc.c:873:62
  104812:    b4 e0 82 20       	r2 = r8 - r0			  ## ui_draw_arc.c:873:55
  104816:    cc 94             	r4 = sp + 84			  ## ui_draw_arc.c:873:55
  104818:    f8 e8 b4 10       	r1 = sp + 180
  10481c:    43 21             	r3 = 1			  ## ui_draw_arc.c:873:3
  10481e:    4e e0 01 00       	r14 = 1 <moveable_slot_size+0x1 : 1 >			  ## ui_draw_arc.c:873:3
  104822:    40 16             	r0 = r4			  ## ui_draw_arc.c:873:3
  104824:    bf ea 90 fd       	call -1248 <mask_radius_init : 104348 >			  ## ui_draw_arc.c:873:3
  104828:    40 16             	r0 = r4			  ## ui_draw_arc.c:874:21
  10482a:    bf ea bf fd       	call -1154 <mask_add : 1043ac >			  ## ui_draw_arc.c:874:21
  10482e:    d0 ec dc 10       	r1 = [r13+12]			  ## ui_draw_arc.c:876:21
  104832:    25 2a             	r5 = [sp+168]			  ## ui_draw_arc.c:883:28
  104834:    42 20             	r2 = 0			  ## ui_draw_arc.c:894:17
  104836:    de e9 53 20       	b[sp+83] = r2			  ## ui_draw_arc.c:894:17
  10483a:    de e9 52 20       	b[sp+82] = r2			  ## ui_draw_arc.c:895:17
  10483e:    d0 ec d0 21       	r2 = [r13+16]			  ## ui_draw_arc.c:896:12
  104842:    0b 16             	r11 = r0			  ## ui_draw_arc.c:874:21
  104844:    02 f8 08 02       	if (r2 == 1) goto 16 <draw_rectangle+0x2D4 : 104858 >			  ## ui_draw_arc.c:896:7
  104848:    02 f8 09 06       	if (r2 == 3) goto 18 <draw_rectangle+0x2DA : 10485e >
  10484c:    32 e8 02 40       	if (r2 == 2) {
  104850:    40 21             		r0 = 1			  ## ui_draw_arc.c:897:13
  104852:    de e9 53 00       		b[sp+83] = r0
                               	}			  ## ui_draw_arc.c:897:13
  104856:    04 88             	goto 16 <draw_rectangle+0x2E4 : 104868 >			  ## ui_draw_arc.c:897:13
  104858:    de e9 52 e0       	b[sp+82] = r14			  ## ui_draw_arc.c:900:16
  10485c:    04 85             	goto 10 <draw_rectangle+0x2E4 : 104868 >			  ## ui_draw_arc.c:900:16
  10485e:    40 21             	r0 = 1			  ## ui_draw_arc.c:903:13
  104860:    de e9 53 00       	b[sp+83] = r0			  ## ui_draw_arc.c:903:13
  104864:    de e9 52 00       	b[sp+82] = r0			  ## ui_draw_arc.c:904:16
  104868:    dc e9 53 30       	r3 = b[sp+83] (u)			  ## ui_draw_arc.c:907:27
  10486c:    68 81             	r0 = r6 + 1			  ## ui_mask.h:134:26
  10486e:    f9 3f             	r1 += -1			  ## ui_draw_arc.c:876:21
  104870:    42 20             	r2 = 0			  ## ui_draw_arc.c:876:21
  104872:    83 45             	if (r3 != 0) goto 10 <draw_rectangle+0x2FA : 10487e >			  ## ui_draw_arc.c:876:21
  104874:    dc e9 52 30       	r3 = b[sp+82] (u)			  ## ui_draw_arc.c:907:40
  104878:    42 21             	r2 = 1			  ## ui_draw_arc.c:907:39
  10487a:    03 41             	if (r3 == 0) goto 2 <draw_rectangle+0x2FA : 10487e >			  ## ui_draw_arc.c:907:39
  10487c:    42 20             	r2 = 0			  ## ui_draw_arc.c:907:39
  10487e:    de e9 51 20       	b[sp+81] = r2			  ## ui_draw_arc.c:907:17
  104882:    b4 f0 02 6c       	r6 = r0 - r12  #			  ## ui_mask.h:134:39
  104886:    24 2c             		 r4 = [sp+176]			  ## ui_mask.h:134:39
  104888:    34 e4 81 81       	r8 = smax(r8, r1)			  ## ui_draw_arc.c:876:21
  10488c:    14 8c             	goto 88 <draw_rectangle+0x362 : 1048e6 >
  10488e:    dc e9 51 00       	r0 = b[sp+81] (u)			  ## ui_draw_arc.c:910:8
  104892:    00 57             	if (r0 == 0) goto 46 <draw_rectangle+0x33E : 1048c2 >			  ## ui_draw_arc.c:910:8
  104894:    79 3f             	r1 = 255			  ## ui_basic.c:61:2
  104896:    70 16             	r0 = r7			  ## ui_basic.c:61:2
  104898:    62 16             	r2 = r6			  ## ui_basic.c:61:2
  10489a:    80 ff e0 b4 f1 ff 	call -936736 <memset : 1fd80 >			  ## ui_basic.c:61:2
  1048a0:    70 16             	r0 = r7			  ## ui_draw_arc.c:914:19
  1048a2:    c1 16             	r1 = r12			  ## ui_draw_arc.c:914:19
  1048a4:    52 16             	r2 = r5			  ## ui_draw_arc.c:914:19
  1048a6:    63 16             	r3 = r6			  ## ui_draw_arc.c:914:19
  1048a8:    bf ea 91 fd       	call -1246 <mask_apply : 1043ce >			  ## ui_draw_arc.c:914:19
  1048ac:    50 ed d4 00       	r0 = h[r13+4] (u)			  ## ui_draw_arc.c:915:5
  1048b0:    70 d6             	r0 = r7  #			  ## ui_draw_arc.c:915:5
  1048b2:    80 20             		 [sp] = r0			  ## ui_draw_arc.c:915:5
  1048b4:    c1 16             	r1 = r12			  ## ui_draw_arc.c:915:5
  1048b6:    52 16             	r2 = r5			  ## ui_draw_arc.c:915:5
  1048b8:    63 16             	r3 = r6			  ## ui_draw_arc.c:915:5
  1048ba:    bf ea dc fd       	call -1096 <blend : 104476 >			  ## ui_draw_arc.c:915:5
  1048be:    c5 21             	r5 += 1			  ## ui_draw_arc.c:909:46
  1048c0:    04 92             	goto 36 <draw_rectangle+0x362 : 1048e6 >
  1048c2:    dc e9 53 00       	r0 = b[sp+83] (u)			  ## ui_draw_arc.c:911:9
  1048c6:    00 45             	if (r0 == 0) goto 10 <draw_rectangle+0x34E : 1048d2 >			  ## ui_draw_arc.c:911:9
  1048c8:    d0 ec a4 00       	r0 = [r10+4]			  ## ui_draw_arc.c:911:45
  1048cc:    80 18             	r0 += r8			  ## ui_draw_arc.c:911:48
  1048ce:    80 ee e1 51       	ifs (r5 <= r0) goto -62 <draw_rectangle+0x310 : 104894 >			  ## ui_draw_arc.c:911:48
  1048d2:    dc e9 52 00       	r0 = b[sp+82] (u)			  ## ui_draw_arc.c:912:9
  1048d6:    70 53             	if (r0 == 0) goto -26 <draw_rectangle+0x33A : 1048be >			  ## ui_draw_arc.c:912:9
  1048d8:    d0 ec ac 00       	r0 = [r10+12]			  ## ui_draw_arc.c:912:48
  1048dc:    b4 e0 02 08       	r0 = r0 - r8			  ## ui_draw_arc.c:912:51
  1048e0:    00 ed d8 51       	ifs (r5 >= r0) goto -80 <draw_rectangle+0x310 : 104894 >			  ## ui_draw_arc.c:912:51
  1048e4:    f7 8c             	goto -40 <draw_rectangle+0x33A : 1048be >			  ## ui_draw_arc.c:912:51
  1048e6:    84 ee d2 51       	ifs (r5 <= r4) goto -92 <draw_rectangle+0x30A : 10488e >
  1048ea:    b0 16             	r0 = r11			  ## ui_draw_arc.c:921:3
  1048ec:    bf ea 3e fe       	call -900 <mask_remove_id : 10456c >
  1048f0:    90 16             	r0 = r9
  1048f2:    bf ea 3b fe       	call -906 <mask_remove_id : 10456c >
  1048f6:    42 89             	sp += 292
  1048f8:    5f 04             	{pc, r15-r4} = [sp++]			  ## ui_draw_arc.c:998:1


_trigo_sin:
  1048fa:    41 e0 68 01       	r1 = 360 <UPDATE_SIZE+0xE8 : 168 >			  ## ui_math.c:17:0
  1048fe:    f4 e1 01 11       	r1 = r0 / r1 (s)			  ## ui_math.c:24:22
  104902:    e1 e1 b4 1f       	r1 = r1 * 0x168			  ## ui_math.c:24:22
  104906:    09 1e             	r1 = r0 - r1			  ## ui_math.c:24:22
  104908:    00 e1 68 11       	r0 = r1 + 360			  ## ui_math.c:27:15
  10490c:    31 ed 00 00       	ifs (r1 >= 0) {
  104910:    10 16             		r0 = r1
                               	}			  ## ui_math.c:26:6
  104912:    c1 ff f0 5f 10 00 	r1 = 1073136 <sin0_90_table : 105ff0 >
  104918:    80 fe 04 b2       	ifs (r0 <= 89) goto 8 <_trigo_sin+0x2A : 104924 >
  10491c:    10 fe 05 66       	ifs (r0 > 179) goto 10 <_trigo_sin+0x30 : 10492a >			  ## ui_math.c:32:25
  104920:    a0 e0 b4 00       	r0 = 0xB4 - r0			  ## ui_math.c:33:15
  104924:    d8 ec 1a 00       	r0 = [r1+r0<<2]
  104928:    80 00             	rts			  ## ui_math.c:43:2
  10492a:    30 ee 0d 11       	ifs (r0 > 269) {
  10492e:    a0 e0 b4 0f       		r0 = 0x168 - r0
                               	} else {			  ## ui_math.c:39:15
  104932:    31 e1 30 1d       		r1 = r1 + -720
                               	}			  ## ui_math.c:37:12
  104936:    d8 ec 1a 00       	r0 = [r1+r0<<2]
  10493a:    a0 e0 00 00       	r0 = 0x0 - r0
  10493e:    80 00             	rts			  ## ui_math.c:43:2


mask_line_angle_init:
  104940:    78 04             	[--sp] = {rets, r8-r4}			  ## ui_mask.c:169:0
  104942:    33 e1 4c 1f       	r3 = r1 + -180			  ## ui_mask.c:174:9
  104946:    28 16             	r8 = r2			  ## ui_mask.c:174:9
  104948:    04 16             	r4 = r0			  ## ui_mask.c:174:9
  10494a:    b1 ee b4 00       	ifs (r1 <= 180) {			  ## ui_mask.c:174:9
  10494e:    13 16             		r3 = r1
                               	}			  ## ui_mask.c:173:6
  104950:    00 e1 5a 30       	r0 = r3 + 90			  ## ui_mask.c:177:26
  104954:    61 92             	call -92 <_trigo_sin : 1048fa >			  ## ui_mask.c:177:9
  104956:    06 16             	r6 = r0			  ## ui_mask.c:177:9
  104958:    30 16             	r0 = r3			  ## ui_mask.c:178:9
  10495a:    61 8f             	call -98 <_trigo_sin : 1048fa >			  ## ui_mask.c:178:9
  10495c:    07 16             	r7 = r0			  ## ui_mask.c:178:9
  10495e:    48 85             	r0 = r4 + 5
  104960:    41 20             	r1 = 0			  ## ui_basic.c:110:2
  104962:    4a 33             	r2 = 51			  ## ui_basic.c:110:2
  104964:    80 ff 16 b4 f1 ff 	call -936938 <memset : 1fd80 >			  ## ui_basic.c:110:2
  10496a:    e8 a5             	r0 = r6 >>> 5			  ## ui_mask.c:177:32
  10496c:    02 e1 e3 00       	r2 = r0 + 227			  ## ui_mask.c:177:38
  104970:    fb a5             	r3 = r7 >>> 5			  ## ui_mask.c:178:27
  104972:    06 e1 e3 30       	r6 = r3 + 227			  ## ui_mask.c:178:33
  104976:    79 23             	r1 = 227
  104978:    36 ed e3 e0       	ifs (r6 >= 227) {
  10497c:    7f 23             		r7 = 227
  10497e:    61 16             		r1 = r6			  ## ui_mask.c:88:6
  104980:    25 16             		r5 = r2			  ## ui_mask.c:88:6
  104982:    7a 23             		r2 = 227
                               	} else {			  ## ui_mask.c:88:6
  104984:    7d 23             		r5 = 227			  ## ui_mask.c:88:6
  104986:    67 16             		r7 = r6
                               	}			  ## ui_mask.c:88:6
  104988:    78 f1 fc 80       	r8 = r8 & 0xFFFFFF03  #			  ## ui_mask.c:103:18
  10498c:    c2 62             		 [r4+8] = r2			  ## ui_mask.c:99:18
  10498e:    c7 63             	[r4+12] = r7			  ## ui_mask.c:100:18
  104990:    c5 64             	[r4+16] = r5			  ## ui_mask.c:101:18
  104992:    c1 65             	[r4+20] = r1			  ## ui_mask.c:102:18
  104994:    52 ee 48 81       	b[r4+24] = r8			  ## ui_mask.c:103:18
  104998:    a2 f0 00 30       	r2 = 0x0 - r3  #			  ## ui_mask.c:107:39
  10499c:    c2 67             		 [r4+28] = r2			  ## ui_mask.c:105:17
  10499e:    c7 68             	[r4+32] = r7			  ## ui_mask.c:106:17
  1049a0:    36 ed e3 00       	ifs (r6 >= 227) {			  ## ui_mask.c:106:17
  1049a4:    32 16             		r2 = r3
                               	}			  ## ui_mask.c:107:39
  1049a6:    a3 e0 00 00       	r3 = 0x0 - r0			  ## ui_mask.c:107:17
  1049aa:    30 e4 00 52       	r5 = abs(r2)			  ## ui_mask.c:107:39
  1049ae:    36 ed e3 00       	ifs (r6 >= 227) {
  1049b2:    03 16             		r3 = r0
                               	}			  ## ui_mask.c:107:17
  1049b4:    30 e4 00 63       	r6 = abs(r3)			  ## ui_mask.c:107:17
  1049b8:    47 20             	r7 = 0
  1049ba:    40 21             	r0 = 1			  ## ui_mask.c:107:37
  1049bc:    96 ee 00 05       	ifs (r6 <= r5) {			  ## ui_mask.c:107:37
  1049c0:    40 20             		r0 = 0
                               	}			  ## ui_mask.c:107:37
  1049c2:    52 ee 44 03       	b[r4+52] = r0			  ## ui_mask.c:107:14
  1049c6:    c7 6a             	[r4+40] = r7			  ## ui_mask.c:108:18
  1049c8:    c7 69             	[r4+36] = r7			  ## ui_mask.c:109:18
  1049ca:    c1 ff a6 54 10 00 	r1 = 1070246 <mask_line : 1054a6 >			  ## ui_mask.c:110:16
  1049d0:    c1 60             	[r4+0] = r1			  ## ui_mask.c:110:16
  1049d2:    cf 44             	b[r4+4] = r7			  ## ui_mask.c:111:18
  1049d4:    85 ee 13 60       	ifs (r6 <= r5) goto 38 <mask_line_angle_init+0xBE : 1049fe >			  ## ui_mask.c:116:6
  1049d8:    03 47             	if (r3 == 0) goto 14 <mask_line_angle_init+0xA8 : 1049e8 >
  1049da:    60 e0 80 19       	r1 = 0x100000			  ## ui_mask.c:120:18
  1049de:    f4 e1 11 13       	r1 = r1 / r3 (s)			  ## ui_mask.c:120:18
  1049e2:    21 1b             	r1 *= r2			  ## ui_mask.c:121:25
  1049e4:    99 aa             	r1 = r1 >>> 10			  ## ui_mask.c:121:31
  1049e6:    c1 6a             	[r4+40] = r1			  ## ui_mask.c:121:20
  1049e8:    05 e1 28 40       	r5 = r4 + 40			  ## ui_mask.c:108:9
  1049ec:    02 5a             	if (r2 == 0) goto 52 <mask_line_angle_init+0xE2 : 104a22 >			  ## ui_mask.c:108:9
  1049ee:    60 e0 80 19       	r1 = 0x100000			  ## ui_mask.c:125:18
  1049f2:    f4 e1 11 12       	r1 = r1 / r2 (s)			  ## ui_mask.c:125:18
  1049f6:    31 1b             	r1 *= r3			  ## ui_mask.c:126:25
  1049f8:    99 aa             	r1 = r1 >>> 10			  ## ui_mask.c:126:31
  1049fa:    c1 69             	[r4+36] = r1			  ## ui_mask.c:126:20
  1049fc:    04 92             	goto 36 <mask_line_angle_init+0xE2 : 104a22 >			  ## ui_mask.c:126:20
  1049fe:    02 47             	if (r2 == 0) goto 14 <mask_line_angle_init+0xCE : 104a0e >
  104a00:    60 e0 80 19       	r1 = 0x100000			  ## ui_mask.c:133:18
  104a04:    f4 e1 11 12       	r1 = r1 / r2 (s)			  ## ui_mask.c:133:18
  104a08:    31 1b             	r1 *= r3			  ## ui_mask.c:134:25
  104a0a:    99 aa             	r1 = r1 >>> 10			  ## ui_mask.c:134:31
  104a0c:    c1 69             	[r4+36] = r1			  ## ui_mask.c:134:20
  104a0e:    05 e1 24 40       	r5 = r4 + 36			  ## ui_mask.c:109:9
  104a12:    03 47             	if (r3 == 0) goto 14 <mask_line_angle_init+0xE2 : 104a22 >			  ## ui_mask.c:109:9
  104a14:    60 e0 80 19       	r1 = 0x100000			  ## ui_mask.c:138:18
  104a18:    f4 e1 11 13       	r1 = r1 / r3 (s)			  ## ui_mask.c:138:18
  104a1c:    21 1b             	r1 *= r2			  ## ui_mask.c:139:25
  104a1e:    99 aa             	r1 = r1 >>> 10			  ## ui_mask.c:139:31
  104a20:    c1 6a             	[r4+40] = r1			  ## ui_mask.c:139:20
  104a22:    52 60             	r2 = [r5+0] 
  104a24:    c2 6b             	[r4+44] = r2
  104a26:    08 f8 06 06       	if (r8 == 3) goto 12 <mask_line_angle_init+0xF6 : 104a36 >			  ## ui_mask.c:144:6
  104a2a:    08 f8 09 04       	if (r8 == 2) goto 18 <mask_line_angle_init+0x100 : 104a40 >
  104a2e:    38 e8 01 00       	if (r8 == 1) {
  104a32:    30 21             		r0 |= 2
                               	}			  ## ui_mask.c:147:14
  104a34:    04 8b             	goto 22 <mask_line_angle_init+0x10C : 104a4c >			  ## ui_mask.c:147:14
  104a36:    41 e1 02 00       	r1 = r0 | 0x2			  ## ui_mask.c:158:15
  104a3a:    82 fe 06 00       	ifs (r2 <= 0) goto 12 <mask_line_angle_init+0x10A : 104a4a >			  ## ui_mask.c:158:15
  104a3e:    04 86             	goto 12 <mask_line_angle_init+0x10C : 104a4c >			  ## ui_mask.c:158:15
  104a40:    41 e1 02 00       	r1 = r0 | 0x2			  ## ui_mask.c:150:15
  104a44:    b2 ee 00 00       	ifs (r2 <= 0) {			  ## ui_mask.c:150:15
  104a48:    01 16             		r1 = r0
                               	}			  ## ui_mask.c:149:7
  104a4a:    10 16             	r0 = r1
  104a4c:    ab a2             	r3 = r2 >>> 2			  ## ui_mask.c:162:28
  104a4e:    a1 e0 00 30       	r1 = 0x0 - r3			  ## ui_mask.c:164:16
  104a52:    52 ee 44 03       	b[r4+52] = r0			  ## ui_mask.c:164:16
  104a56:    32 ed 00 00       	ifs (r2 >= 0) {			  ## ui_mask.c:164:16
  104a5a:    31 16             		r1 = r3
                               	}			  ## ui_mask.c:163:6
  104a5c:    c1 6c             	[r4+48] = r1			  ## ui_mask.c:162:13
  104a5e:    58 04             	{pc, r8-r4} = [sp++]			  ## ui_mask.c:181:1


get_rounded_area:
  104a60:    77 04             	[--sp] = {rets, r7-r4}			  ## ui_draw_arc.c:653:0
  104a62:    03 16             	r3 = r0			  ## ui_draw_arc.c:653:0
  104a64:    40 21             	r0 = 1			  ## ui_draw_arc.c:653:0
  104a66:    90 e1 03 51       	r5 = r0 & ~r1			  ## ui_draw_arc.c:658:18
  104a6a:    94 a1             	r4 = r1 >> 1			  ## ui_draw_arc.c:657:28
  104a6c:    a0 e0 5a 30       	r0 = 0x5A - r3			  ## ui_draw_arc.c:678:59
  104a70:    a7 e0 e3 40       	r7 = 0xE3 - r4			  ## ui_draw_arc.c:678:29
  104a74:    bf ea 41 ff       	call -382 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:678:45
  104a78:    70 1b             	r0 *= r7			  ## ui_draw_arc.c:678:43
  104a7a:    8e a7             	r6 = r0 >>> 7			  ## ui_draw_arc.c:678:69
  104a7c:    30 16             	r0 = r3			  ## ui_draw_arc.c:679:45
  104a7e:    bf ea 3c ff       	call -392 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:679:45
  104a82:    70 1b             	r0 *= r7			  ## ui_draw_arc.c:679:43
  104a84:    88 a7             	r0 = r0 >>> 7			  ## ui_draw_arc.c:679:64
  104a86:    86 fd 07 02       	ifs (r6 < 1) goto 14 <get_rounded_area+0x38 : 104a98 >			  ## ui_draw_arc.c:681:6
  104a8a:    31 e1 81 6f       	r1 = r6 + -127			  ## ui_draw_arc.c:682:18
  104a8e:    9b a8             	r3 = r1 >>> 8			  ## ui_draw_arc.c:682:24
  104a90:    31 1d             	r1 = r3 + r4			  ## ui_draw_arc.c:684:24
  104a92:    56 1f             	r6 = r5 - r4			  ## ui_draw_arc.c:683:24
  104a94:    63 18             	r3 += r6			  ## ui_draw_arc.c:683:37
  104a96:    04 86             	goto 12 <get_rounded_area+0x44 : 104aa4 >
  104a98:    49 1f             	r1 = r4 - r5			  ## ui_draw_arc.c:688:24
  104a9a:    03 e1 7f 60       	r3 = r6 + 127			  ## ui_draw_arc.c:686:18
  104a9e:    bb a8             	r3 = r3 >>> 8			  ## ui_draw_arc.c:686:24
  104aa0:    31 18             	r1 += r3			  ## ui_draw_arc.c:688:37
  104aa2:    33 1f             	r3 = r3 - r4			  ## ui_draw_arc.c:687:24
  104aa4:    a3 60             	[r2+0] = r3			  ## ui_draw_arc.c:687:16
  104aa6:    a1 62             	[r2+8] = r1			  ## ui_draw_arc.c:687:16
  104aa8:    80 fd 06 02       	ifs (r0 < 1) goto 12 <get_rounded_area+0x58 : 104ab8 >			  ## ui_draw_arc.c:691:6
  104aac:    e0 21             	r0 += -127			  ## ui_draw_arc.c:692:18
  104aae:    89 a8             	r1 = r0 >>> 8			  ## ui_draw_arc.c:692:24
  104ab0:    10 1d             	r0 = r1 + r4			  ## ui_draw_arc.c:694:24
  104ab2:    53 1f             	r3 = r5 - r4			  ## ui_draw_arc.c:693:24
  104ab4:    31 18             	r1 += r3			  ## ui_draw_arc.c:693:37
  104ab6:    04 85             	goto 10 <get_rounded_area+0x62 : 104ac2 >
  104ab8:    49 1f             	r1 = r4 - r5			  ## ui_draw_arc.c:698:24
  104aba:    d8 3f             	r0 += 127			  ## ui_draw_arc.c:696:18
  104abc:    8b a8             	r3 = r0 >>> 8			  ## ui_draw_arc.c:696:24
  104abe:    98 1c             	r0 = r1 + r3			  ## ui_draw_arc.c:698:37
  104ac0:    31 1f             	r1 = r3 - r4			  ## ui_draw_arc.c:697:24
  104ac2:    a1 61             	[r2+4] = r1			  ## ui_draw_arc.c:697:16
  104ac4:    a0 63             	[r2+12] = r0			  ## ui_draw_arc.c:697:16
  104ac6:    57 04             	{pc, r7-r4} = [sp++]			  ## ui_draw_arc.c:700:1


draw_spec_arc:
  104ac8:    7e 04             	[--sp] = {rets, r14-r4}			  ## ui_draw_arc.c:705:0
  104aca:    a2 99             	sp += -284			  ## ui_draw_arc.c:705:0
  104acc:    25 16             	r5 = r2			  ## ui_draw_arc.c:705:0
  104ace:    1a d6             	r10 = r1  #			  ## ui_draw_arc.c:705:0
  104ad0:    5a 48             		 r2 = b[r5+8] (u)			  ## ui_draw_arc.c:706:11
  104ad2:    03 ff 03 20 40 02 	if (r2 < 3) goto 1152 <draw_spec_arc+0x490 : 104f58 >			  ## ui_draw_arc.c:706:11
  104ad8:    d0 ec 54 e0       	r14 = [r5+4]			  ## ui_draw_arc.c:709:11
  104adc:    00 ff 00 e0 3b 02 	if (r14 == 0) goto 1142 <draw_spec_arc+0x490 : 104f58 >
  104ae2:    00 ff 0e 01 38 02 	if (r0 == 270) goto 1136 <draw_spec_arc+0x490 : 104f58 >
  104ae8:    f8 e8 c4 10       	r1 = sp + 196
  104aec:    c1 24             	r1 += 4
  104aee:    43 20             	r3 = 0
  104af0:    00 84             	rep 2 5 {			  ## ui_draw_arc.c:217:25
  104af2:    93 05             		[r1++=4] = r3
                               	}			  ## ui_draw_arc.c:217:25
  104af4:    41 2f             	r1 = 15			  ## ui_draw_arc.c:219:19
  104af6:    41 f0 ff 7f       	r1 = 32767  # <STFT_Win_FixHalf_M128_D80+0x3FFB : 7fff >			  ## ui_draw_arc.c:723:17
  104afa:    a1 35             		 [sp+212] = r1			  ## ui_draw_arc.c:219:19
  104afc:    a1 31             	[sp+196] = r1			  ## ui_draw_arc.c:723:17
  104afe:    de e9 ca 30       	b[sp+202] = r3			  ## ui_draw_arc.c:724:17
  104b02:    de e9 d8 20       	b[sp+216] = r2			  ## ui_draw_arc.c:725:21
  104b06:    59 60             	r1 = h[r5+0] (u)			  ## ui_draw_arc.c:726:30
  104b08:    d8 e9 cd 10       	h[sp+204] = r1			  ## ui_draw_arc.c:726:30
  104b0c:    3e ed e3 00       	ifs (r14 >= 227) {			  ## ui_draw_arc.c:726:30
  104b10:    4e e0 e3 00       		r14 = 227
                               	} <UPDATE_SIZE+0x63 : e3 >			  ## ui_draw_arc.c:717:6
  104b14:    d4 e9 d1 e0       	[sp+208] = r14			  ## ui_draw_arc.c:727:23
  104b18:    c4 14             	r12 = 0			  ## ui_draw_arc.c:730:10
  104b1a:    c5 14             	r13 = 0			  ## ui_draw_arc.c:730:10
  104b1c:    d0 e9 b5 c0       	d[sp+180] = r13_r12			  ## ui_draw_arc.c:730:10
  104b20:    02 e1 c5 31       	r2 = r3 + 453			  ## ui_draw_arc.c:732:10
  104b24:    23 16             	r3 = r2			  ## ui_draw_arc.c:732:10
  104b26:    d0 e9 bd 20       	d[sp+188] = r3_r2			  ## ui_draw_arc.c:732:10
  104b2a:    01 ff 76 02 06 00 	if (r0 != 630) goto 12 <draw_spec_arc+0x74 : 104b3c >			  ## ui_draw_arc.c:735:37
  104b30:    f8 e8 b4 00       	r0 = sp + 180
  104b34:    f8 e8 c4 20       	r2 = sp + 196
  104b38:    a1 16             	r1 = r10			  ## ui_draw_arc.c:736:3
  104b3a:    05 8c             	goto 1048 <draw_spec_arc+0x48C : 104f54 >			  ## ui_draw_arc.c:736:3
  104b3c:    3b e1 98 0e       	r11 = r0 + -360			  ## ui_draw_arc.c:744:13
  104b40:    b0 ec 67 01       	if (r0 <= 359) {			  ## ui_draw_arc.c:744:13
  104b44:    0b 16             		r11 = r0
                               	}			  ## ui_draw_arc.c:743:6
  104b46:    b9 e1 40 b0       	r9 = uextra(r11, p:0, l:16)			  ## ui_draw_arc.c:743:6
  104b4a:    97 16             	r7 = r9			  ## ui_mask.c:26:13
  104b4c:    37 e9 67 01       	if (r7 >= 359) {			  ## ui_mask.c:26:13
  104b50:    47 e0 67 01       		r7 = 359
                               	} <UPDATE_SIZE+0xE7 : 167 >			  ## ui_mask.c:26:13
  104b54:    27 fe 03 1a       	ifs (r7 > 269) goto 6 <draw_spec_arc+0x96 : 104b5e >			  ## ui_mask.c:30:6
  104b58:    00 e1 5a 70       	r0 = r7 + 90			  ## ui_mask.c:31:40
  104b5c:    04 87             	goto 14 <draw_spec_arc+0xA4 : 104b6c >			  ## ui_mask.c:31:40
  104b5e:    a1 e0 87 7f       	r1 = 0x10E - r7			  ## ui_mask.c:33:22
  104b62:    30 e1 f2 7e       	r0 = r7 + -270			  ## ui_mask.c:33:22
  104b66:    b0 ee 00 00       	ifs (r0 <= 0) {			  ## ui_mask.c:33:22
  104b6a:    10 16             		r0 = r1
                               	}			  ## ui_mask.c:33:22
  104b6c:    d8 e9 b1 00       	h[sp+176] = r0
  104b70:    40 e0 0e 01       	r0 = 270 <UPDATE_SIZE+0x8E : 10e >			  ## ui_mask.c:36:25
  104b74:    80 2e             	[sp+56] = r0			  ## ui_mask.c:36:25
  104b76:    87 2f             	[sp+60] = r7			  ## ui_mask.c:37:23
  104b78:    78 23             	r0 = 227			  ## ui_mask.c:38:24
  104b7a:    80 2c             	[sp+48] = r0			  ## ui_mask.c:38:24
  104b7c:    80 2d             	[sp+52] = r0			  ## ui_mask.c:39:24
  104b7e:    c0 ff 82 58 10 00 	r0 = 1071234 <mask_angle : 105882 >			  ## ui_mask.c:40:16
  104b84:    80 2a             	[sp+40] = r0			  ## ui_mask.c:40:16
  104b86:    46 21             	r6 = 1			  ## ui_mask.c:40:16
  104b88:    de e9 2c 60       	b[sp+44] = r6			  ## ui_mask.c:41:18
  104b8c:    97 f9 05 68       	if (r7 < 180) goto 10 <draw_spec_arc+0xD2 : 104b9a >			  ## ui_mask.c:41:18
  104b90:    30 e1 4c 7f       	r0 = r7 + -180			  ## ui_mask.c:54:30
  104b94:    46 20             	r6 = 0			  ## ui_mask.c:54:30
  104b96:    10 f9 0e 68       	if (r0 >= 180) goto 28 <draw_spec_arc+0xEE : 104bb6 >			  ## ui_mask.c:54:30
  104b9a:    ac 88             	r4 = sp + 40
  104b9c:    48 98             	r0 = r4 + 24			  ## ui_mask.c:61:31
  104b9e:    41 e0 0e 01       	r1 = 270 <UPDATE_SIZE+0x8E : 10e >			  ## ui_mask.c:61:2
  104ba2:    42 21             	r2 = 1			  ## ui_mask.c:61:2
  104ba4:    bf ea cc fe       	call -616 <mask_line_angle_init : 104940 >			  ## ui_mask.c:61:2
  104ba8:    00 e1 50 40       	r0 = r4 + 80			  ## ui_mask.c:62:31
  104bac:    71 16             	r1 = r7			  ## ui_mask.c:62:2
  104bae:    62 16             	r2 = r6			  ## ui_mask.c:62:2
  104bb0:    bf ea c6 fe       	call -628 <mask_line_angle_init : 104940 >			  ## ui_mask.c:62:2
  104bb4:    04 87             	goto 14 <draw_spec_arc+0xFC : 104bc4 >			  ## ui_mask.c:62:2
  104bb6:    c0 ff 21 9a 10 00 	r0 = 1088033 <realloc+0x3FF : 109a21 >			  ## ui_mask.c:57:3
  104bbc:    71 16             	r1 = r7			  ## ui_mask.c:57:3
  104bbe:    80 ff 40 b2 f1 ff 	call -937408 <printf : 1fe04 >			  ## ui_mask.c:57:3
  104bc4:    40 e0 76 02       	r0 = 630 <_MASK_MEM_SIZE+0xD2 : 276 >			  ## ui_draw_arc.c:754:19
  104bc8:    b4 e0 02 69       	r6 = r0 - r9			  ## ui_draw_arc.c:754:19
  104bcc:    a0 e0 87 9f       	r0 = 0x10E - r9
  104bd0:    b9 ec 0e 01       	if (r9 <= 270) {
  104bd4:    06 16             		r6 = r0
                               	}			  ## ui_draw_arc.c:753:6
  104bd6:    a8 88             	r0 = sp + 40
  104bd8:    bf ea e8 fb       	call -2096 <mask_add : 1043ac >			  ## ui_draw_arc.c:750:22
  104bdc:    08 16             	r8 = r0			  ## ui_draw_arc.c:750:22
  104bde:    86 fd 5a 7a       	ifs (r6 < 61) goto 180 <draw_spec_arc+0x1CE : 104c96 >			  ## ui_draw_arc.c:758:40
  104be2:    b6 e1 40 b0       	r6 = uextra(r11, p:0, l:16)			  ## ui_draw_arc.c:766:34
  104be6:    50 3a             	r0 = 90			  ## ui_draw_arc.c:766:34
  104be8:    f4 e1 60 00       	r0 = r6 / r0 (u)			  ## ui_draw_arc.c:766:34
  104bec:    67 e1 03 00       	r7 = r0 & 0x3			  ## ui_draw_arc.c:766:40
  104bf0:    60 ff 03 00 a3 00 	if ((r0 & 0x3) == 0) goto 326 <draw_spec_arc+0x274 : 104d3c >			  ## ui_draw_arc.c:766:40
  104bf6:    44 21             	r4 = 1
  104bf8:    4b e0 01 00       	r11 = 1 <moveable_slot_size+0x1 : 1 >			  ## ui_draw_arc.c:466:31
  104bfc:    b7 e8 03 00       	if (r7 != 3) {			  ## ui_draw_arc.c:466:31
  104c00:    c3 14             		r11 = 0
                               	}			  ## ui_draw_arc.c:466:31
  104c02:    36 e9 0e 01       	if (r6 >= 270) {			  ## ui_draw_arc.c:466:31
  104c06:    44 20             		r4 = 0
                               	}			  ## ui_draw_arc.c:466:90
  104c08:    b4 fb 05 00       	if ((r4 & r11) != 0) goto 10 <draw_spec_arc+0x14E : 104c16 >			  ## ui_draw_arc.c:466:90
  104c0c:    30 e1 ff 7f       	r0 = r7 + -1			  ## ui_draw_arc.c:468:60
  104c10:    80 17             	r0 = r0.l (u)			  ## ui_draw_arc.c:468:60
  104c12:    00 fc 46 02       	if (r0 > 1) goto 140 <draw_spec_arc+0x1DA : 104ca2 >			  ## ui_draw_arc.c:468:60
  104c16:    78 23             	r0 = 227			  ## ui_draw_arc.c:470:19
  104c18:    79 23             	r1 = 227			  ## ui_draw_arc.c:470:19
  104c1a:    d0 e9 dd 00       	d[sp+220] = r1_r0			  ## ui_draw_arc.c:470:19
  104c1e:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:472:19
  104c22:    01 16             	r1 = r0			  ## ui_draw_arc.c:472:19
  104c24:    d0 e9 e5 00       	d[sp+228] = r1_r0			  ## ui_draw_arc.c:472:19
  104c28:    f8 e8 dc 00       	r0 = sp + 220			  ## ui_draw_arc.c:472:19
  104c2c:    01 16             	r1 = r0			  ## ui_draw_arc.c:475:13
  104c2e:    a2 16             	r2 = r10			  ## ui_draw_arc.c:475:13
  104c30:    bf ea 55 fb       	call -2390 <_area_intersect : 1042de >			  ## ui_draw_arc.c:475:13
  104c34:    00 48             	if (r0 == 0) goto 16 <draw_spec_arc+0x17E : 104c46 >
  104c36:    f8 e8 b4 00       	r0 = sp + 180
  104c3a:    f8 e8 dc 10       	r1 = sp + 220
  104c3e:    f8 e8 c4 20       	r2 = sp + 196
  104c42:    bf ea 9f fc       	call -1730 <draw_rectangle : 104584 >			  ## ui_draw_arc.c:477:4
  104c46:    87 f8 2c 02       	if (r7 != 1) goto 88 <draw_spec_arc+0x1DA : 104ca2 >
  104c4a:    78 22             	r0 = 226			  ## ui_draw_arc.c:511:20
  104c4c:    01 e1 e4 00       	r1 = r0 + 228			  ## ui_draw_arc.c:511:20
  104c50:    d0 e9 f5 00       	d[sp+244] = r1_r0			  ## ui_draw_arc.c:511:20
  104c54:    a2 e0 e3 e0       	r2 = 0xE3 - r14			  ## ui_draw_arc.c:514:76
  104c58:    90 16             	r0 = r9			  ## ui_draw_arc.c:514:38
  104c5a:    bf ea 4e fe       	call -868 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:514:38
  104c5e:    20 1b             	r0 *= r2			  ## ui_draw_arc.c:514:63
  104c60:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:514:89
  104c62:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:514:34
  104c66:    00 f1 5a 90       	r0 = r9 + 90  #			  ## ui_draw_arc.c:515:62
  104c6a:    a0 3c             		 [sp+240] = r0			  ## ui_draw_arc.c:514:20
  104c6c:    bf ea 45 fe       	call -886 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:515:38
  104c70:    e0 e1 e3 00       	r0 = r0 * 0xE3			  ## ui_draw_arc.c:515:68
  104c74:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:515:83
  104c76:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:515:34
  104c7a:    a2 d6             	r2 = r10  #			  ## ui_draw_arc.c:517:14
  104c7c:    a0 3b             		 [sp+236] = r0			  ## ui_draw_arc.c:515:20
  104c7e:    f8 e8 ec 00       	r0 = sp + 236			  ## ui_draw_arc.c:515:20
  104c82:    01 16             	r1 = r0			  ## ui_draw_arc.c:517:14
  104c84:    bf ea 2b fb       	call -2474 <_area_intersect : 1042de >			  ## ui_draw_arc.c:517:14
  104c88:    00 f8 ce 00       	if (r0 == 0) goto 412 <draw_spec_arc+0x360 : 104e28 >
  104c8c:    f8 e8 b4 00       	r0 = sp + 180
  104c90:    f8 e8 ec 10       	r1 = sp + 236
  104c94:    24 8e             	goto 156 <draw_spec_arc+0x26A : 104d32 >
  104c96:    f8 e8 b4 00       	r0 = sp + 180
  104c9a:    f8 e8 c4 20       	r2 = sp + 196
  104c9e:    a1 16             	r1 = r10			  ## ui_draw_arc.c:777:3
  104ca0:    84 94             	goto 552 <draw_spec_arc+0x402 : 104eca >			  ## ui_draw_arc.c:777:3
  104ca2:    90 e1 42 0b       	r0 = r4 & r11			  ## ui_draw_arc.c:466:49
  104ca6:    41 21             	r1 = 1			  ## ui_draw_arc.c:466:49
  104ca8:    b7 e8 02 00       	if (r7 != 2) {			  ## ui_draw_arc.c:466:49
  104cac:    41 20             		r1 = 0
                               	}			  ## ui_draw_arc.c:466:49
  104cae:    10 19             	r0 |= r1			  ## ui_draw_arc.c:522:49
  104cb0:    30 4d             	if (r0 == 0) goto 218 <draw_spec_arc+0x2C4 : 104d8c >			  ## ui_draw_arc.c:522:49
  104cb2:    40 20             	r0 = 0			  ## ui_draw_arc.c:526:19
  104cb4:    79 23             	r1 = 227			  ## ui_draw_arc.c:526:19
  104cb6:    d0 e9 ed 00       	d[sp+236] = r1_r0			  ## ui_draw_arc.c:526:19
  104cba:    78 22             	r0 = 226			  ## ui_draw_arc.c:528:19
  104cbc:    01 e1 e4 00       	r1 = r0 + 228			  ## ui_draw_arc.c:528:19
  104cc0:    d0 e9 f5 00       	d[sp+244] = r1_r0			  ## ui_draw_arc.c:528:19
  104cc4:    f8 e8 ec 00       	r0 = sp + 236			  ## ui_draw_arc.c:528:19
  104cc8:    01 16             	r1 = r0			  ## ui_draw_arc.c:531:13
  104cca:    a2 16             	r2 = r10			  ## ui_draw_arc.c:531:13
  104ccc:    bf ea 07 fb       	call -2546 <_area_intersect : 1042de >			  ## ui_draw_arc.c:531:13
  104cd0:    00 48             	if (r0 == 0) goto 16 <draw_spec_arc+0x21A : 104ce2 >
  104cd2:    f8 e8 b4 00       	r0 = sp + 180
  104cd6:    f8 e8 ec 10       	r1 = sp + 236
  104cda:    f8 e8 c4 20       	r2 = sp + 196
  104cde:    bf ea 51 fc       	call -1886 <draw_rectangle : 104584 >			  ## ui_draw_arc.c:533:4
  104ce2:    87 f8 53 04       	if (r7 != 2) goto 166 <draw_spec_arc+0x2C4 : 104d8c >
  104ce6:    40 20             	r0 = 0
  104ce8:    a0 3f             	[sp+252] = r0			  ## ui_draw_arc.c:567:20
  104cea:    78 22             	r0 = 226			  ## ui_draw_arc.c:568:20
  104cec:    d4 e9 09 01       	[sp+264] = r0			  ## ui_draw_arc.c:568:20
  104cf0:    00 e1 5a 90       	r0 = r9 + 90			  ## ui_draw_arc.c:570:62
  104cf4:    bf ea 01 fe       	call -1022 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:570:38
  104cf8:    a1 e0 e3 e0       	r1 = 0xE3 - r14			  ## ui_draw_arc.c:570:81
  104cfc:    10 1b             	r0 *= r1			  ## ui_draw_arc.c:570:68
  104cfe:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:570:94
  104d00:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:570:34
  104d04:    d4 e9 05 01       	[sp+260] = r0			  ## ui_draw_arc.c:570:20
  104d08:    90 16             	r0 = r9			  ## ui_draw_arc.c:571:38
  104d0a:    bf ea f6 fd       	call -1044 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:571:38
  104d0e:    e0 e1 e3 00       	r0 = r0 * 0xE3			  ## ui_draw_arc.c:571:63
  104d12:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:571:78
  104d14:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:571:34
  104d18:    d4 e9 01 01       	[sp+256] = r0			  ## ui_draw_arc.c:571:20
  104d1c:    f8 e8 fc 00       	r0 = sp + 252			  ## ui_draw_arc.c:571:20
  104d20:    01 16             	r1 = r0			  ## ui_draw_arc.c:573:14
  104d22:    a2 16             	r2 = r10			  ## ui_draw_arc.c:573:14
  104d24:    bf ea db fa       	call -2634 <_area_intersect : 1042de >			  ## ui_draw_arc.c:573:14
  104d28:    30 5f             	if (r0 == 0) goto 254 <draw_spec_arc+0x360 : 104e28 >
  104d2a:    f8 e8 b4 00       	r0 = sp + 180
  104d2e:    f8 e8 fc 10       	r1 = sp + 252
  104d32:    f8 e8 c4 20       	r2 = sp + 196
  104d36:    bf ea 25 fc       	call -1974 <draw_rectangle : 104584 >
  104d3a:    34 96             	goto 236 <draw_spec_arc+0x360 : 104e28 >
  104d3c:    78 23             	r0 = 227			  ## ui_draw_arc.c:456:20
  104d3e:    01 e1 e3 00       	r1 = r0 + 227			  ## ui_draw_arc.c:456:20
  104d42:    d0 e9 e1 00       	d[sp+224] = r1_r0			  ## ui_draw_arc.c:456:20
  104d46:    90 16             	r0 = r9			  ## ui_draw_arc.c:458:38
  104d48:    bf ea d7 fd       	call -1106 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:458:38
  104d4c:    e0 e1 e3 00       	r0 = r0 * 0xE3			  ## ui_draw_arc.c:458:63
  104d50:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:458:76
  104d52:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:458:34
  104d56:    00 f1 5a 90       	r0 = r9 + 90  #			  ## ui_draw_arc.c:459:62
  104d5a:    a0 3a             		 [sp+232] = r0			  ## ui_draw_arc.c:458:20
  104d5c:    a2 e0 e3 e0       	r2 = 0xE3 - r14			  ## ui_draw_arc.c:459:81
  104d60:    bf ea cb fd       	call -1130 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:459:38
  104d64:    20 1b             	r0 *= r2			  ## ui_draw_arc.c:459:68
  104d66:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:459:94
  104d68:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:459:34
  104d6c:    a2 d6             	r2 = r10  #			  ## ui_draw_arc.c:461:14
  104d6e:    a0 37             		 [sp+220] = r0			  ## ui_draw_arc.c:459:20
  104d70:    f8 e8 dc 00       	r0 = sp + 220			  ## ui_draw_arc.c:459:20
  104d74:    01 16             	r1 = r0			  ## ui_draw_arc.c:461:14
  104d76:    bf ea b2 fa       	call -2716 <_area_intersect : 1042de >			  ## ui_draw_arc.c:461:14
  104d7a:    00 48             	if (r0 == 0) goto 16 <draw_spec_arc+0x2C4 : 104d8c >
  104d7c:    f8 e8 b4 00       	r0 = sp + 180
  104d80:    f8 e8 dc 10       	r1 = sp + 220
  104d84:    f8 e8 c4 20       	r2 = sp + 196
  104d88:    bf ea fc fb       	call -2056 <draw_rectangle : 104584 >			  ## ui_draw_arc.c:463:5
  104d8c:    4b e0 01 00       	r11 = 1 <moveable_slot_size+0x1 : 1 >			  ## ui_draw_arc.c:578:31
  104d90:    b7 e8 03 00       	if (r7 != 3) {			  ## ui_draw_arc.c:578:31
  104d94:    c3 14             		r11 = 0
                               	}			  ## ui_draw_arc.c:578:31
  104d96:    26 fc 17 1a       	if (r6 > 269) goto 46 <draw_spec_arc+0x300 : 104dc8 >			  ## ui_draw_arc.c:578:31
  104d9a:    87 f8 15 06       	if (r7 != 3) goto 42 <draw_spec_arc+0x300 : 104dc8 >
  104d9e:    d0 e9 fd c0       	d[sp+252] = r13_r12			  ## ui_draw_arc.c:582:19
  104da2:    78 22             	r0 = 226			  ## ui_draw_arc.c:584:19
  104da4:    79 22             	r1 = 226			  ## ui_draw_arc.c:584:19
  104da6:    d0 e9 05 01       	d[sp+260] = r1_r0			  ## ui_draw_arc.c:584:19
  104daa:    f8 e8 fc 00       	r0 = sp + 252			  ## ui_draw_arc.c:584:19
  104dae:    01 16             	r1 = r0			  ## ui_draw_arc.c:587:13
  104db0:    a2 16             	r2 = r10			  ## ui_draw_arc.c:587:13
  104db2:    bf ea 94 fa       	call -2776 <_area_intersect : 1042de >			  ## ui_draw_arc.c:587:13
  104db6:    00 48             	if (r0 == 0) goto 16 <draw_spec_arc+0x300 : 104dc8 >
  104db8:    f8 e8 b4 00       	r0 = sp + 180
  104dbc:    f8 e8 fc 10       	r1 = sp + 252
  104dc0:    f8 e8 c4 20       	r2 = sp + 196
  104dc4:    bf ea de fb       	call -2116 <draw_rectangle : 104584 >			  ## ui_draw_arc.c:589:4
  104dc8:    a6 f9 2e 1e       	if (r6 < 271) goto 92 <draw_spec_arc+0x360 : 104e28 >
  104dcc:    87 f8 2c 06       	if (r7 != 3) goto 88 <draw_spec_arc+0x360 : 104e28 >
  104dd0:    40 e0 68 01       	r0 = 360 <UPDATE_SIZE+0xE8 : 168 >			  ## ui_draw_arc.c:600:37
  104dd4:    bf ea 91 fd       	call -1246 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:600:37
  104dd8:    a2 e0 e3 e0       	r2 = 0xE3 - r14			  ## ui_draw_arc.c:600:82
  104ddc:    20 1b             	r0 *= r2			  ## ui_draw_arc.c:600:69
  104dde:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:600:95
  104de0:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:600:33
  104de4:    d4 e9 0d 01       	[sp+268] = r0			  ## ui_draw_arc.c:600:19
  104de8:    40 e0 0e 01       	r0 = 270 <UPDATE_SIZE+0x8E : 10e >			  ## ui_draw_arc.c:601:37
  104dec:    bf ea 85 fd       	call -1270 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:601:37
  104df0:    e0 e1 e3 00       	r0 = r0 * 0xE3			  ## ui_draw_arc.c:601:64
  104df4:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:601:79
  104df6:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:601:33
  104dfa:    d4 e9 11 01       	[sp+272] = r0			  ## ui_draw_arc.c:601:19
  104dfe:    00 e1 5a 90       	r0 = r9 + 90			  ## ui_draw_arc.c:603:61
  104e02:    bf ea 7a fd       	call -1292 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:603:37
  104e06:    e0 e1 e3 00       	r0 = r0 * 0xE3			  ## ui_draw_arc.c:603:67
  104e0a:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:603:82
  104e0c:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:603:33
  104e10:    d4 e9 15 01       	[sp+276] = r0			  ## ui_draw_arc.c:603:19
  104e14:    90 16             	r0 = r9			  ## ui_draw_arc.c:604:37
  104e16:    bf ea 70 fd       	call -1312 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:604:37
  104e1a:    20 1b             	r0 *= r2			  ## ui_draw_arc.c:604:62
  104e1c:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:604:88
  104e1e:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:604:33
  104e22:    d4 e9 19 01       	[sp+280] = r0			  ## ui_draw_arc.c:604:19
  104e26:    24 84             	goto 136 <draw_spec_arc+0x3E8 : 104eb0 >			  ## ui_draw_arc.c:604:19
  104e28:    00 e1 c6 d1       	r0 = r13 + 454			  ## ui_draw_arc.c:612:20
  104e2c:    79 22             	r1 = 226			  ## ui_draw_arc.c:612:20
  104e2e:    d0 e9 15 01       	d[sp+276] = r1_r0			  ## ui_draw_arc.c:612:20
  104e32:    e8 22             	r0 += -94			  ## ui_draw_arc.c:615:38
  104e34:    bf ea 61 fd       	call -1342 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:615:38
  104e38:    a4 e0 e3 e0       	r4 = 0xE3 - r14			  ## ui_draw_arc.c:615:83
  104e3c:    40 1b             	r0 *= r4			  ## ui_draw_arc.c:615:70
  104e3e:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:615:96
  104e40:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:615:34
  104e44:    d4 e9 0d 01       	[sp+268] = r0			  ## ui_draw_arc.c:615:20
  104e48:    40 e0 0e 01       	r0 = 270 <UPDATE_SIZE+0x8E : 10e >			  ## ui_draw_arc.c:616:38
  104e4c:    bf ea 55 fd       	call -1366 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:616:38
  104e50:    e0 e1 e3 00       	r0 = r0 * 0xE3			  ## ui_draw_arc.c:616:65
  104e54:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:616:80
  104e56:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:616:34
  104e5a:    d4 e9 11 01       	[sp+272] = r0			  ## ui_draw_arc.c:616:20
  104e5e:    f8 e8 0c 71       	r7 = sp + 268			  ## ui_draw_arc.c:616:20
  104e62:    70 16             	r0 = r7			  ## ui_draw_arc.c:618:14
  104e64:    71 16             	r1 = r7			  ## ui_draw_arc.c:618:14
  104e66:    a2 16             	r2 = r10			  ## ui_draw_arc.c:618:14
  104e68:    bf ea 39 fa       	call -2958 <_area_intersect : 1042de >			  ## ui_draw_arc.c:618:14
  104e6c:    00 48             	if (r0 == 0) goto 16 <draw_spec_arc+0x3B6 : 104e7e >
  104e6e:    f8 e8 b4 00       	r0 = sp + 180
  104e72:    f8 e8 0c 11       	r1 = sp + 268
  104e76:    f8 e8 c4 20       	r2 = sp + 196
  104e7a:    bf ea 83 fb       	call -2298 <draw_rectangle : 104584 >			  ## ui_draw_arc.c:620:5
  104e7e:    0b f8 26 00       	if (r11 == 0) goto 76 <draw_spec_arc+0x406 : 104ece >
  104e82:    78 23             	r0 = 227			  ## ui_draw_arc.c:624:20
  104e84:    d4 e9 0d 01       	[sp+268] = r0			  ## ui_draw_arc.c:624:20
  104e88:    41 ea 00 70       	[r7+4] = 0x0			  ## ui_draw_arc.c:625:20
  104e8c:    00 e1 5a 90       	r0 = r9 + 90			  ## ui_draw_arc.c:627:62
  104e90:    bf ea 33 fd       	call -1434 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:627:38
  104e94:    e0 e1 e3 00       	r0 = r0 * 0xE3			  ## ui_draw_arc.c:627:68
  104e98:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:627:83
  104e9a:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:627:34
  104e9e:    90 d6             	r0 = r9  #			  ## ui_draw_arc.c:628:38
  104ea0:    f0 62             		 [r7+8] = r0			  ## ui_draw_arc.c:627:20
  104ea2:    bf ea 2a fd       	call -1452 <_trigo_sin : 1048fa >			  ## ui_draw_arc.c:628:38
  104ea6:    40 1b             	r0 *= r4			  ## ui_draw_arc.c:628:63
  104ea8:    88 af             	r0 = r0 >>> 15			  ## ui_draw_arc.c:628:89
  104eaa:    00 e1 e3 00       	r0 = r0 + 227			  ## ui_draw_arc.c:628:34
  104eae:    f0 63             	[r7+12] = r0			  ## ui_draw_arc.c:628:20
  104eb0:    f8 e8 0c 01       	r0 = sp + 268
  104eb4:    01 16             	r1 = r0
  104eb6:    a2 16             	r2 = r10
  104eb8:    bf ea 11 fa       	call -3038 <_area_intersect : 1042de >
  104ebc:    00 48             	if (r0 == 0) goto 16 <draw_spec_arc+0x406 : 104ece >
  104ebe:    f8 e8 b4 00       	r0 = sp + 180
  104ec2:    f8 e8 0c 11       	r1 = sp + 268
  104ec6:    f8 e8 c4 20       	r2 = sp + 196
  104eca:    bf ea 5b fb       	call -2378 <draw_rectangle : 104584 >
  104ece:    80 16             	r0 = r8			  ## ui_draw_arc.c:779:2
  104ed0:    bf ea 4c fb       	call -2408 <mask_remove_id : 10456c >			  ## ui_draw_arc.c:779:2
  104ed4:    58 49             	r0 = b[r5+9] (u)			  ## ui_draw_arc.c:781:11
  104ed6:    60 ff 03 00 3e 00 	if ((r0 & 0x3) == 0) goto 124 <draw_spec_arc+0x490 : 104f58 >			  ## ui_draw_arc.c:781:11
  104edc:    88 90             	r0 = sp + 16
  104ede:    f8 e8 c4 10       	r1 = sp + 196
  104ee2:    42 38             	r2 = 24			  ## ui_draw_arc.c:783:3
  104ee4:    80 ff be 2a 00 00 	call 10942 <_memcpy_small : 1079a8 >			  ## ui_draw_arc.c:783:3
  104eea:    58 60             	r0 = h[r5+0] (u)			  ## ui_draw_arc.c:785:39
  104eec:    d8 e9 15 00       	h[sp+20] = r0			  ## ui_draw_arc.c:785:39
  104ef0:    58 48             	r0 = b[r5+8] (u)			  ## ui_draw_arc.c:786:39
  104ef2:    de e9 16 00       	b[sp+22] = r0			  ## ui_draw_arc.c:786:32
  104ef6:    40 20             	r0 = 0			  ## ui_draw_arc.c:786:32
  104ef8:    80 27             	[sp+28] = r0			  ## ui_draw_arc.c:787:32
  104efa:    58 49             	r0 = b[r5+9] (u)			  ## ui_draw_arc.c:790:12
  104efc:    50 e8 16 00       	if ((r0 & 1) == 0) goto 44 <draw_spec_arc+0x464 : 104f2c >			  ## ui_draw_arc.c:790:12
  104f00:    b1 e1 20 e0       	r1 = uextra(r14, p:0, l:8)			  ## ui_draw_arc.c:791:4
  104f04:    8a 80             	r2 = sp + 0			  ## ui_draw_arc.c:791:4
  104f06:    40 e0 0e 01       	r0 = 270 <UPDATE_SIZE+0x8E : 10e >			  ## ui_draw_arc.c:791:4
  104f0a:    bf ea a9 fd       	call -1198 <get_rounded_area : 104a60 >			  ## ui_draw_arc.c:791:4
  104f0e:    c0 eb e3 20       	[r2+0] += 227			  ## ui_draw_arc.c:792:18
  104f12:    c2 eb e3 20       	[r2+8] += 227			  ## ui_draw_arc.c:793:18
  104f16:    c1 eb e3 20       	[r2+4] += 227			  ## ui_draw_arc.c:794:18
  104f1a:    c3 eb e3 20       	[r2+12] += 227			  ## ui_draw_arc.c:795:18
  104f1e:    8b 90             	r3 = sp + 16			  ## ui_draw_arc.c:795:18
  104f20:    20 16             	r0 = r2			  ## ui_draw_arc.c:797:4
  104f22:    a1 16             	r1 = r10			  ## ui_draw_arc.c:797:4
  104f24:    32 16             	r2 = r3			  ## ui_draw_arc.c:797:4
  104f26:    bf ea 2d fb       	call -2470 <draw_rectangle : 104584 >			  ## ui_draw_arc.c:797:4
  104f2a:    58 49             	r0 = b[r5+9] (u)
  104f2c:    50 e8 14 08       	if ((r0 & 2) == 0) goto 40 <draw_spec_arc+0x490 : 104f58 >
  104f30:    b1 e1 20 e0       	r1 = uextra(r14, p:0, l:8)			  ## ui_draw_arc.c:801:4
  104f34:    8a 80             	r2 = sp + 0			  ## ui_draw_arc.c:801:4
  104f36:    90 16             	r0 = r9			  ## ui_draw_arc.c:801:4
  104f38:    bf ea 92 fd       	call -1244 <get_rounded_area : 104a60 >			  ## ui_draw_arc.c:801:4
  104f3c:    c0 eb e3 20       	[r2+0] += 227			  ## ui_draw_arc.c:802:18
  104f40:    c2 eb e3 20       	[r2+8] += 227			  ## ui_draw_arc.c:803:18
  104f44:    c1 eb e3 20       	[r2+4] += 227			  ## ui_draw_arc.c:804:18
  104f48:    c3 eb e3 20       	[r2+12] += 227			  ## ui_draw_arc.c:805:18
  104f4c:    8b 90             	r3 = sp + 16			  ## ui_draw_arc.c:805:18
  104f4e:    20 16             	r0 = r2			  ## ui_draw_arc.c:807:4
  104f50:    a1 16             	r1 = r10			  ## ui_draw_arc.c:807:4
  104f52:    32 16             	r2 = r3			  ## ui_draw_arc.c:807:4
  104f54:    bf ea 16 fb       	call -2516 <draw_rectangle : 104584 >
  104f58:    42 87             	sp += 284
  104f5a:    5e 04             	{pc, r14-r4} = [sp++]			  ## ui_draw_arc.c:810:1


get_text_matrix_width:
  104f5c:    42 20             	r2 = 0			  ## ui_draw_arc.c:1048:0
  104f5e:    c1 ff f4 9d 10 00 	r1 = 1089012 <text_matrix : 109df4 >			  ## ui_draw_arc.c:1048:0
  104f64:    04 85             	goto 10 <get_text_matrix_width+0x14 : 104f70 >			  ## ui_draw_arc.c:1048:0
  104f66:    1b 60             	r3 = h[r1+0] (u)			  ## ui_draw_arc.c:1052:30
  104f68:    00 e8 06 30       	if (r3 == r0) goto 12 <get_text_matrix_width+0x1C : 104f78 >			  ## ui_draw_arc.c:1052:7
  104f6c:    c1 26             	r1 += 6			  ## ui_draw_arc.c:1051:2
  104f6e:    c2 21             	r2 += 1			  ## ui_draw_arc.c:1051:65
  104f70:    82 fc f9 77       	if (r2 <= 59) goto -14 <get_text_matrix_width+0xA : 104f66 >
  104f74:    10 3f             	r0 = -1
  104f76:    80 00             	rts			  ## ui_draw_arc.c:1058:1
  104f78:    18 42             	r0 = b[r1+2] (u)			  ## ui_draw_arc.c:1053:11
  104f7a:    80 00             	rts			  ## ui_draw_arc.c:1058:1


get_text_matrix_height:
  104f7c:    42 20             	r2 = 0			  ## ui_draw_arc.c:1063:0
  104f7e:    c1 ff f4 9d 10 00 	r1 = 1089012 <text_matrix : 109df4 >			  ## ui_draw_arc.c:1063:0
  104f84:    04 85             	goto 10 <get_text_matrix_height+0x14 : 104f90 >			  ## ui_draw_arc.c:1063:0
  104f86:    1b 60             	r3 = h[r1+0] (u)			  ## ui_draw_arc.c:1067:30
  104f88:    00 e8 06 30       	if (r3 == r0) goto 12 <get_text_matrix_height+0x1C : 104f98 >			  ## ui_draw_arc.c:1067:7
  104f8c:    c1 26             	r1 += 6			  ## ui_draw_arc.c:1066:2
  104f8e:    c2 21             	r2 += 1			  ## ui_draw_arc.c:1066:65
  104f90:    82 fc f9 77       	if (r2 <= 59) goto -14 <get_text_matrix_height+0xA : 104f86 >
  104f94:    10 3f             	r0 = -1
  104f96:    80 00             	rts			  ## ui_draw_arc.c:1073:1
  104f98:    18 43             	r0 = b[r1+3] (u)			  ## ui_draw_arc.c:1068:11
  104f9a:    80 00             	rts			  ## ui_draw_arc.c:1073:1


draw_text:
  104f9c:    7f 04             	[--sp] = {rets, r15-r4}			  ## ui_draw_arc.c:1078:0
  104f9e:    e2 88             	sp += -96			  ## ui_draw_arc.c:1078:0
  104fa0:    80 23             	[sp+12] = r0			  ## ui_draw_arc.c:1078:0
  104fa2:    81 27             	[sp+28] = r1			  ## ui_draw_arc.c:1078:0
  104fa4:    81 30             	[sp+64] = r1			  ## ui_draw_arc.c:1088:17
  104fa6:    20 26             	r0 = [sp+152]			  ## ui_draw_arc.c:1088:17
  104fa8:    70 f0 00 00       	r0 = rev8(r0)  #			  ## ui_draw_arc.c:1088:17
  104fac:    82 28             		 [sp+32] = r2			  ## ui_draw_arc.c:1088:17
  104fae:    82 31             	[sp+68] = r2			  ## ui_draw_arc.c:1089:16
  104fb0:    c9 90             	r1 = sp + 80			  ## ui_draw_arc.c:1089:16
  104fb2:    81 20             	[sp] = r1			  ## ui_draw_arc.c:1089:16
  104fb4:    c9 80             	r1 = sp + 64			  ## ui_draw_arc.c:1089:16
  104fb6:    81 22             	[sp+8] = r1
  104fb8:    80 b0             	r0 = r0 >> 16
  104fba:    80 2f             	[sp+60] = r0
  104fbc:    45 20             	r5 = 0
  104fbe:    26 25             	r6 = [sp+148]
  104fc0:    c7 ff f4 9d 10 00 	r7 = 1089012 <text_matrix : 109df4 >
  104fc6:    83 24             	[sp+16] = r3
  104fc8:    86 21             	[sp+4] = r6
  104fca:    54 82             	goto 324 <draw_text+0x174 : 105110 >
  104fcc:    d8 ee 32 25       	r2 = b[r3+r5] (s)			  ## ui_draw_arc.c:1092:7
  104fd0:    20 17             	r0 = r2.b0 (u)			  ## ui_draw_arc.c:1092:7
  104fd2:    41 21             	r1 = 1			  ## ui_draw_arc.c:1092:7
  104fd4:    72 fe 06 fe       	ifs (r2 > -1) goto 12 <draw_text+0x48 : 104fe4 >			  ## ui_draw_arc.c:1092:7
  104fd8:    39 1d             	r1 = r3 + r5			  ## ui_draw_arc.c:1093:32
  104fda:    1a 41             	r2 = b[r1+1] (u)			  ## ui_draw_arc.c:1093:32
  104fdc:    a2 e1 20 04       	r2 <= insert(r0, p:8, l:8)			  ## ui_draw_arc.c:1093:30
  104fe0:    41 22             	r1 = 2			  ## ui_draw_arc.c:1093:30
  104fe2:    20 16             	r0 = r2			  ## ui_draw_arc.c:1093:30
  104fe4:    15 18             	r5 += r1
  104fe6:    42 20             	r2 = 0
  104fe8:    71 16             	r1 = r7
  104fea:    04 82             	goto 4 <draw_text+0x54 : 104ff0 >
  104fec:    c1 26             	r1 += 6			  ## ui_draw_arc.c:1033:2
  104fee:    c2 21             	r2 += 1			  ## ui_draw_arc.c:1033:65
  104ff0:    02 fc 8e 76       	if (r2 > 59) goto 284 <draw_text+0x174 : 105110 >
  104ff4:    1c 60             	r4 = h[r1+0] (u)			  ## ui_draw_arc.c:1034:30
  104ff6:    80 e8 f9 41       	if (r4 != r0) goto -14 <draw_text+0x50 : 104fec >			  ## ui_draw_arc.c:1034:30
  104ffa:    85 25             	[sp+20] = r5
  104ffc:    1a 42             	r2 = b[r1+2] (u)			  ## ui_draw_arc.c:1035:19
  104ffe:    18 43             	r0 = b[r1+3] (u)			  ## ui_draw_arc.c:1036:19
  105000:    1c 62             	r4 = h[r1+4] (u)			  ## ui_draw_arc.c:1037:19
  105002:    01 22             	r1 = [sp+8]			  ## ui_draw_arc.c:1037:19
  105004:    82 26             	[sp+24] = r2			  ## ui_draw_arc.c:1037:19
  105006:    92 62             	[r1+8] = r2			  ## ui_draw_arc.c:1105:19
  105008:    90 63             	[r1+12] = r0			  ## ui_draw_arc.c:1106:20
  10500a:    c9 80             	r1 = sp + 64			  ## ui_draw_arc.c:1106:20
  10500c:    ca 90             	r2 = sp + 80
  10500e:    00 23             	r0 = [sp+12]			  ## ui_draw_arc.c:1109:7
  105010:    bf ea f3 f9       	call -3098 <get_rect_cover : 1043fa >			  ## ui_draw_arc.c:1109:7
  105014:    30 52             	if (r0 == 0) goto 228 <draw_text+0x15E : 1050fa >
  105016:    c0 ff 80 9f 10 00 	r0 = 1089408 <osd_str_matrix : 109f80 >			  ## ui_draw_arc.c:1037:19
  10501c:    40 d8             	r0 += r4  #			  ## ui_draw_arc.c:1037:19
  10501e:    01 34             		 r1 = [sp+80]			  ## ui_draw_arc.c:1037:19
  105020:    c8 ff b4 c8 10 00 	r8 = 1099956 <param_t+0x4 : 10c8b4 >
  105026:    d0 ec 8c 21       	r2 = [r8+28]
  10502a:    d0 ec 84 92       	r9 = [r8+36]
  10502e:    d0 ec 88 31       	r3 = [r8+24]
  105032:    d0 ec 80 62       	r6 = [r8+32]
  105036:    04 20             	r4 = [sp]
  105038:    07 27             	r7 = [sp+28]			  ## ui_draw_arc.c:1115:48
  10503a:    b4 f0 12 d7       	r13 = r1 - r7  #			  ## ui_draw_arc.c:1115:48
  10503e:    45 61             		 r5 = [r4+4] 			  ## ui_draw_arc.c:1115:48
  105040:    29 d8             	r9 += r2  #
  105042:    85 2b             		 [sp+44] = r5
  105044:    b4 e0 60 a3       	r10 = r6 + r3
  105048:    d5 1e             	r5 = r5 - r2			  ## ui_draw_arc.c:1084:6
  10504a:    65 1b             	r5 *= r6			  ## ui_draw_arc.c:1084:6
  10504c:    d0 ec 80 70       	r7 = [r8+0]			  ## ui_draw_arc.c:1084:6
  105050:    15 18             	r5 += r1			  ## ui_draw_arc.c:1084:6
  105052:    dd 1e             	r5 = r5 - r3			  ## ui_draw_arc.c:1084:6
  105054:    55 a1             	r5 = r5 << 1			  ## ui_draw_arc.c:1084:6
  105056:    d0 ec 48 b0       	r11 = [r4+8]			  ## ui_draw_arc.c:1084:6
  10505a:    b4 f0 70 c5       	r12 = r7 + r5  #			  ## ui_draw_arc.c:1084:6
  10505e:    44 63             		 r4 = [r4+12] 			  ## ui_draw_arc.c:1084:6
  105060:    84 2c             	[sp+48] = r4			  ## ui_draw_arc.c:1084:6
  105062:    64 a1             	r4 = r6 << 1			  ## ui_draw_arc.c:1084:6
  105064:    84 2a             	[sp+40] = r4			  ## ui_draw_arc.c:1084:6
  105066:    04 26             	r4 = [sp+24]			  ## ui_draw_arc.c:1084:6
  105068:    c4 27             	r4 += 7			  ## ui_draw_arc.c:1084:6
  10506a:    c4 a3             	r4 = r4 >> 3			  ## ui_draw_arc.c:1084:6
  10506c:    84 29             	[sp+36] = r4			  ## ui_draw_arc.c:1084:6
  10506e:    46 20             	r6 = 0			  ## ui_draw_arc.c:1084:6
  105070:    24 81             	goto 130 <draw_text+0x158 : 1050f4 >			  ## ui_draw_arc.c:1084:6
  105072:    04 2b             	r4 = [sp+44]
  105074:    b4 f0 40 86       	r8 = r4 + r6  #
  105078:    86 2d             		 [sp+52] = r6
  10507a:    04 28             	r4 = [sp+32]
  10507c:    b4 f0 82 44       	r4 = r8 - r4  #
  105080:    06 29             		 r6 = [sp+36]
  105082:    f0 e1 60 e4       	r14 = r6 * r4
  105086:    44 20             	r4 = 0
  105088:    d4 e9 39 c0       	[sp+56] = r12
  10508c:    14 8b             	goto 86 <draw_text+0x148 : 1050e4 >
  10508e:    b4 e0 d0 54       	r5 = r13 + r4			  ## ui_draw_arc.c:1115:48
  105092:    46 28             	r6 = 8			  ## ui_draw_arc.c:1115:48
  105094:    f4 e1 51 66       	r6 = r5 / r6 (s)			  ## ui_draw_arc.c:1115:48
  105098:    67 a3             	r7 = r6 << 3			  ## ui_draw_arc.c:1115:55
  10509a:    dd 1f             	r5 = r5 - r7			  ## ui_draw_arc.c:1115:55
  10509c:    a5 e0 07 50       	r5 = 0x7 - r5			  ## ui_draw_arc.c:1115:55
  1050a0:    4f e0 01 00       	r15 = 1 <moveable_slot_size+0x1 : 1 >			  ## ui_draw_arc.c:1115:55
  1050a4:    c8 e1 f0 75       	r7 = r15 << r5			  ## ui_draw_arc.c:1115:55
  1050a8:    b4 e0 e0 56       	r5 = r14 + r6			  ## ui_draw_arc.c:1115:44
  1050ac:    d8 ee 00 65       	r6 = b[r0+r5] (u)			  ## ui_draw_arc.c:1115:10
  1050b0:    45 21             	r5 = 1			  ## ui_draw_arc.c:1115:10
  1050b2:    16 ea 80 07       	if ((r6 & r7) != 0) {			  ## ui_draw_arc.c:1115:10
  1050b6:    45 20             		r5 = 0
                               	}			  ## ui_draw_arc.c:1115:10
  1050b8:    17 1d             	r7 = r1 + r4			  ## ui_draw_arc.c:1112:25
  1050ba:    46 21             	r6 = 1			  ## ui_draw_arc.c:1115:10
  1050bc:    17 ed 00 03       	ifs (r7 >= r3) {			  ## ui_draw_arc.c:1115:10
  1050c0:    46 20             		r6 = 0
                               	}			  ## ui_draw_arc.c:1115:10
  1050c2:    65 19             	r5 |= r6			  ## ui_draw_arc.c:1115:10
  1050c4:    1a ee 00 07       	ifs (r10 > r7) {			  ## ui_draw_arc.c:1115:10
  1050c8:    c7 14             		r15 = 0
                               	}			  ## ui_draw_arc.c:200:9
  1050ca:    82 ed 08 80       	ifs (r8 < r2) goto 16 <draw_text+0x142 : 1050de >			  ## ui_draw_arc.c:200:9
  1050ce:    90 e1 50 5f       	r5 = r5 | r15			  ## ui_draw_arc.c:1115:10
  1050d2:    85 45             	if (r5 != 0) goto 10 <draw_text+0x142 : 1050de >			  ## ui_draw_arc.c:1115:10
  1050d4:    19 ee 00 48       	ifs (r9 > r8) {
  1050d8:    05 2f             		r5 = [sp+60]			  ## ui_draw_arc.c:205:113
  1050da:    50 ed c1 50       		h[r12+0] = r5
                               	}			  ## ui_draw_arc.c:205:113
  1050de:    0c e1 02 c0       	r12 = r12 + 2			  ## ui_draw_arc.c:1111:5
  1050e2:    c4 21             	r4 += 1			  ## ui_draw_arc.c:1111:35
  1050e4:    8b ed d3 41       	ifs (r4 < r11) goto -90 <draw_text+0xF2 : 10508e >
  1050e8:    d4 e9 38 c0       	r12 = [sp+56]
  1050ec:    04 2a             	r4 = [sp+40]			  ## ui_draw_arc.c:1110:4
  1050ee:    4c d8             	r12 += r4  #			  ## ui_draw_arc.c:1110:4
  1050f0:    06 2d             		 r6 = [sp+52]			  ## ui_draw_arc.c:1110:4
  1050f2:    c6 21             	r6 += 1			  ## ui_draw_arc.c:1110:35
  1050f4:    04 2c             	r4 = [sp+48]			  ## ui_draw_arc.c:1110:4
  1050f6:    84 ed bc 61       	ifs (r6 < r4) goto -136 <draw_text+0xD6 : 105072 >			  ## ui_draw_arc.c:1110:4
  1050fa:    00 27             	r0 = [sp+28]
  1050fc:    01 26             	r1 = [sp+24]			  ## ui_draw_arc.c:1122:18
  1050fe:    10 18             	r0 += r1			  ## ui_draw_arc.c:1122:18
  105100:    80 27             	[sp+28] = r0			  ## ui_draw_arc.c:1122:18
  105102:    80 30             	[sp+64] = r0			  ## ui_draw_arc.c:1122:18
  105104:    03 24             	r3 = [sp+16]			  ## ui_draw_arc.c:1122:18
  105106:    05 25             	r5 = [sp+20]			  ## ui_draw_arc.c:1122:18
  105108:    06 21             	r6 = [sp+4]			  ## ui_draw_arc.c:1122:18
  10510a:    c7 ff f4 9d 10 00 	r7 = 1089012 <text_matrix : 109df4 >			  ## ui_draw_arc.c:1122:18
  105110:    86 ed 5c 51       	ifs (r5 < r6) goto -328 <draw_text+0x30 : 104fcc >
  105114:    02 98             	sp += 96
  105116:    5f 04             	{pc, r15-r4} = [sp++]			  ## ui_draw_arc.c:1124:1


draw_ring:
  105118:    7f 04             	[--sp] = {rets, r15-r4}			  ## ui_draw_arc.c:1200:0
  10511a:    e2 84             	sp += -112			  ## ui_draw_arc.c:1200:0
  10511c:    41 2f             	r1 = 15			  ## ui_draw_arc.c:1216:12
  10511e:    81 32             	[sp+72] = r1			  ## ui_draw_arc.c:1216:12
  105120:    7a 3f             	r2 = 255			  ## ui_draw_arc.c:1217:10
  105122:    de e9 4c 20       	b[sp+76] = r2			  ## ui_draw_arc.c:1217:10
  105126:    44 20             	r4 = 0			  ## ui_draw_arc.c:1226:2
  105128:    45 20             	r5 = 0			  ## ui_draw_arc.c:1226:2
  10512a:    d0 e9 51 40       	d[sp+80] = r5_r4			  ## ui_draw_arc.c:1226:2
  10512e:    c7 ff 00 c8 10 00 	r7 = 1099776 <backlight_status : 10c800 >			  ## ui_draw_arc.c:1226:2
  105134:    50 ed 70 1c       	r1 = h[r7+192] (u)			  ## ui_draw_arc.c:100:17
  105138:    04 e1 c7 20       	r4 = r2 + 199			  ## ui_draw_arc.c:1226:2
  10513c:    45 16             	r5 = r4			  ## ui_draw_arc.c:1226:2
  10513e:    d0 e9 59 40       	d[sp+88] = r5_r4			  ## ui_draw_arc.c:1226:2
  105142:    43 16             	r3 = r4			  ## ui_draw_arc.c:100:27
  105144:    f4 e1 10 33       	r3 = r1 / r3 (u)			  ## ui_draw_arc.c:100:27
  105148:    01 f1 c5 31       	r1 = r3 + 453  #
  10514c:    83 25             		 [sp+20] = r3
  10514e:    f4 e1 10 13       	r1 = r1 / r3 (u)
  105152:    01 f1 64 00       	r1 = r0 + 100  #			  ## ui_draw_arc.c:1210:11
  105156:    81 26             		 [sp+24] = r1			  ## ui_draw_arc.c:1210:11
  105158:    de e9 4d 20       	b[sp+77] = r2			  ## ui_draw_arc.c:1219:16
  10515c:    30 ed 00 00       	ifs (r0 >= 0) {			  ## ui_draw_arc.c:1219:16
  105160:    01 16             		r1 = r0
                               	}			  ## ui_draw_arc.c:1209:6
  105162:    3a e1 9c 1f       	r10 = r1 + -100			  ## ui_draw_arc.c:1213:11
  105166:    b1 ee 64 00       	ifs (r1 <= 100) {
  10516a:    1a 16             		r10 = r1
                               	}			  ## ui_draw_arc.c:1212:6
  10516c:    e0 e1 b4 af       	r0 = r10 * 0x168
  105170:    59 24             	r1 = 100			  ## ui_draw_arc.c:1210:11
  105172:    f4 e1 01 01       	r0 = r0 / r1 (s)			  ## ui_draw_arc.c:1210:11
  105176:    00 e1 0e 01       	r0 = r0 + 270			  ## ui_draw_arc.c:1210:11
  10517a:    a9 84             	r1 = sp + 36			  ## ui_draw_arc.c:1210:11
  10517c:    c1 29             	r1 += 9			  ## ui_draw_arc.c:1210:11
  10517e:    f8 e8 60 f0       	r15 = sp + 96			  ## ui_draw_arc.c:1210:11
  105182:    f8 e8 50 d0       	r13 = sp + 80			  ## ui_draw_arc.c:1210:11
  105186:    ce ff 20 b8 10 00 	r14 = 1095712 <gpio_regs+0x20 : 10b820 >
  10518c:    46 e0 e0 07       	r6 = 2016 <WOLASynthesisFilter_Float_M64_m4_r1+0x3DC : 7e0 >
  105190:    80 17             	r0 = r0.l (u)
  105192:    d0 e9 0d 00       	d[sp+12] = r1_r0
  105196:    48 e0 02 00       	r8 = 2 <moveable_slot_size+0x2 : 2 >
  10519a:    c1 14             	r9 = 0
  10519c:    d4 e9 09 a0       	[sp+8] = r10
  1051a0:    94 82             	goto 580 <draw_ring+0x2CE : 1053e6 >
  1051a2:    01 25             	r1 = [sp+20]
  1051a4:    f0 e1 90 01       	r0 = r9 * r1			  ## ui_draw_arc.c:1232:31
  1051a8:    d0 ec d5 00       	[r13+4] = r0			  ## ui_draw_arc.c:1232:12
  1051ac:    a0 e0 e3 0f       	r0 = 0x1C6 - r0			  ## ui_draw_arc.c:1233:41
  1051b0:    35 e4 01 01       	r0 = smin(r0, r1)			  ## ui_draw_arc.c:1233:17
  1051b4:    d0 ec dd 00       	[r13+12] = r0			  ## ui_draw_arc.c:1233:15
  1051b8:    cc 90             	r4 = sp + 80			  ## ui_draw_arc.c:1233:15
  1051ba:    40 16             	r0 = r4			  ## ui_draw_arc.c:1235:3
  1051bc:    bf ea 3f f7       	call -4482 <disp_set_buffer_rect : 10403e >			  ## ui_draw_arc.c:1235:3
  1051c0:    41 20             	r1 = 0			  ## ui_draw_arc.c:1236:3
  1051c2:    45 20             	r5 = 0			  ## ui_draw_arc.c:1236:3
  1051c4:    40 16             	r0 = r4			  ## ui_draw_arc.c:1236:3
  1051c6:    bf ea 43 f8       	call -3962 <disp_buffer_clear : 104250 >			  ## ui_draw_arc.c:1236:3
  1051ca:    00 34             	r0 = [sp+80]			  ## ui_draw_arc.c:1238:23
  1051cc:    d0 ec d8 10       	r1 = [r13+8]			  ## ui_draw_arc.c:1239:35
  1051d0:    10 d8             	r0 += r1  #			  ## ui_draw_arc.c:1239:28
  1051d2:    80 38             		 [sp+96] = r0			  ## ui_draw_arc.c:1238:16
  1051d4:    d0 ec d4 10       	r1 = [r13+4]			  ## ui_draw_arc.c:1240:23
  1051d8:    d0 ec dc 20       	r2 = [r13+12]			  ## ui_draw_arc.c:1241:34
  1051dc:    f8 3f             	r0 += -1			  ## ui_draw_arc.c:1239:41
  1051de:    d0 ec f9 00       	[r15+8] = r0			  ## ui_draw_arc.c:1239:16
  1051e2:    d0 ec f5 10       	[r15+4] = r1			  ## ui_draw_arc.c:1240:16
  1051e6:    90 1c             	r0 = r1 + r2			  ## ui_draw_arc.c:1241:27
  1051e8:    f8 3f             	r0 += -1			  ## ui_draw_arc.c:1241:41
  1051ea:    d0 ec fd 00       	[r15+12] = r0			  ## ui_draw_arc.c:1241:16
  1051ee:    c0 ff 14 a5 00 00 	r0 = 42260 <hd_quantize_intervals_LF+0x870 : a514 >			  ## ui_draw_arc.c:1249:21
  1051f4:    d8 e9 45 00       	h[sp+68] = r0			  ## ui_draw_arc.c:1249:21
  1051f8:    e9 80             	r1 = sp + 96			  ## ui_draw_arc.c:1249:21
  1051fa:    ca 84             	r2 = sp + 68
  1051fc:    40 e0 76 02       	r0 = 630 <_MASK_MEM_SIZE+0xD2 : 276 >			  ## ui_draw_arc.c:1251:3
  105200:    bf ea 62 fc       	call -1852 <draw_spec_arc : 104ac8 >			  ## ui_draw_arc.c:1251:3
  105204:    40 20             	r0 = 0
  105206:    04 88             	goto 16 <draw_ring+0x100 : 105218 >
  105208:    d9 1d             	r1 = r5 + r7			  ## ui_mask.c:1002:21
  10520a:    d1 ec 1c 24       	r2 = [r1+332]			  ## ui_mask.c:1002:21
  10520e:    41 21             	r1 = 1			  ## ui_mask.c:1002:7
  105210:    82 41             	if (r2 != 0) goto 2 <draw_ring+0xFC : 105214 >			  ## ui_mask.c:1002:7
  105212:    21 16             	r1 = r2			  ## ui_mask.c:1002:7
  105214:    10 18             	r0 += r1			  ## ui_mask.c:1002:7
  105216:    c5 28             	r5 += 8			  ## ui_mask.c:1001:2
  105218:    95 f8 f6 01       	if (r5 != 128) goto -20 <draw_ring+0xF0 : 105208 >
  10521c:    61 ff ff 00 e8 00 	if ((r0 & 0xFF) != 0) goto 464 <draw_ring+0x2DA : 1053f2 >
  105222:    d8 e9 45 60       	h[sp+68] = r6			  ## ui_draw_arc.c:1257:18
  105226:    e9 80             	r1 = sp + 96			  ## ui_draw_arc.c:1257:18
  105228:    ca 84             	r2 = sp + 68
  10522a:    00 23             	r0 = [sp+12]			  ## ui_draw_arc.c:1258:3
  10522c:    bf ea 4c fc       	call -1896 <draw_spec_arc : 104ac8 >			  ## ui_draw_arc.c:1258:3
  105230:    45 20             	r5 = 0
  105232:    85 28             	[sp+32] = r5			  ## ui_draw_arc.c:1269:7
  105234:    50 ee e8 45       	r4 = b[r14+88] (u)			  ## ui_draw_arc.c:1274:3
  105238:    50 ec e0 25       	r3_r2 = d[r14+80]			  ## ui_draw_arc.c:1274:3
  10523c:    85 27             	[sp+28] = r5			  ## ui_draw_arc.c:1270:7
  10523e:    00 24             	r0 = [sp+16]			  ## ui_draw_arc.c:1270:7
  105240:    01 16             	r1 = r0			  ## ui_draw_arc.c:1274:3
  105242:    00 96             	rep 2 23 {			  ## ui_draw_arc.c:1274:3
  105244:    95 07             		b[r1++=1] = r5
                               	}			  ## ui_draw_arc.c:1274:3
  105246:    de e9 2c 40       	b[sp+44] = r4			  ## ui_draw_arc.c:1274:3
  10524a:    d0 e9 25 20       	d[sp+36] = r3_r2			  ## ui_draw_arc.c:1274:3
  10524e:    01 e1 0c e0       	r1 = r14 + 12			  ## ui_draw_arc.c:1275:3
  105252:    a2 16             	r2 = r10			  ## ui_draw_arc.c:1275:3
  105254:    80 ff a6 ab f1 ff 	call -939098 <sprintf : 1fe00 >			  ## ui_draw_arc.c:1275:3
  10525a:    0a fe 4f c6       	ifs (r10 > 99) goto 158 <draw_ring+0x1E4 : 1052fc >			  ## ui_draw_arc.c:1277:7
  10525e:    04 e1 46 e0       	r4 = r14 + 70			  ## ui_draw_arc.c:1278:4
  105262:    ad 80             	r5 = sp + 32
  105264:    8e 9c             	r6 = sp + 28
  105266:    41 29             	r1 = 9			  ## ui_draw_arc.c:1278:4
  105268:    40 16             	r0 = r4			  ## ui_draw_arc.c:1278:4
  10526a:    52 16             	r2 = r5			  ## ui_draw_arc.c:1278:4
  10526c:    63 16             	r3 = r6			  ## ui_draw_arc.c:1278:4
  10526e:    80 ff 74 27 00 00 	call 10100 <get_text_rect : 1079e8 >			  ## ui_draw_arc.c:1278:4
  105274:    d0 e9 1c 00       	r1_r0 = d[sp+28]			  ## ui_draw_arc.c:1280:18
  105278:    60 e0 78 ac       	r10 = 0xF800
  10527c:    d4 e9 05 a0       	[sp+4] = r10			  ## ui_draw_arc.c:1281:4
  105280:    a1 e0 e3 1f       	r1 = 0x1C6 - r1			  ## ui_draw_arc.c:1281:45
  105284:    f4 e1 11 18       	r1 = r1 / r8 (s)			  ## ui_draw_arc.c:1281:59
  105288:    4c e0 fd ff       	r12 = -3 <_HEAP_END+0x1D84FFD : 1fffffd >			  ## ui_draw_arc.c:1281:59
  10528c:    c0 1b             	r0 *= r12			  ## ui_draw_arc.c:1281:59
  10528e:    00 e1 ae 01       	r0 = r0 + 430			  ## ui_draw_arc.c:1281:88
  105292:    f4 e1 01 28       	r2 = r0 / r8 (s)			  ## ui_draw_arc.c:1281:107
  105296:    f8 e8 50 b0       	r11 = sp + 80			  ## ui_draw_arc.c:1281:107
  10529a:    40 29             	r0 = 9			  ## ui_draw_arc.c:1281:4
  10529c:    b0 d6             	r0 = r11  #			  ## ui_draw_arc.c:1281:4
  10529e:    80 20             		 [sp] = r0			  ## ui_draw_arc.c:1281:4
  1052a0:    43 16             	r3 = r4			  ## ui_draw_arc.c:1281:4
  1052a2:    bf ea 7b fe       	call -778 <draw_text : 104f9c >			  ## ui_draw_arc.c:1281:4
  1052a6:    04 e1 5a e0       	r4 = r14 + 90			  ## ui_draw_arc.c:1283:4
  1052aa:    41 2b             	r1 = 11			  ## ui_draw_arc.c:1283:4
  1052ac:    40 16             	r0 = r4			  ## ui_draw_arc.c:1283:4
  1052ae:    52 16             	r2 = r5			  ## ui_draw_arc.c:1283:4
  1052b0:    63 16             	r3 = r6			  ## ui_draw_arc.c:1283:4
  1052b2:    80 ff 30 27 00 00 	call 10032 <get_text_rect : 1079e8 >			  ## ui_draw_arc.c:1283:4
  1052b8:    d0 e9 1c 00       	r1_r0 = d[sp+28]			  ## ui_draw_arc.c:1285:18
  1052bc:    d4 e9 05 a0       	[sp+4] = r10			  ## ui_draw_arc.c:1286:4
  1052c0:    d4 e9 08 a0       	r10 = [sp+8]			  ## ui_draw_arc.c:1286:4
  1052c4:    a1 e0 e3 1f       	r1 = 0x1C6 - r1			  ## ui_draw_arc.c:1286:45
  1052c8:    f4 e1 11 18       	r1 = r1 / r8 (s)			  ## ui_draw_arc.c:1286:59
  1052cc:    f0 e1 00 2c       	r2 = r0 * r12			  ## ui_draw_arc.c:1286:88
  1052d0:    02 e1 ae 21       	r2 = r2 + 430			  ## ui_draw_arc.c:1286:88
  1052d4:    f4 e1 21 28       	r2 = r2 / r8 (s)			  ## ui_draw_arc.c:1286:107
  1052d8:    20 18             	r0 += r2			  ## ui_draw_arc.c:1286:73
  1052da:    0a 88             	r2 = r0 + 8			  ## ui_draw_arc.c:1286:111
  1052dc:    40 2b             	r0 = 11			  ## ui_draw_arc.c:1286:4
  1052de:    b0 d6             	r0 = r11  #			  ## ui_draw_arc.c:1286:4
  1052e0:    80 20             		 [sp] = r0			  ## ui_draw_arc.c:1286:4
  1052e2:    43 16             	r3 = r4			  ## ui_draw_arc.c:1286:4
  1052e4:    bf ea 5a fe       	call -844 <draw_text : 104f9c >			  ## ui_draw_arc.c:1286:4
  1052e8:    ac 84             	r4 = sp + 36			  ## ui_draw_arc.c:1286:4
  1052ea:    40 16             	r0 = r4			  ## ui_draw_arc.c:1288:27
  1052ec:    80 ff 9a aa f1 ff 	call -939366 <strlen : 1fd8c >			  ## ui_draw_arc.c:1288:27
  1052f2:    01 16             	r1 = r0			  ## ui_draw_arc.c:1288:27
  1052f4:    40 16             	r0 = r4			  ## ui_draw_arc.c:1288:4
  1052f6:    52 16             	r2 = r5			  ## ui_draw_arc.c:1288:4
  1052f8:    63 16             	r3 = r6			  ## ui_draw_arc.c:1288:4
  1052fa:    24 8e             	goto 156 <draw_ring+0x280 : 105398 >			  ## ui_draw_arc.c:1288:4
  1052fc:    04 e1 3d e0       	r4 = r14 + 61			  ## ui_draw_arc.c:1294:4
  105300:    ae 80             	r6 = sp + 32
  105302:    8d 9c             	r5 = sp + 28
  105304:    41 28             	r1 = 8			  ## ui_draw_arc.c:1294:4
  105306:    40 16             	r0 = r4			  ## ui_draw_arc.c:1294:4
  105308:    62 16             	r2 = r6			  ## ui_draw_arc.c:1294:4
  10530a:    53 16             	r3 = r5			  ## ui_draw_arc.c:1294:4
  10530c:    80 ff d6 26 00 00 	call 9942 <get_text_rect : 1079e8 >			  ## ui_draw_arc.c:1294:4
  105312:    d0 e9 1c 00       	r1_r0 = d[sp+28]			  ## ui_draw_arc.c:1296:18
  105316:    60 e0 78 ac       	r10 = 0xF800
  10531a:    d4 e9 05 a0       	[sp+4] = r10			  ## ui_draw_arc.c:1297:4
  10531e:    a1 e0 e3 1f       	r1 = 0x1C6 - r1			  ## ui_draw_arc.c:1297:45
  105322:    f4 e1 11 18       	r1 = r1 / r8 (s)			  ## ui_draw_arc.c:1297:59
  105326:    4c e0 fd ff       	r12 = -3 <_HEAP_END+0x1D84FFD : 1fffffd >			  ## ui_draw_arc.c:1297:59
  10532a:    c0 1b             	r0 *= r12			  ## ui_draw_arc.c:1297:59
  10532c:    00 e1 ae 01       	r0 = r0 + 430			  ## ui_draw_arc.c:1297:88
  105330:    f4 e1 01 28       	r2 = r0 / r8 (s)			  ## ui_draw_arc.c:1297:107
  105334:    f8 e8 50 b0       	r11 = sp + 80			  ## ui_draw_arc.c:1297:107
  105338:    40 28             	r0 = 8			  ## ui_draw_arc.c:1297:4
  10533a:    b0 d6             	r0 = r11  #			  ## ui_draw_arc.c:1297:4
  10533c:    80 20             		 [sp] = r0			  ## ui_draw_arc.c:1297:4
  10533e:    43 16             	r3 = r4			  ## ui_draw_arc.c:1297:4
  105340:    bf ea 2c fe       	call -936 <draw_text : 104f9c >			  ## ui_draw_arc.c:1297:4
  105344:    04 e1 37 e1       	r4 = r14 + 311			  ## ui_draw_arc.c:1299:4
  105348:    41 2c             	r1 = 12			  ## ui_draw_arc.c:1299:4
  10534a:    40 16             	r0 = r4			  ## ui_draw_arc.c:1299:4
  10534c:    62 16             	r2 = r6			  ## ui_draw_arc.c:1299:4
  10534e:    53 16             	r3 = r5			  ## ui_draw_arc.c:1299:4
  105350:    80 ff 92 26 00 00 	call 9874 <get_text_rect : 1079e8 >			  ## ui_draw_arc.c:1299:4
  105356:    d0 e9 1c 00       	r1_r0 = d[sp+28]			  ## ui_draw_arc.c:1301:18
  10535a:    d4 e9 05 a0       	[sp+4] = r10			  ## ui_draw_arc.c:1302:4
  10535e:    d4 e9 08 a0       	r10 = [sp+8]			  ## ui_draw_arc.c:1302:4
  105362:    a1 e0 e3 1f       	r1 = 0x1C6 - r1			  ## ui_draw_arc.c:1302:45
  105366:    f4 e1 11 18       	r1 = r1 / r8 (s)			  ## ui_draw_arc.c:1302:59
  10536a:    f0 e1 00 2c       	r2 = r0 * r12			  ## ui_draw_arc.c:1302:88
  10536e:    02 e1 ae 21       	r2 = r2 + 430			  ## ui_draw_arc.c:1302:88
  105372:    f4 e1 21 28       	r2 = r2 / r8 (s)			  ## ui_draw_arc.c:1302:107
  105376:    20 18             	r0 += r2			  ## ui_draw_arc.c:1302:73
  105378:    0a 88             	r2 = r0 + 8			  ## ui_draw_arc.c:1302:111
  10537a:    40 2c             	r0 = 12			  ## ui_draw_arc.c:1302:4
  10537c:    b0 d6             	r0 = r11  #			  ## ui_draw_arc.c:1302:4
  10537e:    80 20             		 [sp] = r0			  ## ui_draw_arc.c:1302:4
  105380:    43 16             	r3 = r4			  ## ui_draw_arc.c:1302:4
  105382:    bf ea 0b fe       	call -1002 <draw_text : 104f9c >			  ## ui_draw_arc.c:1302:4
  105386:    ac 84             	r4 = sp + 36			  ## ui_draw_arc.c:1302:4
  105388:    40 16             	r0 = r4			  ## ui_draw_arc.c:1304:27
  10538a:    80 ff fc a9 f1 ff 	call -939524 <strlen : 1fd8c >			  ## ui_draw_arc.c:1304:27
  105390:    01 16             	r1 = r0			  ## ui_draw_arc.c:1304:27
  105392:    40 16             	r0 = r4			  ## ui_draw_arc.c:1304:4
  105394:    62 16             	r2 = r6			  ## ui_draw_arc.c:1304:4
  105396:    53 16             	r3 = r5			  ## ui_draw_arc.c:1304:4
  105398:    80 ff 4a 26 00 00 	call 9802 <get_text_rect : 1079e8 >
  10539e:    40 d6             	r0 = r4  #
  1053a0:    05 27             		 r5 = [sp+28]
  1053a2:    06 28             	r6 = [sp+32]
  1053a4:    80 ff e2 a9 f1 ff 	call -939550 <strlen : 1fd8c >
  1053aa:    59 88             	r1 = r5 + 8
  1053ac:    f0 e1 10 2c       	r2 = r1 * r12
  1053b0:    02 e1 c6 21       	r2 = r2 + 454
  1053b4:    f4 e1 21 28       	r2 = r2 / r8 (s)
  1053b8:    11 a1             	r1 = r1 << 1
  1053ba:    12 18             	r2 += r1
  1053bc:    41 e0 e0 07       	r1 = 2016 <WOLASynthesisFilter_Float_M64_m4_r1+0x3DC : 7e0 >
  1053c0:    d0 e9 01 00       	d[sp] = r1_r0
  1053c4:    a1 e0 e3 6f       	r1 = 0x1C6 - r6
  1053c8:    46 e0 e0 07       	r6 = 2016 <WOLASynthesisFilter_Float_M64_m4_r1+0x3DC : 7e0 >
  1053cc:    f4 e1 11 18       	r1 = r1 / r8 (s)
  1053d0:    b0 16             	r0 = r11
  1053d2:    43 16             	r3 = r4
  1053d4:    bf ea e2 fd       	call -1084 <draw_text : 104f9c >
  1053d8:    d0 ec 74 1b       	r1 = [r7+180]			  ## ui_draw_arc.c:88:17
  1053dc:    c8 90             	r0 = sp + 80			  ## ui_draw_arc.c:88:17
  1053de:    bf ea 3c f6       	call -5000 <disp_buffer_flush : 10405a >			  ## ui_draw_arc.c:1310:3
  1053e2:    09 e1 01 90       	r9 = r9 + 1			  ## ui_draw_arc.c:1231:54
  1053e6:    00 26             	r0 = [sp+24]			  ## ui_draw_arc.c:1231:2
  1053e8:    4b ff 00 90 da fe 	ifs (r9 < r0) goto -588 <draw_ring+0x8A : 1051a2 >			  ## ui_draw_arc.c:1231:2
  1053ee:    02 9c             	sp += 112
  1053f0:    5f 04             	{pc, r15-r4} = [sp++]			  ## ui_draw_arc.c:1312:1
  1053f2:    00 e1 3e e2       	r0 = r14 + 574			  ## ui_draw_arc.c:1254:3
  1053f6:    02 e1 bf e8       	r2 = r14 + 2239			  ## ui_draw_arc.c:1254:3
  1053fa:    41 20             	r1 = 0			  ## ui_draw_arc.c:1254:3
  1053fc:    43 e0 e6 04       	r3 = 1254 <WOLASynthesisFilter_Float_M64_m4_r1+0xE2 : 4e6 >			  ## ui_draw_arc.c:1254:3
  105400:    80 ff fe a9 f1 ff 	call -939522 <printf : 1fe04 >			  ## ui_draw_arc.c:1254:3
  105406:    00 e1 67 e3       	r0 = r14 + 871			  ## ui_draw_arc.c:1254:3
  10540a:    80 ff f4 a9 f1 ff 	call -939532 <printf : 1fe04 >			  ## ui_draw_arc.c:1254:3
  105410:    f7 9f             	goto -2 <draw_ring+0x2F8 : 105410 >			  ## ui_draw_arc.c:1254:3


disp_get_buffer_line:
  105412:    c1 ff 00 c8 10 00 	r1 = 1099776 <backlight_status : 10c800 >			  ## ui_draw_arc.c:99:0
  105418:    50 ed 10 1c       	r1 = h[r1+192] (u)			  ## ui_draw_arc.c:100:17
  10541c:    f4 e1 10 00       	r0 = r1 / r0 (u)			  ## ui_draw_arc.c:100:27
  105420:    80 00             	rts			  ## ui_draw_arc.c:100:2


ui_draw_text:
  105422:    7f 04             	[--sp] = {rets, r15-r4}			  ## ui_draw_text.c:36:0
  105424:    e2 9a             	sp += -24			  ## ui_draw_text.c:36:0
  105426:    08 16             	r8 = r0			  ## ui_draw_text.c:36:0
  105428:    d0 e9 09 00       	d[sp+8] = r1_r0			  ## ui_draw_text.c:40:2
  10542c:    34 d6             	r4 = r3  #			  ## ui_draw_text.c:40:2
  10542e:    82 24             		 [sp+16] = r2			  ## ui_draw_text.c:40:2
  105430:    1f d6             	r15 = r1  #			  ## ui_draw_text.c:40:2
  105432:    84 25             		 [sp+20] = r4			  ## ui_draw_text.c:40:2
  105434:    20 16             	r0 = r2			  ## ui_draw_text.c:42:14
  105436:    71 8d             	call -38 <disp_get_buffer_line : 105412 >			  ## ui_draw_text.c:42:14
  105438:    07 16             	r7 = r0			  ## ui_draw_text.c:42:14
  10543a:    c8 1d             	r0 = r4 + r7
  10543c:    f8 3f             	r0 += -1
  10543e:    f4 e1 01 a7       	r10 = r0 / r7 (s)
  105442:    d4 e9 54 b0       	r11 = [sp+84]
  105446:    d4 e9 50 c0       	r12 = [sp+80]
  10544a:    d4 e9 4c d0       	r13 = [sp+76]
  10544e:    f8 e8 08 e0       	r14 = sp + 8
  105452:    46 20             	r6 = 0
  105454:    f9 16             	r9 = r15
  105456:    14 83             	goto 70 <ui_draw_text+0x7C : 10549e >
  105458:    d0 ec e5 90       	[r14+4] = r9			  ## ui_draw_text.c:45:12
  10545c:    35 e4 41 07       	r0 = smin(r4, r7)			  ## ui_draw_text.c:46:17
  105460:    d0 ec ed 00       	[r14+12] = r0			  ## ui_draw_text.c:46:15
  105464:    8d 88             	r5 = sp + 8			  ## ui_draw_text.c:46:15
  105466:    50 16             	r0 = r5			  ## ui_draw_text.c:48:3
  105468:    bf ea e9 f5       	call -5166 <disp_set_buffer_rect : 10403e >			  ## ui_draw_text.c:48:3
  10546c:    41 20             	r1 = 0			  ## ui_draw_text.c:49:3
  10546e:    50 16             	r0 = r5			  ## ui_draw_text.c:49:3
  105470:    bf ea ee f6       	call -4644 <disp_buffer_clear : 104250 >			  ## ui_draw_text.c:49:3
  105474:    d4 e9 05 d0       	[sp+4] = r13			  ## ui_draw_text.c:50:9
  105478:    d4 e9 01 b0       	[sp] = r11			  ## ui_draw_text.c:50:9
  10547c:    50 16             	r0 = r5			  ## ui_draw_text.c:50:9
  10547e:    81 16             	r1 = r8			  ## ui_draw_text.c:50:9
  105480:    f2 16             	r2 = r15			  ## ui_draw_text.c:50:9
  105482:    c3 16             	r3 = r12			  ## ui_draw_text.c:50:9
  105484:    bf ea 8a fd       	call -1260 <draw_text : 104f9c >			  ## ui_draw_text.c:50:9
  105488:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## ui_draw_arc.c:88:17
  10548e:    d0 ec 04 1b       	r1 = [r0+180]			  ## ui_draw_arc.c:88:17
  105492:    50 16             	r0 = r5			  ## ui_draw_text.c:51:3
  105494:    bf ea e1 f5       	call -5182 <disp_buffer_flush : 10405a >			  ## ui_draw_text.c:51:3
  105498:    79 18             	r9 += r7			  ## ui_draw_text.c:44:2
  10549a:    cc 1f             	r4 = r4 - r7			  ## ui_draw_text.c:44:2
  10549c:    c6 21             	r6 += 1			  ## ui_draw_text.c:44:54
  10549e:    8a ed db 61       	ifs (r6 < r10) goto -74 <ui_draw_text+0x36 : 105458 >
  1054a2:    02 86             	sp += 24
  1054a4:    5f 04             	{pc, r15-r4} = [sp++]			  ## ui_draw_text.c:53:1


mask_line:
  1054a6:    7f 04             	[--sp] = {rets, r15-r4}			  ## ui_mask.c:628:0
  1054a8:    e2 9f             	sp += -4			  ## ui_mask.c:628:0
  1054aa:    09 d6             	r9 = r0  #			  ## ui_mask.c:628:0
  1054ac:    07 2e             		 r7 = [sp+56]			  ## ui_mask.c:628:0
  1054ae:    0b f1 34 70       	r11 = r7 + 52  #			  ## ui_mask.c:628:0
  1054b2:    75 67             		 r5 = [r7+28] 			  ## ui_mask.c:630:20
  1054b4:    1d df             	r5 = r1 - r5  #			  ## ui_mask.c:630:8
  1054b6:    76 68             		 r6 = [r7+32] 			  ## ui_mask.c:629:20
  1054b8:    50 ee b0 a0       	r10 = b[r11+0] (u)			  ## ui_mask.c:629:20
  1054bc:    a0 df             	r0 = r2 - r6  #			  ## ui_mask.c:629:8
  1054be:    74 6b             		 r4 = [r7+44] 			  ## ui_mask.c:632:9
  1054c0:    76 e1 fe a0       	r6 = r10 & 0xFFFFFF01
  1054c4:    24 52             	if (r4 == 0) goto 164 <mask_line+0xC4 : 10556a >
  1054c6:    b6 56             	if (r6 != 0) goto 236 <mask_line+0x10E : 1055b4 >
  1054c8:    71 69             	r1 = [r7+36] 			  ## ui_mask.c:819:25
  1054ca:    42 21             	r2 = 1			  ## ui_mask.c:820:18
  1054cc:    b1 ee 00 00       	ifs (r1 <= 0) {			  ## ui_mask.c:820:18
  1054d0:    42 20             		r2 = 0
                               	}			  ## ui_mask.c:820:18
  1054d2:    f0 e1 10 40       	r4 = r1 * r0			  ## ui_mask.c:819:34
  1054d6:    ce aa             	r6 = r4 >>> 10			  ## ui_mask.c:819:43
  1054d8:    62 18             	r2 += r6			  ## ui_mask.c:820:6
  1054da:    85 ed 91 20       	ifs (r2 < r5) goto 290 <mask_line+0x15A : 105600 >
  1054de:    da 1c             	r2 = r5 + r3			  ## ui_mask.c:832:21
  1054e0:    02 ee 96 60       	ifs (r6 > r2) goto 300 <mask_line+0x16A : 105610 >
  1054e4:    00 a8             	r0 = r0 << 8			  ## ui_mask.c:840:19
  1054e6:    f0 e1 10 20       	r2 = r1 * r0			  ## ui_mask.c:840:25
  1054ea:    c0 e1 22 fd       	r15 = r2 >>> 18			  ## ui_mask.c:841:15
  1054ee:    b4 e0 f2 45       	r4 = r15 - r5			  ## ui_mask.c:850:10
  1054f2:    00 e1 00 01       	r0 = r0 + 256			  ## ui_mask.c:844:25
  1054f6:    f0 e1 10 d0       	r13 = r1 * r0			  ## ui_mask.c:844:31
  1054fa:    c0 e1 d2 6d       	r6 = r13 >>> 18			  ## ui_mask.c:845:15
  1054fe:    b2 e1 20 25       	r2 = uextra(r2, p:10, l:8)			  ## ui_mask.c:842:15
  105502:    06 e8 14 f0       	if (r15 == r6) goto 40 <mask_line+0x88 : 10552e >
  105506:    d4 e9 01 f0       	[sp] = r15
  10550a:    40 21             	r0 = 1
  10550c:    02 41             	if (r2 == 0) goto 2 <mask_line+0x6A : 105510 >
  10550e:    40 20             	r0 = 0
  105510:    c0 e1 1f 89       	r8 = r1 >> 31			  ## ui_mask.c:851:33
  105514:    90 e1 82 c0       	r12 = r8 & r0			  ## ui_mask.c:851:37
  105518:    4e e0 ff 00       	r14 = 255 <UPDATE_SIZE+0x7F : ff >
  10551c:    6f 16             	r15 = r6			  ## ui_mask.c:851:37
  10551e:    18 ea 00 40       	if ((r8 & r0) == 0) {			  ## ui_mask.c:851:37
  105522:    2e 16             		r14 = r2			  ## ui_mask.c:851:37
  105524:    d4 e9 00 f0       		r15 = [sp]
                               	}			  ## ui_mask.c:851:37
  105528:    b4 e0 42 4c       	r4 = r4 - r12			  ## ui_mask.c:851:37
  10552c:    e2 16             	r2 = r14			  ## ui_mask.c:851:37
  10552e:    86 e8 a5 f0       	if (r15 != r6) goto 330 <mask_line+0x1D6 : 10567c >			  ## ui_mask.c:857:6
  105532:    84 fd 15 00       	ifs (r4 < 0) goto 42 <mask_line+0xBA : 105560 >
  105536:    03 ed 13 40       	ifs (r4 >= r3) goto 38 <mask_line+0xBA : 105560 >
  10553a:    b1 e1 20 d5       	r1 = uextra(r13, p:10, l:8)			  ## ui_mask.c:846:15
  10553e:    d8 ee 90 04       	r0 = b[r9+r4] (u)			  ## ui_mask.c:863:18
  105542:    21 18             	r1 += r2			  ## ui_mask.c:859:13
  105544:    91 a1             	r1 = r1 >> 1			  ## ui_mask.c:859:20
  105546:    c0 e1 a6 20       	r2 = r10 << 6			  ## ui_mask.c:860:8
  10554a:    2a 17             	r2 = r2.b0 (s)			  ## ui_mask.c:860:8
  10554c:    a2 a7             	r2 = r2 >> 7			  ## ui_mask.c:860:8
  10554e:    29 19             	r1 ^= r2			  ## ui_mask.c:860:8
  105550:    11 17             	r1 = r1.b0 (u)			  ## ui_mask.c:863:18
  105552:    80 ff a2 2a 00 00 	call 10914 <mask_mix : 107ffa >			  ## ui_mask.c:863:18
  105558:    d8 ee 91 04       	b[r9+r4] = r0			  ## ui_mask.c:863:16
  10555c:    50 ee b0 a0       	r10 = b[r11+0] (u)			  ## ui_mask.c:863:16
  105560:    61 ff 02 a0 20 01 	if ((r10 & 0x2) != 0) goto 576 <mask_line+0x300 : 1057a6 >
  105566:    48 81             	r0 = r4 + 1			  ## ui_mask.c:865:4
  105568:    64 82             	goto 388 <mask_line+0x248 : 1056ee >			  ## ui_mask.c:865:4
  10556a:    50 ee 78 21       	r2 = b[r7+24] (u)
  10556e:    71 e1 fc 20       	r1 = r2 & 0xFFFFFF03
  105572:    96 4e             	if (r6 != 0) goto 92 <mask_line+0x12A : 1055d0 >
  105574:    46 21             	r6 = 1
  105576:    61 ff 02 20 80 01 	if ((r2 & 0x2) != 0) goto 768 <mask_line+0x3D6 : 10587c >
  10557c:    85 fd 03 02       	ifs (r5 < 1) goto 6 <mask_line+0xE0 : 105586 >
  105580:    00 ff 01 10 7b 01 	if (r1 == 1) goto 758 <mask_line+0x3D6 : 10587c >
  105586:    da 1c             	r2 = r5 + r3
  105588:    00 ff 00 10 11 01 	if (r1 == 0) goto 546 <mask_line+0x30A : 1057b0 >
  10558e:    0b ff 00 20 19 01 	ifs (r2 < 0) goto 562 <mask_line+0x320 : 1057c6 >
  105594:    a2 e0 00 50       	r2 = 0x0 - r5			  ## ui_mask.c:667:14
  105598:    46 20             	r6 = 0
  10559a:    b2 ee 00 00       	ifs (r2 <= 0) {
  10559e:    42 20             		r2 = 0
                               	}			  ## ui_mask.c:668:10
  1055a0:    4a ff 00 23 6b 01 	ifs (r2 >= r3) goto 726 <mask_line+0x3D6 : 10587c >
  1055a6:    41 20             	r1 = 0			  ## ui_basic.c:110:2
  1055a8:    90 16             	r0 = r9			  ## ui_basic.c:110:2
  1055aa:    80 ff d0 a7 f1 ff 	call -940080 <memset : 1fd80 >			  ## ui_basic.c:110:2
  1055b0:    46 22             	r6 = 2
  1055b2:    b4 84             	goto 712 <mask_line+0x3D6 : 10587c >
  1055b4:    71 6a             	r1 = [r7+40] 			  ## ui_mask.c:695:25
  1055b6:    f0 e1 10 25       	r2 = r1 * r5			  ## ui_mask.c:695:34
  1055ba:    aa aa             	r2 = r2 >>> 10			  ## ui_mask.c:695:43
  1055bc:    81 fd 1e 02       	ifs (r1 < 1) goto 60 <mask_line+0x156 : 1055fc >			  ## ui_mask.c:697:6
  1055c0:    00 ee 1e 20       	ifs (r2 > r0) goto 60 <mask_line+0x15A : 105600 >
  1055c4:    da 1c             	r2 = r5 + r3			  ## ui_mask.c:715:43
  1055c6:    12 1b             	r2 *= r1			  ## ui_mask.c:715:34
  1055c8:    aa aa             	r2 = r2 >>> 10			  ## ui_mask.c:715:51
  1055ca:    80 ed 21 20       	ifs (r2 < r0) goto 66 <mask_line+0x16A : 105610 >			  ## ui_mask.c:715:51
  1055ce:    14 86             	goto 76 <mask_line+0x176 : 10561c >			  ## ui_mask.c:715:51
  1055d0:    b2 e1 09 20       	r2 = sextra(r2, p:0, l:2)			  ## ui_mask.c:634:43
  1055d4:    46 21             	r6 = 1			  ## ui_mask.c:634:43
  1055d6:    0c ff ff 2f 50 01 	ifs (r2 > -1) goto 672 <mask_line+0x3D6 : 10587c >			  ## ui_mask.c:634:43
  1055dc:    81 f8 03 04       	if (r1 != 2) goto 6 <mask_line+0x140 : 1055e6 >
  1055e0:    0b ff ff 0f 4b 01 	ifs (r0 < -1) goto 662 <mask_line+0x3D6 : 10587c >
  1055e6:    42 21             	r2 = 1
  1055e8:    43 21             	r3 = 1			  ## ui_mask.c:639:27
  1055ea:    b1 e8 03 00       	if (r1 != 3) {
  1055ee:    43 20             		r3 = 0
                               	}			  ## ui_mask.c:639:27
  1055f0:    b0 ee 00 00       	ifs (r0 <= 0) {			  ## ui_mask.c:639:27
  1055f4:    42 20             		r2 = 0
                               	}			  ## ui_mask.c:639:61
  1055f6:    90 e1 22 63       	r6 = r2 & r3			  ## ui_mask.c:639:52
  1055fa:    a4 80             	goto 640 <mask_line+0x3D6 : 10587c >			  ## ui_mask.c:639:52
  1055fc:    00 ed 03 20       	ifs (r2 >= r0) goto 6 <mask_line+0x160 : 105606 >
  105600:    b6 e1 84 a0       	r6 = uextra(r10, p:1, l:1)
  105604:    94 9b             	goto 630 <mask_line+0x3D6 : 10587c >
  105606:    da 1c             	r2 = r5 + r3			  ## ui_mask.c:715:43
  105608:    12 1b             	r2 *= r1			  ## ui_mask.c:715:34
  10560a:    aa aa             	r2 = r2 >>> 10			  ## ui_mask.c:715:51
  10560c:    80 ee 06 20       	ifs (r2 <= r0) goto 12 <mask_line+0x176 : 10561c >
  105610:    c0 e1 a1 08       	r0 = r10 >> 1
  105614:    41 21             	r1 = 1
  105616:    90 e1 13 60       	r6 = r1 & ~r0
  10561a:    94 90             	goto 608 <mask_line+0x3D6 : 10587c >
  10561c:    00 a8             	r0 = r0 << 8
  10561e:    02 e1 00 01       	r2 = r0 + 256			  ## ui_mask.c:738:22
  105622:    b1 ee 00 00       	ifs (r1 <= 0) {			  ## ui_mask.c:738:22
  105626:    20 16             		r0 = r2
                               	}			  ## ui_mask.c:735:6
  105628:    71 69             	r1 = [r7+36] 			  ## ui_mask.c:735:6
  10562a:    10 1b             	r0 *= r1			  ## ui_mask.c:735:6
  10562c:    81 aa             	r1 = r0 >> 10			  ## ui_mask.c:735:6
  10562e:    88 b2             	r0 = r0 >>> 18			  ## ui_mask.c:741:15
  105630:    60 ff ff 10 63 00 	if ((r1 & 0xFF) == 0) goto 198 <mask_line+0x256 : 1056fc >
  105636:    76 16             	r6 = r7			  ## ui_mask.c:748:35
  105638:    d0 ec 62 23       	r2 = [++r6=48]			  ## ui_mask.c:748:35
  10563c:    11 17             	r1 = r1.b0 (u)			  ## ui_mask.c:742:15
  10563e:    b4 e0 02 85       	r8 = r0 - r5			  ## ui_mask.c:750:14
  105642:    50 e1 ff 10       	r0 = r1 ^ 0xFF			  ## ui_mask.c:748:23
  105646:    f0 e1 20 10       	r1 = r2 * r0			  ## ui_mask.c:748:30
  10564a:    9d a8             	r5 = r1 >>> 8			  ## ui_mask.c:748:40
  10564c:    88 fd 11 00       	ifs (r8 < 0) goto 34 <mask_line+0x1CC : 105672 >
  105650:    03 ed 0f 80       	ifs (r8 >= r3) goto 30 <mask_line+0x1CC : 105672 >
  105654:    50 1b             	r0 *= r5			  ## ui_mask.c:755:28
  105656:    80 a9             	r0 = r0 >> 9			  ## ui_mask.c:755:44
  105658:    a1 e0 ff 00       	r1 = 0xFF - r0			  ## ui_mask.c:755:12
  10565c:    3a ea 02 00       	if ((r10 & 0x2) != 0) {			  ## ui_mask.c:755:12
  105660:    99 19             		r1 = ~r1
                               	}			  ## ui_mask.c:757:13
  105662:    d8 ee 90 08       	r0 = b[r9+r8] (u)			  ## ui_mask.c:759:18
  105666:    11 17             	r1 = r1.b0 (u)			  ## ui_mask.c:759:18
  105668:    80 ff 8c 29 00 00 	call 10636 <mask_mix : 107ffa >			  ## ui_mask.c:759:18
  10566e:    d8 ee 91 08       	b[r9+r8] = r0			  ## ui_mask.c:759:16
  105672:    a5 e0 ff 50       	r5 = 0xFF - r5			  ## ui_mask.c:748:14
  105676:    04 e1 01 80       	r4 = r8 + 1			  ## ui_mask.c:761:4
  10567a:    24 86             	goto 140 <mask_line+0x262 : 105708 >
  10567c:    f1 fe a5 fe       	ifs (r1 <= -1) goto 330 <mask_line+0x324 : 1057ca >
  105680:    50 f1 ff 20       	r0 = r2 ^ 0xFF  #			  ## ui_mask.c:931:21
  105684:    71 6a             		 r1 = [r7+40] 			  ## ui_mask.c:931:33
  105686:    01 1b             	r1 *= r0			  ## ui_mask.c:931:28
  105688:    c0 e1 1a cc       	r12 = r1 >>> 10			  ## ui_mask.c:931:43
  10568c:    84 fd 11 00       	ifs (r4 < 0) goto 34 <mask_line+0x20C : 1056b2 >
  105690:    03 ed 0f 40       	ifs (r4 >= r3) goto 30 <mask_line+0x20C : 1056b2 >
  105694:    c0 1b             	r0 *= r12			  ## ui_mask.c:933:26
  105696:    80 a9             	r0 = r0 >> 9			  ## ui_mask.c:933:41
  105698:    a1 e0 ff 00       	r1 = 0xFF - r0			  ## ui_mask.c:933:13
  10569c:    3a ea 02 00       	if ((r10 & 0x2) != 0) {			  ## ui_mask.c:933:13
  1056a0:    99 19             		r1 = ~r1
                               	}			  ## ui_mask.c:935:14
  1056a2:    d8 ee 90 04       	r0 = b[r9+r4] (u)			  ## ui_mask.c:937:19
  1056a6:    11 17             	r1 = r1.b0 (u)			  ## ui_mask.c:937:19
  1056a8:    80 ff 4c 29 00 00 	call 10572 <mask_mix : 107ffa >			  ## ui_mask.c:937:19
  1056ae:    d8 ee 91 04       	b[r9+r4] = r0			  ## ui_mask.c:937:17
  1056b2:    4e 81             	r6 = r4 + 1			  ## ui_mask.c:940:5
  1056b4:    86 fd 16 00       	ifs (r6 < 0) goto 44 <mask_line+0x23E : 1056e4 >
  1056b8:    03 ed 14 60       	ifs (r6 >= r3) goto 40 <mask_line+0x23E : 1056e4 >
  1056bc:    a1 f0 ff c0       	r1 = 0xFF - r12  #			  ## ui_mask.c:942:25
  1056c0:    70 69             		 r0 = [r7+36] 			  ## ui_mask.c:942:42
  1056c2:    10 1b             	r0 *= r1			  ## ui_mask.c:942:37
  1056c4:    50 ee b0 20       	r2 = b[r11+0] (u)			  ## ui_mask.c:945:12
  1056c8:    88 aa             	r0 = r0 >>> 10			  ## ui_mask.c:942:52
  1056ca:    10 1b             	r0 *= r1			  ## ui_mask.c:944:27
  1056cc:    81 a9             	r1 = r0 >> 9			  ## ui_mask.c:944:39
  1056ce:    32 ea 02 00       	if ((r2 & 0x2) != 0) {			  ## ui_mask.c:944:39
  1056d2:    99 19             		r1 = ~r1
                               	}			  ## ui_mask.c:946:14
  1056d4:    d8 ee 90 06       	r0 = b[r9+r6] (u)			  ## ui_mask.c:948:19
  1056d8:    11 17             	r1 = r1.b0 (u)			  ## ui_mask.c:948:19
  1056da:    80 ff 1a 29 00 00 	call 10522 <mask_mix : 107ffa >			  ## ui_mask.c:948:19
  1056e0:    d8 ee 91 06       	b[r9+r6] = r0			  ## ui_mask.c:948:17
  1056e4:    50 ee b0 00       	r0 = b[r11+0] (u)			  ## ui_mask.c:952:11
  1056e8:    50 e8 b1 0a       	if ((r0 & 2) != 0) goto 354 <mask_line+0x3A8 : 10584e >			  ## ui_mask.c:952:11
  1056ec:    48 82             	r0 = r4 + 2			  ## ui_mask.c:950:5
  1056ee:    35 e4 01 13       	r1 = smin(r0, r3)
  1056f2:    31 49             	if (r1 == 0) goto 210 <mask_line+0x320 : 1057c6 >
  1056f4:    46 22             	r6 = 2
  1056f6:    01 fd 47 02       	ifs (r1 >= 1) goto 142 <mask_line+0x2E2 : 105788 >
  1056fa:    64 80             	goto 384 <mask_line+0x3D6 : 10587c >
  1056fc:    b4 e0 02 85       	r8 = r0 - r5			  ## ui_mask.c:750:14
  105700:    06 e1 30 70       	r6 = r7 + 48			  ## ui_mask.c:750:14
  105704:    7d 3f             	r5 = 255			  ## ui_mask.c:750:14
  105706:    84 16             	r4 = r8
  105708:    60 60             	r0 = [r6+0] 
  10570a:    80 ee 18 50       	ifs (r5 <= r0) goto 48 <mask_line+0x298 : 10573e >
  10570e:    84 fd 12 00       	ifs (r4 < 0) goto 36 <mask_line+0x290 : 105736 >
  105712:    03 ed 10 40       	ifs (r4 >= r3) goto 32 <mask_line+0x290 : 105736 >
  105716:    50 ee b0 20       	r2 = b[r11+0] (u)			  ## ui_mask.c:767:11
  10571a:    80 a1             	r0 = r0 >> 1			  ## ui_mask.c:766:23
  10571c:    51 1e             	r1 = r5 - r0			  ## ui_mask.c:766:13
  10571e:    32 ea 02 00       	if ((r2 & 0x2) != 0) {			  ## ui_mask.c:766:13
  105722:    99 19             		r1 = ~r1
                               	}			  ## ui_mask.c:768:13
  105724:    d8 ee 90 04       	r0 = b[r9+r4] (u)			  ## ui_mask.c:770:18
  105728:    11 17             	r1 = r1.b0 (u)			  ## ui_mask.c:770:18
  10572a:    80 ff ca 28 00 00 	call 10442 <mask_mix : 107ffa >			  ## ui_mask.c:770:18
  105730:    d8 ee 91 04       	b[r9+r4] = r0			  ## ui_mask.c:770:16
  105734:    60 60             	r0 = [r6+0] 			  ## ui_mask.c:770:16
  105736:    c4 21             	r4 += 1			  ## ui_mask.c:773:4
  105738:    55 1e             	r5 = r5 - r0			  ## ui_mask.c:772:8
  10573a:    83 ed e6 41       	ifs (r4 < r3) goto -52 <mask_line+0x264 : 10570a >
  10573e:    03 ed 19 40       	ifs (r4 >= r3) goto 50 <mask_line+0x2CE : 105774 >
  105742:    84 fd 17 00       	ifs (r4 < 0) goto 46 <mask_line+0x2CE : 105774 >
  105746:    70 69             	r0 = [r7+36] 			  ## ui_mask.c:781:29
  105748:    50 db             	r0 *= r5  #			  ## ui_mask.c:781:24
  10574a:    72 6a             		 r2 = [r7+40] 			  ## ui_mask.c:783:10
  10574c:    88 aa             	r0 = r0 >>> 10			  ## ui_mask.c:781:39
  10574e:    50 1b             	r0 *= r5			  ## ui_mask.c:782:17
  105750:    81 a9             	r1 = r0 >> 9			  ## ui_mask.c:782:25
  105752:    b2 ed 00 00       	ifs (r2 < 0) {			  ## ui_mask.c:782:25
  105756:    99 19             		r1 = ~r1
                               	}			  ## ui_mask.c:784:12
  105758:    50 ee b0 00       	r0 = b[r11+0] (u)			  ## ui_mask.c:786:10
  10575c:    00 a6             	r0 = r0 << 6			  ## ui_mask.c:786:7
  10575e:    0a 17             	r2 = r0.b0 (s)			  ## ui_mask.c:786:7
  105760:    d8 ee 90 04       	r0 = b[r9+r4] (u)			  ## ui_mask.c:789:17
  105764:    a2 a7             	r2 = r2 >> 7			  ## ui_mask.c:786:7
  105766:    29 19             	r1 ^= r2			  ## ui_mask.c:786:7
  105768:    11 17             	r1 = r1.b0 (u)			  ## ui_mask.c:789:17
  10576a:    80 ff 8a 28 00 00 	call 10378 <mask_mix : 107ffa >			  ## ui_mask.c:789:17
  105770:    d8 ee 91 04       	b[r9+r4] = r0			  ## ui_mask.c:789:15
  105774:    50 ee b0 00       	r0 = b[r11+0] (u)			  ## ui_mask.c:793:9
  105778:    50 e8 0b 0a       	if ((r0 & 2) != 0) goto 22 <mask_line+0x2EC : 105792 >			  ## ui_mask.c:793:9
  10577c:    49 81             	r1 = r4 + 1			  ## ui_mask.c:802:4
  10577e:    81 fd 22 00       	ifs (r1 < 0) goto 68 <mask_line+0x320 : 1057c6 >
  105782:    46 22             	r6 = 2
  105784:    03 ee 7a 10       	ifs (r1 > r3) goto 244 <mask_line+0x3D6 : 10587c >
  105788:    b4 e0 90 01       	r0 = r9 + r1
  10578c:    3a 1e             	r2 = r3 - r1
  10578e:    41 20             	r1 = 0
  105790:    34 92             	goto 228 <mask_line+0x3D0 : 105876 >
  105792:    46 20             	r6 = 0
  105794:    03 ee 72 80       	ifs (r8 > r3) goto 228 <mask_line+0x3D6 : 10587c >
  105798:    46 22             	r6 = 2
  10579a:    88 fd 6f 00       	ifs (r8 < 0) goto 222 <mask_line+0x3D6 : 10587c >
  10579e:    41 20             	r1 = 0			  ## ui_basic.c:110:2
  1057a0:    90 16             	r0 = r9			  ## ui_basic.c:110:2
  1057a2:    82 16             	r2 = r8			  ## ui_basic.c:110:2
  1057a4:    34 88             	goto 208 <mask_line+0x3D0 : 105876 >			  ## ui_basic.c:110:2
  1057a6:    6a 1f             	r2 = r6 - r5			  ## ui_mask.c:868:12
  1057a8:    46 20             	r6 = 0
  1057aa:    83 ed 55 20       	ifs (r2 < r3) goto 170 <mask_line+0x3B2 : 105858 >
  1057ae:    34 86             	goto 204 <mask_line+0x3D6 : 10587c >
  1057b0:    82 fd 64 00       	ifs (r2 < 0) goto 200 <mask_line+0x3D6 : 10587c >
  1057b4:    a0 e0 00 50       	r0 = 0x0 - r5			  ## ui_mask.c:654:14
  1057b8:    80 fd 05 00       	ifs (r0 < 0) goto 10 <mask_line+0x320 : 1057c6 >
  1057bc:    46 22             	r6 = 2
  1057be:    80 ee 5d 30       	ifs (r3 <= r0) goto 186 <mask_line+0x3D6 : 10587c >
  1057c2:    90 18             	r0 += r9			  ## ui_mask.c:659:19
  1057c4:    f7 84             	goto -56 <mask_line+0x2E8 : 10578e >			  ## ui_mask.c:659:19
  1057c6:    46 20             	r6 = 0
  1057c8:    24 99             	goto 178 <mask_line+0x3D6 : 10587c >
  1057ca:    a1 f0 00 20       	r1 = 0x0 - r2  #			  ## ui_mask.c:890:23
  1057ce:    70 6a             		 r0 = [r7+40] 			  ## ui_mask.c:890:27
  1057d0:    10 1b             	r0 *= r1			  ## ui_mask.c:890:20
  1057d2:    c0 e1 0a cc       	r12 = r0 >>> 10			  ## ui_mask.c:890:38
  1057d6:    84 fd 10 00       	ifs (r4 < 0) goto 32 <mask_line+0x354 : 1057fa >
  1057da:    03 ed 0e 40       	ifs (r4 >= r3) goto 28 <mask_line+0x354 : 1057fa >
  1057de:    f0 e1 c0 02       	r0 = r12 * r2			  ## ui_mask.c:892:19
  1057e2:    81 a9             	r1 = r0 >> 9			  ## ui_mask.c:892:26
  1057e4:    3a ea 02 00       	if ((r10 & 0x2) != 0) {			  ## ui_mask.c:892:26
  1057e8:    99 19             		r1 = ~r1
                               	}			  ## ui_mask.c:894:14
  1057ea:    d8 ee 90 04       	r0 = b[r9+r4] (u)			  ## ui_mask.c:896:19
  1057ee:    11 17             	r1 = r1.b0 (u)			  ## ui_mask.c:896:19
  1057f0:    80 ff 04 28 00 00 	call 10244 <mask_mix : 107ffa >			  ## ui_mask.c:896:19
  1057f6:    d8 ee 91 04       	b[r9+r4] = r0			  ## ui_mask.c:896:17
  1057fa:    36 e1 ff 4f       	r6 = r4 + -1			  ## ui_mask.c:898:5
  1057fe:    86 fd 1a 00       	ifs (r6 < 0) goto 52 <mask_line+0x390 : 105836 >
  105802:    03 ed 18 60       	ifs (r6 >= r3) goto 48 <mask_line+0x390 : 105836 >
  105806:    a1 f0 ff c0       	r1 = 0xFF - r12  #			  ## ui_mask.c:900:25
  10580a:    70 69             		 r0 = [r7+36] 			  ## ui_mask.c:900:44
  10580c:    a2 e0 00 10       	r2 = 0x0 - r1			  ## ui_mask.c:900:40
  105810:    20 1b             	r0 *= r2			  ## ui_mask.c:900:37
  105812:    88 aa             	r0 = r0 >>> 10			  ## ui_mask.c:900:55
  105814:    50 ee b0 20       	r2 = b[r11+0] (u)			  ## ui_mask.c:904:12
  105818:    10 1b             	r0 *= r1			  ## ui_mask.c:903:34
  10581a:    80 a9             	r0 = r0 >> 9			  ## ui_mask.c:903:46
  10581c:    a1 e0 ff 00       	r1 = 0xFF - r0			  ## ui_mask.c:903:13
  105820:    32 ea 02 00       	if ((r2 & 0x2) != 0) {			  ## ui_mask.c:903:13
  105824:    99 19             		r1 = ~r1
                               	}			  ## ui_mask.c:905:14
  105826:    d8 ee 90 06       	r0 = b[r9+r6] (u)			  ## ui_mask.c:907:19
  10582a:    11 17             	r1 = r1.b0 (u)			  ## ui_mask.c:907:19
  10582c:    80 ff c8 27 00 00 	call 10184 <mask_mix : 107ffa >			  ## ui_mask.c:907:19
  105832:    d8 ee 91 06       	b[r9+r6] = r0			  ## ui_mask.c:907:17
  105836:    50 ee b0 00       	r0 = b[r11+0] (u)			  ## ui_mask.c:912:11
  10583a:    50 e8 11 0a       	if ((r0 & 2) != 0) goto 34 <mask_line+0x3BA : 105860 >			  ## ui_mask.c:912:11
  10583e:    49 81             	r1 = r4 + 1			  ## ui_mask.c:910:6
  105840:    46 21             	r6 = 1
  105842:    03 ee 1b 10       	ifs (r1 > r3) goto 54 <mask_line+0x3D6 : 10587c >
  105846:    46 22             	r6 = 2
  105848:    01 fd 9e 01       	ifs (r1 >= 0) goto -196 <mask_line+0x2E2 : 105788 >
  10584c:    04 97             	goto 46 <mask_line+0x3D6 : 10587c >
  10584e:    b4 e0 f2 25       	r2 = r15 - r5			  ## ui_mask.c:953:13
  105852:    46 20             	r6 = 0
  105854:    03 ee 12 20       	ifs (r2 > r3) goto 36 <mask_line+0x3D6 : 10587c >
  105858:    46 22             	r6 = 2
  10585a:    02 fd 0a 00       	ifs (r2 >= 0) goto 20 <mask_line+0x3CC : 105872 >
  10585e:    04 8e             	goto 28 <mask_line+0x3D6 : 10587c >
  105860:    b4 e0 f2 05       	r0 = r15 - r5			  ## ui_mask.c:913:13
  105864:    32 e1 ff 0f       	r2 = r0 + -1			  ## ui_mask.c:913:21
  105868:    46 22             	r6 = 2
  10586a:    03 ee 07 20       	ifs (r2 > r3) goto 14 <mask_line+0x3D6 : 10587c >
  10586e:    82 fd 05 02       	ifs (r2 < 1) goto 10 <mask_line+0x3D6 : 10587c >
  105872:    41 20             	r1 = 0
  105874:    90 16             	r0 = r9
  105876:    80 ff 04 a5 f1 ff 	call -940796 <memset : 1fd80 >
  10587c:    60 17             	r0 = r6.b0 (u)			  ## ui_mask.c:690:1
  10587e:    02 81             	sp += 4			  ## ui_mask.c:690:1
  105880:    5f 04             	{pc, r15-r4} = [sp++]			  ## ui_mask.c:690:1


mask_angle:
  105882:    7d 04             	[--sp] = {rets, r13-r4}			  ## ui_mask.c:453:0
  105884:    e2 9f             	sp += -4			  ## ui_mask.c:453:0
  105886:    d4 e9 30 d0       	r13 = [sp+48]			  ## ui_mask.c:453:0
  10588a:    d0 ec d8 50       	r5 = [r13+8]			  ## ui_mask.c:455:38
  10588e:    d0 ec dc 40       	r4 = [r13+12]			  ## ui_mask.c:454:38
  105892:    d0 ec d0 61       	r6 = [r13+16]			  ## ui_mask.c:457:13
  105896:    38 16             	r8 = r3			  ## ui_mask.c:457:13
  105898:    2b 16             	r11 = r2
  10589a:    1a 16             	r10 = r1
  10589c:    09 16             	r9 = r0
  10589e:    b4 e0 52 c1       	r12 = r5 - r1
  1058a2:    22 1f             	r2 = r2 - r4			  ## ui_mask.c:454:20
  1058a4:    16 fe 37 66       	ifs (r6 > 179) goto 110 <mask_angle+0x94 : 105916 >			  ## ui_mask.c:457:31
  1058a8:    45 21             	r5 = 1
  1058aa:    43 21             	r3 = 1
  1058ac:    94 ee 00 0b       	ifs (r4 <= r11) {
  1058b0:    43 20             		r3 = 0
                               	}
  1058b2:    d0 ec d4 11       	r1 = [r13+20]			  ## ui_mask.c:457:41
  1058b6:    40 21             	r0 = 1			  ## ui_mask.c:457:51
  1058b8:    31 ed b4 00       	ifs (r1 >= 180) {			  ## ui_mask.c:457:51
  1058bc:    40 20             		r0 = 0
                               	}			  ## ui_mask.c:457:51
  1058be:    47 21             	r7 = 1			  ## ui_mask.c:458:25
  1058c0:    86 41             	if (r6 != 0) goto 2 <mask_angle+0x42 : 1058c4 >			  ## ui_mask.c:458:25
  1058c2:    67 16             	r7 = r6			  ## ui_mask.c:458:25
  1058c4:    f0 19             	r0 &= r7			  ## ui_mask.c:457:57
  1058c6:    81 41             	if (r1 != 0) goto 2 <mask_angle+0x48 : 1058ca >			  ## ui_mask.c:457:57
  1058c8:    15 16             	r5 = r1			  ## ui_mask.c:458:51
  1058ca:    81 ee 2b 60       	ifs (r6 <= r1) goto 86 <mask_angle+0xA2 : 105924 >
  1058ce:    d0 19             	r0 &= r5			  ## ui_mask.c:457:57
  1058d0:    10 49             	if (r0 == 0) goto 82 <mask_angle+0xA2 : 105924 >			  ## ui_mask.c:457:57
  1058d2:    45 21             	r5 = 1
  1058d4:    4c ff 00 4b 07 01 	ifs (r4 > r11) goto 526 <mask_angle+0x266 : 105ae8 >
  1058da:    d0 ec dc 03       	r0 = [r13+60]			  ## ui_mask.c:466:55
  1058de:    d0 ec d4 37       	r3 = [r13+116]			  ## ui_mask.c:465:46
  1058e2:    2c 81             	r4 = r2 + 1			  ## ui_mask.c:466:34
  1058e4:    40 1b             	r0 *= r4			  ## ui_mask.c:466:39
  1058e6:    8c aa             	r4 = r0 >>> 10			  ## ui_mask.c:466:65
  1058e8:    23 1b             	r3 *= r2			  ## ui_mask.c:465:32
  1058ea:    86 fd 0a 02       	ifs (r6 < 1) goto 20 <mask_angle+0x80 : 105902 >			  ## ui_mask.c:465:32
  1058ee:    06 fe 03 b4       	ifs (r6 > 90) goto 6 <mask_angle+0x76 : 1058f8 >
  1058f2:    42 20             	r2 = 0
  1058f4:    84 fd 06 00       	ifs (r4 < 0) goto 12 <mask_angle+0x82 : 105904 >
  1058f8:    c8 bf             	r0 = r4 >>> 31			  ## ui_mask.c:472:66
  1058fa:    90 e1 02 24       	r2 = r0 & r4			  ## ui_mask.c:472:66
  1058fe:    06 fe 01 b4       	ifs (r6 > 90) goto 2 <mask_angle+0x82 : 105904 >			  ## ui_mask.c:472:66
  105902:    42 16             	r2 = r4
  105904:    bb aa             	r3 = r3 >>> 10			  ## ui_mask.c:465:56
  105906:    a1 fd a8 1e       	ifs (r1 < 271) goto 336 <mask_angle+0x1D8 : 105a5a >			  ## ui_mask.c:476:30
  10590a:    72 fe af fe       	ifs (r2 > -1) goto 350 <mask_angle+0x1EA : 105a6c >
  10590e:    44 20             	r4 = 0
  105910:    a1 fd b3 d0       	ifs (r1 < 360) goto 358 <mask_angle+0x1F8 : 105a7a >
  105914:    54 8b             	goto 342 <mask_angle+0x1EA : 105a6c >
  105916:    96 f8 0c 68       	if (r6 != 180) goto 24 <mask_angle+0xB0 : 105932 >
  10591a:    47 21             	r7 = 1			  ## ui_mask.c:580:4
  10591c:    94 ee 00 0b       	ifs (r4 <= r11) {			  ## ui_mask.c:580:4
  105920:    47 23             		r7 = 3
                               	}			  ## ui_mask.c:580:4
  105922:    34 82             	goto 196 <mask_angle+0x166 : 1059e8 >			  ## ui_mask.c:580:4
  105924:    40 21             	r0 = 1
  105926:    a6 46             	if (r6 != 0) goto 140 <mask_angle+0x132 : 1059b4 >
  105928:    47 23             	r7 = 3			  ## ui_mask.c:586:4
  10592a:    94 ee 00 0b       	ifs (r4 <= r11) {			  ## ui_mask.c:586:4
  10592e:    47 21             		r7 = 1
                               	}			  ## ui_mask.c:586:4
  105930:    24 9b             	goto 182 <mask_angle+0x166 : 1059e8 >			  ## ui_mask.c:586:4
  105932:    d0 ec d4 11       	r1 = [r13+20]			  ## ui_mask.c:516:48
  105936:    91 fd 38 6a       	ifs (r1 < 181) goto 112 <mask_angle+0x128 : 1059aa >			  ## ui_mask.c:516:48
  10593a:    81 ee 36 60       	ifs (r6 <= r1) goto 108 <mask_angle+0x128 : 1059aa >
  10593e:    45 21             	r5 = 1
  105940:    8b ed d2 40       	ifs (r4 < r11) goto 420 <mask_angle+0x266 : 105ae8 >
  105944:    d0 ec dc 03       	r0 = [r13+60]			  ## ui_mask.c:523:55
  105948:    d0 ec d4 37       	r3 = [r13+116]			  ## ui_mask.c:522:46
  10594c:    2c 81             	r4 = r2 + 1			  ## ui_mask.c:523:34
  10594e:    40 1b             	r0 *= r4			  ## ui_mask.c:523:39
  105950:    8c aa             	r4 = r0 >>> 10			  ## ui_mask.c:523:65
  105952:    23 1b             	r3 *= r2			  ## ui_mask.c:522:32
  105954:    a6 fd 05 1e       	ifs (r6 < 271) goto 10 <mask_angle+0xE0 : 105962 >			  ## ui_mask.c:522:32
  105958:    26 fe 03 ce       	ifs (r6 > 359) goto 6 <mask_angle+0xE0 : 105962 >
  10595c:    42 20             	r2 = 0
  10595e:    84 fd 07 00       	ifs (r4 < 0) goto 14 <mask_angle+0xEE : 105970 >
  105962:    42 20             	r2 = 0			  ## ui_mask.c:529:86
  105964:    36 ed 0e 01       	ifs (r6 >= 270) {
  105968:    42 16             		r2 = r4
                               	}			  ## ui_mask.c:529:66
  10596a:    b4 ee 00 00       	ifs (r4 <= 0) {			  ## ui_mask.c:529:66
  10596e:    42 16             		r2 = r4
                               	}			  ## ui_mask.c:529:66
  105970:    bb aa             	r3 = r3 >>> 10			  ## ui_mask.c:522:56
  105972:    a1 fd 05 1e       	ifs (r1 < 271) goto 10 <mask_angle+0xFE : 105980 >
  105976:    72 fe 03 fe       	ifs (r2 > -1) goto 6 <mask_angle+0xFE : 105980 >
  10597a:    44 20             	r4 = 0
  10597c:    a1 fd 07 d0       	ifs (r1 < 360) goto 14 <mask_angle+0x10C : 10598e >
  105980:    44 20             	r4 = 0			  ## ui_mask.c:537:83
  105982:    31 ed 0e 01       	ifs (r1 >= 270) {
  105986:    24 16             		r4 = r2
                               	}			  ## ui_mask.c:537:63
  105988:    b2 ee 00 00       	ifs (r2 <= 0) {			  ## ui_mask.c:537:63
  10598c:    24 16             		r4 = r2
                               	}			  ## ui_mask.c:537:63
  10598e:    b4 e0 40 0c       	r0 = r4 + r12			  ## ui_mask.c:546:30
  105992:    31 1f             	r1 = r3 - r4			  ## ui_mask.c:541:31
  105994:    99 a1             	r1 = r1 >>> 1			  ## ui_mask.c:541:51
  105996:    10 18             	r0 += r1			  ## ui_mask.c:546:37
  105998:    35 e4 01 78       	r7 = smin(r0, r8)			  ## ui_mask.c:547:7
  10599c:    04 e1 18 d0       	r4 = r13 + 24			  ## ui_mask.c:523:44
  1059a0:    87 fd 88 02       	ifs (r7 < 1) goto 272 <mask_angle+0x232 : 105ab4 >
  1059a4:    00 e1 50 d0       	r0 = r13 + 80			  ## ui_mask.c:522:37
  1059a8:    34 95             	goto 234 <mask_angle+0x212 : 105a94 >			  ## ui_mask.c:522:37
  1059aa:    40 20             	r0 = 0
  1059ac:    43 21             	r3 = 1
  1059ae:    94 ee 00 0b       	ifs (r4 <= r11) {
  1059b2:    43 20             		r3 = 0
                               	}
  1059b4:    41 21             	r1 = 1
  1059b6:    42 21             	r2 = 1			  ## ui_mask.c:590:49
  1059b8:    94 ee 00 0b       	ifs (r4 <= r11) {
  1059bc:    42 20             		r2 = 0
                               	}			  ## ui_mask.c:590:49
  1059be:    20 19             	r0 |= r2			  ## ui_mask.c:590:40
  1059c0:    b6 ee b3 00       	ifs (r6 <= 179) {			  ## ui_mask.c:590:40
  1059c4:    41 20             		r1 = 0
                               	}			  ## ui_mask.c:457:25
  1059c6:    47 23             	r7 = 3			  ## ui_mask.c:457:25
  1059c8:    80 f8 0e 02       	if (r0 != 1) goto 28 <mask_angle+0x166 : 1059e8 >			  ## ui_mask.c:457:25
  1059cc:    50 e1 01 30       	r0 = r3 ^ 0x1			  ## ui_mask.c:589:40
  1059d0:    10 19             	r0 |= r1			  ## ui_mask.c:589:40
  1059d2:    00 4a             	if (r0 == 0) goto 20 <mask_angle+0x166 : 1059e8 >			  ## ui_mask.c:589:40
  1059d4:    00 e1 18 d0       	r0 = r13 + 24			  ## ui_mask.c:593:54
  1059d8:    90 d6             	r0 = r9  #			  ## ui_mask.c:593:11
  1059da:    80 20             		 [sp] = r0			  ## ui_mask.c:593:11
  1059dc:    a1 16             	r1 = r10			  ## ui_mask.c:593:11
  1059de:    b2 16             	r2 = r11			  ## ui_mask.c:593:11
  1059e0:    83 16             	r3 = r8			  ## ui_mask.c:593:11
  1059e2:    bf ea 60 fd       	call -1344 <mask_line : 1054a6 >			  ## ui_mask.c:593:11
  1059e6:    07 16             	r7 = r0			  ## ui_mask.c:593:11
  1059e8:    d0 ec d4 01       	r0 = [r13+20]			  ## ui_mask.c:596:14
  1059ec:    00 49             	if (r0 == 0) goto 18 <mask_angle+0x17E : 105a00 >			  ## ui_mask.c:596:7
  1059ee:    90 f8 0e 68       	if (r0 != 180) goto 28 <mask_angle+0x18C : 105a0e >
  1059f2:    d0 ec dc 10       	r1 = [r13+12]			  ## ui_mask.c:597:32
  1059f6:    40 23             	r0 = 3			  ## ui_mask.c:599:4
  1059f8:    91 ee 00 0b       	ifs (r1 <= r11) {			  ## ui_mask.c:599:4
  1059fc:    40 21             		r0 = 1
                               	}			  ## ui_mask.c:599:4
  1059fe:    04 9f             	goto 62 <mask_angle+0x1BC : 105a3e >			  ## ui_mask.c:599:4
  105a00:    d0 ec dc 10       	r1 = [r13+12]			  ## ui_mask.c:603:32
  105a04:    40 21             	r0 = 1			  ## ui_mask.c:605:4
  105a06:    91 ee 00 0b       	ifs (r1 <= r11) {			  ## ui_mask.c:605:4
  105a0a:    40 23             		r0 = 3
                               	}			  ## ui_mask.c:605:4
  105a0c:    04 98             	goto 48 <mask_angle+0x1BC : 105a3e >			  ## ui_mask.c:605:4
  105a0e:    10 fe 06 66       	ifs (r0 > 179) goto 12 <mask_angle+0x19C : 105a1e >			  ## ui_mask.c:608:38
  105a12:    d0 ec dc 10       	r1 = [r13+12]			  ## ui_mask.c:608:65
  105a16:    40 23             	r0 = 3			  ## ui_mask.c:608:65
  105a18:    8b ee 08 10       	ifs (r1 <= r11) goto 16 <mask_angle+0x1AA : 105a2c >			  ## ui_mask.c:608:65
  105a1c:    04 90             	goto 32 <mask_angle+0x1BC : 105a3e >			  ## ui_mask.c:608:65
  105a1e:    10 f8 05 68       	if (r0 == 180) goto 10 <mask_angle+0x1AA : 105a2c >
  105a22:    d0 ec dc 10       	r1 = [r13+12]			  ## ui_mask.c:609:66
  105a26:    40 23             	r0 = 3			  ## ui_mask.c:609:66
  105a28:    8b ee 09 10       	ifs (r1 <= r11) goto 18 <mask_angle+0x1BC : 105a3e >			  ## ui_mask.c:609:66
  105a2c:    00 e1 50 d0       	r0 = r13 + 80			  ## ui_mask.c:612:54
  105a30:    90 d6             	r0 = r9  #			  ## ui_mask.c:612:11
  105a32:    80 20             		 [sp] = r0			  ## ui_mask.c:612:11
  105a34:    a1 16             	r1 = r10			  ## ui_mask.c:612:11
  105a36:    b2 16             	r2 = r11			  ## ui_mask.c:612:11
  105a38:    83 16             	r3 = r8			  ## ui_mask.c:612:11
  105a3a:    bf ea 34 fd       	call -1432 <mask_line : 1054a6 >			  ## ui_mask.c:612:11
  105a3e:    45 20             	r5 = 0
  105a40:    27 53             	if (r7 == 0) goto 166 <mask_angle+0x266 : 105ae8 >
  105a42:    20 52             	if (r0 == 0) goto 164 <mask_angle+0x266 : 105ae8 >
  105a44:    87 f8 02 06       	if (r7 != 3) goto 4 <mask_angle+0x1CA : 105a4c >
  105a48:    00 f8 4e 06       	if (r0 == 3) goto 156 <mask_angle+0x266 : 105ae8 >
  105a4c:    b0 e8 01 00       	if (r0 != 1) {
  105a50:    40 22             		r0 = 2
                               	}			  ## ui_mask.c:619:42
  105a52:    b7 e8 01 00       	if (r7 != 1) {			  ## ui_mask.c:619:42
  105a56:    40 22             		r0 = 2
                               	}			  ## ui_mask.c:619:42
  105a58:    24 88             	goto 144 <mask_angle+0x268 : 105aea >			  ## ui_mask.c:619:42
  105a5a:    81 fd 0d 02       	ifs (r1 < 1) goto 26 <mask_angle+0x1F6 : 105a78 >
  105a5e:    72 fe 03 fe       	ifs (r2 > -1) goto 6 <mask_angle+0x1E6 : 105a68 >
  105a62:    44 20             	r4 = 0
  105a64:    81 fd 09 b6       	ifs (r1 < 91) goto 18 <mask_angle+0x1F8 : 105a7a >
  105a68:    81 fd 06 b6       	ifs (r1 < 91) goto 12 <mask_angle+0x1F6 : 105a78 >
  105a6c:    44 20             	r4 = 0			  ## ui_mask.c:480:83
  105a6e:    31 ed 0e 01       	ifs (r1 >= 270) {
  105a72:    24 16             		r4 = r2
                               	}			  ## ui_mask.c:480:63
  105a74:    02 fe 01 00       	ifs (r2 > 0) goto 2 <mask_angle+0x1F8 : 105a7a >			  ## ui_mask.c:480:63
  105a78:    24 16             	r4 = r2
  105a7a:    b4 e0 40 0c       	r0 = r4 + r12			  ## ui_mask.c:490:30
  105a7e:    31 1f             	r1 = r3 - r4			  ## ui_mask.c:485:31
  105a80:    99 a1             	r1 = r1 >>> 1			  ## ui_mask.c:485:51
  105a82:    10 18             	r0 += r1			  ## ui_mask.c:490:37
  105a84:    35 e4 01 78       	r7 = smin(r0, r8)			  ## ui_mask.c:491:7
  105a88:    04 e1 50 d0       	r4 = r13 + 80			  ## ui_mask.c:465:37
  105a8c:    87 fd 12 02       	ifs (r7 < 1) goto 36 <mask_angle+0x232 : 105ab4 >
  105a90:    00 e1 18 d0       	r0 = r13 + 24			  ## ui_mask.c:466:44
  105a94:    90 d6             	r0 = r9  #
  105a96:    80 20             		 [sp] = r0
  105a98:    a1 16             	r1 = r10
  105a9a:    b2 16             	r2 = r11
  105a9c:    73 16             	r3 = r7
  105a9e:    bf ea 02 fd       	call -1532 <mask_line : 1054a6 >
  105aa2:    05 16             	r5 = r0
  105aa4:    85 47             	if (r5 != 0) goto 14 <mask_angle+0x232 : 105ab4 >
  105aa6:    41 20             	r1 = 0
  105aa8:    45 20             	r5 = 0
  105aaa:    90 16             	r0 = r9
  105aac:    72 16             	r2 = r7
  105aae:    80 ff cc a2 f1 ff 	call -941364 <memset : 1fd80 >
  105ab4:    84 20             	[sp] = r4
  105ab6:    b7 ee 00 00       	ifs (r7 <= 0) {
  105aba:    47 20             		r7 = 0
                               	}
  105abc:    b4 e0 90 67       	r6 = r9 + r7
  105ac0:    b4 e0 70 1a       	r1 = r7 + r10
  105ac4:    b4 e0 82 77       	r7 = r8 - r7
  105ac8:    60 16             	r0 = r6
  105aca:    b2 16             	r2 = r11
  105acc:    73 16             	r3 = r7
  105ace:    bf ea ea fc       	call -1580 <mask_line : 1054a6 >
  105ad2:    04 16             	r4 = r0
  105ad4:    84 46             	if (r4 != 0) goto 12 <mask_angle+0x260 : 105ae2 >
  105ad6:    41 20             	r1 = 0
  105ad8:    60 16             	r0 = r6
  105ada:    72 16             	r2 = r7
  105adc:    80 ff 9e a2 f1 ff 	call -941410 <memset : 1fd80 >
  105ae2:    95 e8 00 04       	if (r5 != r4) {
  105ae6:    45 22             		r5 = 2
                               	}
  105ae8:    50 16             	r0 = r5			  ## ui_mask.c:625:1
  105aea:    02 81             	sp += 4
  105aec:    5d 04             	{pc, r13-r4} = [sp++]


_sqrt:
  105aee:    75 04             	[--sp] = {rets, r5, r4}			  ## ui_math.c:49:0
  105af0:    03 a8             	r3 = r0 << 8			  ## ui_math.c:61:8
  105af2:    40 20             	r0 = 0
  105af4:    84 1c             	r4 = r0 + r2			  ## ui_math.c:66:16
  105af6:    f0 e1 40 54       	r5 = r4 * r4			  ## ui_math.c:67:18
  105afa:    95 ec 00 03       	if (r5 <= r3) {			  ## ui_math.c:67:18
  105afe:    40 16             		r0 = r4
                               	}			  ## ui_math.c:67:7
  105b00:    a2 a1             	r2 = r2 >> 1			  ## ui_math.c:70:15
  105b02:    f2 58             	if (r2 != 0) goto -16 <_sqrt+0x6 : 105af4 >
  105b04:    82 a4             	r2 = r0 >> 4			  ## ui_math.c:73:20
  105b06:    00 a4             	r0 = r0 << 4			  ## ui_math.c:74:9
  105b08:    00 d7             	r0 = r0.b0 (u)  #			  ## ui_math.c:74:9
  105b0a:    9a 60             		 h[r1+0] = r2			  ## ui_math.c:73:7
  105b0c:    98 61             	h[r1+2] = r0			  ## ui_math.c:74:7
  105b0e:    55 04             	{pc, r5, r4} = [sp++]			  ## ui_math.c:76:1


mask_radius:
  105b10:    7f 04             	[--sp] = {rets, r15-r4}			  ## ui_mask.c:184:0
  105b12:    e2 91             	sp += -60			  ## ui_mask.c:184:0
  105b14:    3d d6             	r13 = r3  #			  ## ui_mask.c:184:0
  105b16:    04 3c             		 r4 = [sp+112]			  ## ui_mask.c:184:0
  105b18:    4f 88             	r7 = r4 + 8			  ## ui_mask.c:184:0
  105b1a:    d0 ec 70 a1       	r10 = [r7+16]			  ## ui_mask.c:186:22
  105b1e:    50 ee 4c 41       	r4 = b[r4+28] (u)			  ## ui_mask.c:185:22
  105b22:    25 16             	r5 = r2
  105b24:    1c 16             	r12 = r1
  105b26:    09 16             	r9 = r0
  105b28:    a8 8c             	r0 = sp + 44
  105b2a:    71 16             	r1 = r7			  ## ui_mask.c:188:2
  105b2c:    80 ff 96 1e 00 00 	call 7830 <area_copy.57 : 1079c8 >			  ## ui_mask.c:188:2
  105b32:    00 2c             	r0 = [sp+48]
  105b34:    34 ea 01 10       	if ((r4 & 0x1) != 0) {
  105b38:    46 21             		r6 = 1
                               	} else {
  105b3a:    46 20             		r6 = 0
                               	}
  105b3c:    05 ee 03 00       	ifs (r0 > r5) goto 6 <mask_radius+0x36 : 105b46 >
  105b40:    01 2e             	r1 = [sp+56]
  105b42:    05 ed 03 10       	ifs (r1 >= r5) goto 6 <mask_radius+0x3C : 105b4c >
  105b46:    60 17             	r0 = r6.b0 (u)			  ## ui_mask.c:449:1
  105b48:    02 8f             	sp += 60			  ## ui_mask.c:449:1
  105b4a:    5f 04             	{pc, r15-r4} = [sp++]			  ## ui_mask.c:449:1
  105b4c:    d4 e9 2c b0       	r11 = [sp+44]			  ## ui_mask.c:201:21
  105b50:    b4 e0 b0 2a       	r2 = r11 + r10			  ## ui_mask.c:201:24
  105b54:    73 e1 fe 40       	r3 = r4 & 0xFFFFFF01			  ## ui_mask.c:185:22
  105b58:    83 25             	[sp+20] = r3			  ## ui_mask.c:201:33
  105b5a:    0c ee 07 20       	ifs (r2 > r12) goto 14 <mask_radius+0x5C : 105b6c >			  ## ui_mask.c:201:33
  105b5e:    02 2d             	r2 = [sp+52]			  ## ui_mask.c:201:56
  105b60:    b4 e0 22 2a       	r2 = r2 - r10			  ## ui_mask.c:201:59
  105b64:    b4 e0 d0 3c       	r3 = r13 + r12			  ## ui_mask.c:201:42
  105b68:    82 ee 08 30       	ifs (r3 <= r2) goto 16 <mask_radius+0x6C : 105b7c >			  ## ui_mask.c:201:42
  105b6c:    b4 e0 00 2a       	r2 = r0 + r10			  ## ui_mask.c:202:24
  105b70:    05 ee 29 20       	ifs (r2 > r5) goto 82 <mask_radius+0xB6 : 105bc6 >			  ## ui_mask.c:202:24
  105b74:    b4 e0 12 2a       	r2 = r1 - r10			  ## ui_mask.c:202:53
  105b78:    85 ed 25 20       	ifs (r2 < r5) goto 74 <mask_radius+0xB6 : 105bc6 >			  ## ui_mask.c:202:53
  105b7c:    b4 f0 b2 7c       	r7 = r11 - r12  #
  105b80:    00 25             		 r0 = [sp+20]			  ## ui_mask.c:203:7
  105b82:    90 5b             	if (r0 != 0) goto 118 <mask_radius+0xEA : 105bfa >			  ## ui_mask.c:203:7
  105b84:    46 20             	r6 = 0
  105b86:    0d ee de 71       	ifs (r7 > r13) goto -68 <mask_radius+0x36 : 105b46 >
  105b8a:    37 ed 00 c0       	ifs (r7 >= 0) {
  105b8e:    41 20             		r1 = 0			  ## ui_basic.c:110:2
  105b90:    90 16             		r0 = r9			  ## ui_basic.c:110:2
  105b92:    72 16             		r2 = r7			  ## ui_basic.c:110:2
  105b94:    80 ff e6 a1 f1 ff 		call -941594
                               	} <memset : 1fd80 >			  ## ui_basic.c:110:2
  105b9a:    00 2d             	r0 = [sp+52]			  ## ui_mask.c:212:21
  105b9c:    b4 e0 02 0c       	r0 = r0 - r12			  ## ui_mask.c:212:24
  105ba0:    0c 81             	r4 = r0 + 1			  ## ui_mask.c:212:32
  105ba2:    84 fd d0 03       	ifs (r4 < 1) goto -96 <mask_radius+0x36 : 105b46 >
  105ba6:    94 ed 00 cd       	ifs (r4 < r13) {
  105baa:    b4 e0 90 04       		r0 = r9 + r4			  ## ui_mask.c:216:17
  105bae:    b4 e0 d2 24       		r2 = r13 - r4			  ## ui_mask.c:216:38
  105bb2:    41 20             		r1 = 0			  ## ui_basic.c:110:2
  105bb4:    80 ff c6 a1 f1 ff 		call -941626
                               	} <memset : 1fd80 >			  ## ui_basic.c:110:2
  105bba:    46 21             	r6 = 1
  105bbc:    94 e8 00 0d       	if (r4 != r13) {
  105bc0:    46 22             		r6 = 2
                               	}			  ## ui_mask.c:218:18
  105bc2:    67 41             	if (r7 == 0) goto -126 <mask_radius+0x36 : 105b46 >			  ## ui_mask.c:218:18
  105bc4:    05 90             	goto 1056 <mask_radius+0x4D6 : 105fe6 >			  ## ui_mask.c:218:18
  105bc6:    52 de             	r2 = r5 - r0  #			  ## ui_mask.c:245:8
  105bc8:    73 64             		 r3 = [r7+16] 			  ## ui_mask.c:247:18
  105bca:    d4 e9 34 80       	r8 = [sp+52]			  ## ui_mask.h:134:23
  105bce:    f0 e1 30 53       	r5 = r3 * r3			  ## ui_mask.c:247:25
  105bd2:    82 ee 2e a0       	ifs (r10 <= r2) goto 92 <mask_radius+0x122 : 105c32 >
  105bd6:    46 e0 00 08       	r6 = 2048 <WOLASynthesisFilter_Float_M64_m4_r1+0x3FC : 800 >			  ## ui_mask.c:255:7
  105bda:    3a ed 01 01       	ifs (r10 >= 257) {
  105bde:    60 e0 00 6c       		r6 = 0x8000
                               	}			  ## ui_mask.c:255:7
  105be2:    b4 f0 a2 f2       	r15 = r10 - r2  #			  ## ui_mask.c:265:15
  105be6:    70 66             		 r0 = [r7+24] 			  ## ui_mask.c:267:16
  105be8:    80 e8 3f f0       	if (r15 != r0) goto 126 <mask_radius+0x15A : 105c6a >			  ## ui_mask.c:267:8
  105bec:    78 6f             	r0 = h[r7+30] (u)			  ## ui_mask.c:268:24
  105bee:    d8 e9 2b 00       	h[sp+42] = r0			  ## ui_mask.c:268:10
  105bf2:    78 6e             	r0 = h[r7+28] (u)			  ## ui_mask.c:269:24
  105bf4:    d8 e9 29 00       	h[sp+40] = r0			  ## ui_mask.c:269:10
  105bf8:    14 9f             	goto 126 <mask_radius+0x168 : 105c78 >			  ## ui_mask.c:269:10
  105bfa:    b7 ee 00 00       	ifs (r7 <= 0) {
  105bfe:    47 20             		r7 = 0
                               	}			  ## ui_mask.c:225:8
  105c00:    46 22             	r6 = 2
  105c02:    0d ee a0 71       	ifs (r7 > r13) goto -192 <mask_radius+0x36 : 105b46 >
  105c06:    b4 f0 d2 27       	r2 = r13 - r7  #			  ## ui_mask.c:231:17
  105c0a:    01 2d             		 r1 = [sp+52]			  ## ui_mask.c:229:22
  105c0c:    b4 e0 70 0c       	r0 = r7 + r12			  ## ui_mask.c:229:25
  105c10:    1b 81             	r3 = r1 + 1			  ## ui_mask.c:229:33
  105c12:    30 1e             	r0 = r3 - r0			  ## ui_mask.c:229:41
  105c14:    b4 e0 12 1c       	r1 = r1 - r12			  ## ui_mask.c:229:25
  105c18:    c1 21             	r1 += 1			  ## ui_mask.c:230:15
  105c1a:    91 ee 00 0d       	ifs (r1 <= r13) {			  ## ui_mask.c:230:15
  105c1e:    02 16             		r2 = r0
                               	}			  ## ui_mask.c:230:9
  105c20:    82 fd 91 01       	ifs (r2 < 0) goto -222 <mask_radius+0x36 : 105b46 >
  105c24:    b4 e0 90 07       	r0 = r9 + r7			  ## ui_mask.c:234:18
  105c28:    41 20             	r1 = 0			  ## ui_basic.c:110:2
  105c2a:    80 ff 50 a1 f1 ff 	call -941744 <memset : 1fd80 >			  ## ui_basic.c:110:2
  105c30:    c7 8a             	goto -236 <mask_radius+0x36 : 105b46 >
  105c32:    c1 21             	r1 += 1			  ## ui_mask.h:139:26
  105c34:    10 1e             	r0 = r1 - r0			  ## ui_mask.h:139:39
  105c36:    51 e1 ff a3       	r1 = r10 ^ 0xFFFFFFFF			  ## ui_mask.c:249:34
  105c3a:    01 18             	r1 += r0			  ## ui_mask.c:249:43
  105c3c:    46 22             	r6 = 2			  ## ui_mask.c:249:43
  105c3e:    81 ee 82 21       	ifs (r2 <= r1) goto -252 <mask_radius+0x36 : 105b46 >			  ## ui_mask.c:249:43
  105c42:    46 e0 00 08       	r6 = 2048 <WOLASynthesisFilter_Float_M64_m4_r1+0x3FC : 800 >			  ## ui_mask.c:255:7
  105c46:    3a ed 01 01       	ifs (r10 >= 257) {			  ## ui_mask.c:255:7
  105c4a:    60 e0 00 6c       		r6 = 0x8000
                               	}			  ## ui_mask.c:255:7
  105c4e:    20 de             	r0 = r2 - r0  #			  ## ui_mask.c:278:15
  105c50:    71 66             		 r1 = [r7+24] 			  ## ui_mask.c:280:22
  105c52:    a0 18             	r0 += r10			  ## ui_mask.c:278:15
  105c54:    0f e1 01 00       	r15 = r0 + 1			  ## ui_mask.c:278:29
  105c58:    81 e8 1b 00       	if (r0 != r1) goto 54 <mask_radius+0x182 : 105c92 >
  105c5c:    78 6f             	r0 = h[r7+30] (u)			  ## ui_mask.c:281:24
  105c5e:    d8 e9 27 00       	h[sp+38] = r0			  ## ui_mask.c:281:10
  105c62:    78 6e             	r0 = h[r7+28] (u)			  ## ui_mask.c:282:24
  105c64:    d8 e9 25 00       	h[sp+36] = r0			  ## ui_mask.c:282:10
  105c68:    04 9a             	goto 52 <mask_radius+0x18E : 105c9e >			  ## ui_mask.c:282:10
  105c6a:    f0 e1 f0 0f       	r0 = r15 * r15			  ## ui_mask.c:271:19
  105c6e:    50 1e             	r0 = r5 - r0			  ## ui_mask.c:271:14
  105c70:    a9 88             	r1 = sp + 40			  ## ui_mask.c:271:14
  105c72:    62 16             	r2 = r6			  ## ui_mask.c:271:5
  105c74:    bf ea 3b ff       	call -394 <_sqrt : 105aee >			  ## ui_mask.c:271:5
  105c78:    d4 e9 19 d0       	[sp+24] = r13
  105c7c:    34 e1 ff ff       	r4 = r15 + -1			  ## ui_mask.c:273:19
  105c80:    f0 e1 40 04       	r0 = r4 * r4			  ## ui_mask.c:273:24
  105c84:    50 1e             	r0 = r5 - r0			  ## ui_mask.c:273:13
  105c86:    a9 84             	r1 = sp + 36			  ## ui_mask.c:273:13
  105c88:    62 16             	r2 = r6			  ## ui_mask.c:273:4
  105c8a:    bf ea 30 ff       	call -416 <_sqrt : 105aee >			  ## ui_mask.c:273:4
  105c8e:    f4 66             	[r7+24] = r4			  ## ui_mask.c:274:14
  105c90:    04 91             	goto 34 <mask_radius+0x1A4 : 105cb4 >			  ## ui_mask.c:274:14
  105c92:    00 1b             	r0 *= r0			  ## ui_mask.c:284:25
  105c94:    50 1e             	r0 = r5 - r0			  ## ui_mask.c:284:14
  105c96:    a9 84             	r1 = sp + 36			  ## ui_mask.c:284:14
  105c98:    62 16             	r2 = r6			  ## ui_mask.c:284:5
  105c9a:    bf ea 28 ff       	call -432 <_sqrt : 105aee >			  ## ui_mask.c:284:5
  105c9e:    d4 e9 19 d0       	[sp+24] = r13
  105ca2:    f0 e1 f0 0f       	r0 = r15 * r15			  ## ui_mask.c:287:18
  105ca6:    50 1e             	r0 = r5 - r0			  ## ui_mask.c:287:13
  105ca8:    a9 88             	r1 = sp + 40			  ## ui_mask.c:287:13
  105caa:    62 16             	r2 = r6			  ## ui_mask.c:287:4
  105cac:    bf ea 1f ff       	call -450 <_sqrt : 105aee >			  ## ui_mask.c:287:4
  105cb0:    d0 ec 79 f1       	[r7+24] = r15			  ## ui_mask.c:288:14
  105cb4:    6d d6             	r13 = r6  #
  105cb6:    18 61             		 r0 = h[r1+2] (u)
  105cb8:    f8 6f             	h[r7+30] = r0
  105cba:    18 60             	r0 = h[r1+0] (u)
  105cbc:    f8 6e             	h[r7+28] = r0
  105cbe:    d8 e9 24 10       	r1 = h[sp+36] (u)			  ## ui_mask.c:293:18
  105cc2:    d8 e9 28 e0       	r14 = h[sp+40] (u)			  ## ui_mask.c:293:10
  105cc6:    32 e1 ff 1f       	r2 = r1 + -1			  ## ui_mask.c:293:20
  105cca:    00 e1 01 80       	r0 = r8 + 1			  ## ui_mask.h:134:26
  105cce:    82 e8 0b e0       	if (r14 != r2) goto 22 <mask_radius+0x1D8 : 105ce8 >			  ## ui_mask.h:134:26
  105cd2:    d8 e9 26 40       	r4 = h[sp+38] (u)			  ## ui_mask.c:293:30
  105cd6:    ab 84             	r3 = sp + 36			  ## ui_mask.c:293:30
  105cd8:    84 47             	if (r4 != 0) goto 14 <mask_radius+0x1D8 : 105ce8 >			  ## ui_mask.c:293:30
  105cda:    41 e1 02 30       	r1 = r3 | 0x2			  ## ui_mask.c:293:30
  105cde:    d8 e9 25 20       	h[sp+36] = r2			  ## ui_mask.c:294:8
  105ce2:    7b 3f             	r3 = 255			  ## ui_mask.c:295:9
  105ce4:    21 d6             	r1 = r2  #			  ## ui_mask.c:298:18
  105ce6:    9b 60             		 h[r1+0] = r3			  ## ui_mask.c:295:9
  105ce8:    b4 e0 b2 6c       	r6 = r11 - r12			  ## ui_mask.c:241:18
  105cec:    91 17             	r1 = r1.l (u)			  ## ui_mask.c:298:12
  105cee:    b4 f0 02 7b       	r7 = r0 - r11  #			  ## ui_mask.h:134:39
  105cf2:    81 24             		 [sp+16] = r1			  ## ui_mask.h:134:39
  105cf4:    81 e8 48 e0       	if (r14 != r1) goto 144 <mask_radius+0x278 : 105d88 >			  ## ui_mask.c:298:7
  105cf8:    d8 e9 2a 00       	r0 = h[sp+42] (u)			  ## ui_mask.c:299:12
  105cfc:    d8 e9 26 10       	r1 = h[sp+38] (u)			  ## ui_mask.c:299:19
  105d00:    10 d8             	r0 += r1  #			  ## ui_mask.c:299:17
  105d02:    01 25             		 r1 = [sp+20]			  ## ui_mask.c:300:8
  105d04:    85 a1             	r5 = r0 >> 1			  ## ui_mask.c:299:25
  105d06:    50 e1 ff 50       	r0 = r5 ^ 0xFF			  ## ui_mask.c:301:13
  105d0a:    01 41             	if (r1 == 0) goto 2 <mask_radius+0x1FE : 105d0e >			  ## ui_mask.c:301:13
  105d0c:    05 16             	r5 = r0			  ## ui_mask.c:300:8
  105d0e:    b4 e0 a2 8e       	r8 = r10 - r14			  ## ui_mask.c:303:21
  105d12:    34 e1 ff 8f       	r4 = r8 + -1			  ## ui_mask.c:303:28
  105d16:    c3 1d             	r3 = r4 + r6			  ## ui_mask.c:305:15
  105d18:    d4 e9 18 a0       	r10 = [sp+24]
  105d1c:    83 fd 0b 00       	ifs (r3 < 0) goto 22 <mask_radius+0x226 : 105d36 >
  105d20:    0a ed 09 30       	ifs (r3 >= r10) goto 18 <mask_radius+0x226 : 105d36 >
  105d24:    d8 ee 90 03       	r0 = b[r9+r3] (u)			  ## ui_mask.c:308:20
  105d28:    71 e1 7f 5c       	r1 = r5 & 0xFFFF00FF			  ## ui_mask.c:308:20
  105d2c:    80 ff c8 22 00 00 	call 8904 <mask_mix : 107ffa >			  ## ui_mask.c:308:20
  105d32:    d8 ee 91 03       	b[r9+r3] = r0			  ## ui_mask.c:308:18
  105d36:    70 1f             	r0 = r7 - r4			  ## ui_mask.c:311:20
  105d38:    64 1c             	r4 = r6 + r0			  ## ui_mask.c:311:26
  105d3a:    37 e1 ff 4f       	r7 = r4 + -1			  ## ui_mask.c:311:15
  105d3e:    87 fd 0b 00       	ifs (r7 < 0) goto 22 <mask_radius+0x248 : 105d58 >
  105d42:    0a ed 09 70       	ifs (r7 >= r10) goto 18 <mask_radius+0x248 : 105d58 >
  105d46:    d8 ee 90 07       	r0 = b[r9+r7] (u)			  ## ui_mask.c:313:20
  105d4a:    71 e1 7f 5c       	r1 = r5 & 0xFFFF00FF			  ## ui_mask.c:313:20
  105d4e:    80 ff a6 22 00 00 	call 8870 <mask_mix : 107ffa >			  ## ui_mask.c:313:20
  105d54:    d8 ee 91 07       	b[r9+r7] = r0			  ## ui_mask.c:313:18
  105d58:    00 25             	r0 = [sp+20]			  ## ui_mask.c:316:8
  105d5a:    a0 56             	if (r0 != 0) goto 172 <mask_radius+0x2F8 : 105e08 >			  ## ui_mask.c:316:8
  105d5c:    4c ff 00 3a 44 01 	ifs (r3 > r10) goto 648 <mask_radius+0x4DA : 105fea >
  105d62:    33 ed 00 c0       	ifs (r3 >= 0) {
  105d66:    41 20             		r1 = 0			  ## ui_basic.c:110:2
  105d68:    90 16             		r0 = r9			  ## ui_basic.c:110:2
  105d6a:    32 16             		r2 = r3			  ## ui_basic.c:110:2
  105d6c:    80 ff 0e a0 f1 ff 		call -942066
                               	} <memset : 1fd80 >			  ## ui_basic.c:110:2
  105d72:    0b ff 00 40 39 01 	ifs (r4 < 0) goto 626 <mask_radius+0x4DA : 105fea >			  ## ui_basic.c:110:2
  105d78:    4c ff 00 4a 34 01 	ifs (r4 > r10) goto 616 <mask_radius+0x4D6 : 105fe6 >
  105d7e:    b4 e0 90 04       	r0 = r9 + r4			  ## ui_mask.c:328:18
  105d82:    b4 e0 a2 24       	r2 = r10 - r4			  ## ui_mask.c:328:36
  105d86:    94 8b             	goto 598 <mask_radius+0x4CE : 105fde >			  ## ui_mask.c:328:36
  105d88:    30 e1 ff af       	r0 = r10 + -1			  ## ui_mask.c:346:29
  105d8c:    b4 e0 02 0e       	r0 = r0 - r14			  ## ui_mask.c:346:21
  105d90:    84 1d             	r4 = r0 + r6			  ## ui_mask.c:347:15
  105d92:    70 1e             	r0 = r7 - r0			  ## ui_mask.c:348:20
  105d94:    60 18             	r0 += r6			  ## ui_mask.c:348:26
  105d96:    38 f1 ff 0f       	r8 = r0 + -1  #			  ## ui_mask.c:348:15
  105d9a:    80 23             		 [sp+12] = r0			  ## ui_mask.c:348:15
  105d9c:    d6 d6             	r6 = r13  #
  105d9e:    00 25             		 r0 = [sp+20]			  ## ui_mask.c:350:8
  105da0:    00 52             	if (r0 == 0) goto 36 <mask_radius+0x2B6 : 105dc6 >			  ## ui_mask.c:350:8
  105da2:    48 81             	r0 = r4 + 1			  ## ui_mask.c:351:20
  105da4:    b0 ee 00 00       	ifs (r0 <= 0) {
  105da8:    40 20             		r0 = 0
                               	}			  ## ui_mask.c:352:9
  105daa:    01 26             	r1 = [sp+24]			  ## ui_mask.c:360:21
  105dac:    01 ed 0b 00       	ifs (r0 >= r1) goto 22 <mask_radius+0x2B6 : 105dc6 >			  ## ui_mask.c:360:21
  105db0:    01 26             	r1 = [sp+24]			  ## ui_mask.c:357:9
  105db2:    35 e4 81 11       	r1 = smin(r8, r1)			  ## ui_mask.c:357:9
  105db6:    12 1e             	r2 = r1 - r0			  ## ui_mask.c:357:9
  105db8:    32 ed 00 80       	ifs (r2 >= 0) {
  105dbc:    90 18             		r0 += r9			  ## ui_mask.c:361:18
  105dbe:    41 20             		r1 = 0			  ## ui_basic.c:110:2
  105dc0:    80 ff ba 9f f1 ff 		call -942150
                               	} <memset : 1fd80 >			  ## ui_basic.c:110:2
  105dc6:    f0 e1 e0 0e       	r0 = r14 * r14			  ## ui_mask.c:370:21
  105dca:    50 1e             	r0 = r5 - r0			  ## ui_mask.c:370:13
  105dcc:    a9 80             	r1 = sp + 32			  ## ui_mask.c:370:13
  105dce:    62 16             	r2 = r6			  ## ui_mask.c:370:4
  105dd0:    bf ea 8d fe       	call -742 <_sqrt : 105aee >			  ## ui_mask.c:370:4
  105dd4:    d8 e9 22 b0       	r11 = h[sp+34] (u)			  ## ui_mask.c:372:15
  105dd8:    d8 e9 20 00       	r0 = h[sp+32] (u)			  ## ui_mask.c:372:15
  105ddc:    31 21             	r1 |= 2			  ## ui_mask.c:372:15
  105dde:    81 22             	[sp+8] = r1			  ## ui_mask.c:372:15
  105de0:    8b f8 07 00       	if (r11 != 0) goto 14 <mask_radius+0x2E2 : 105df2 >			  ## ui_mask.c:372:15
  105de4:    f8 3f             	r0 += -1			  ## ui_mask.c:373:13
  105de6:    d8 e9 21 00       	h[sp+32] = r0			  ## ui_mask.c:373:13
  105dea:    4b e0 ff 00       	r11 = 255 <UPDATE_SIZE+0x7F : ff >			  ## ui_mask.c:373:13
  105dee:    50 ed 11 b0       	h[r1+0] = r11			  ## ui_mask.c:374:14
  105df2:    47 16             	r7 = r4
  105df4:    86 17             	r6 = r0.l (u)			  ## ui_mask.c:377:8
  105df6:    0c e1 01 e0       	r12 = r14 + 1			  ## ui_mask.c:365:17
  105dfa:    0f ed 13 60       	ifs (r6 >= r15) goto 38 <mask_radius+0x314 : 105e24 >			  ## ui_mask.c:377:8
  105dfe:    88 9c             	r0 = sp + 28
  105e00:    30 21             	r0 |= 2
  105e02:    8d d6             	r13 = r8  #
  105e04:    80 21             		 [sp+4] = r0			  ## ui_math.h:30:7
  105e06:    24 8f             	goto 158 <mask_radius+0x396 : 105ea6 >
  105e08:    b4 e0 80 06       	r0 = r8 + r6			  ## ui_mask.c:331:7
  105e0c:    b0 ee 00 00       	ifs (r0 <= 0) {
  105e10:    40 20             		r0 = 0
                               	}			  ## ui_mask.c:333:9
  105e12:    0a ed e8 00       	ifs (r0 >= r10) goto 464 <mask_radius+0x4D6 : 105fe6 >
  105e16:    35 e4 71 1a       	r1 = smin(r7, r10)			  ## ui_mask.c:338:9
  105e1a:    12 1e             	r2 = r1 - r0			  ## ui_mask.c:338:9
  105e1c:    82 fd e3 00       	ifs (r2 < 0) goto 454 <mask_radius+0x4D6 : 105fe6 >
  105e20:    90 18             	r0 += r9			  ## ui_mask.c:342:18
  105e22:    64 9d             	goto 442 <mask_radius+0x4CE : 105fde >
  105e24:    f0 e1 c0 0c       	r0 = r12 * r12			  ## ui_mask.c:378:19
  105e28:    50 1e             	r0 = r5 - r0			  ## ui_mask.c:378:14
  105e2a:    f8 e8 1c c0       	r12 = sp + 28			  ## ui_mask.c:378:14
  105e2e:    c1 16             	r1 = r12			  ## ui_mask.c:378:5
  105e30:    d2 16             	r2 = r13			  ## ui_mask.c:378:5
  105e32:    bf ea 5c fe       	call -840 <_sqrt : 105aee >			  ## ui_mask.c:378:5
  105e36:    d8 e9 2a 00       	r0 = h[sp+42] (u)			  ## ui_mask.c:379:24
  105e3a:    d8 e9 1e b0       	r11 = h[sp+30] (u)			  ## ui_mask.c:379:46
  105e3e:    a0 e0 ff 00       	r0 = 0xFF - r0			  ## ui_mask.c:379:22
  105e42:    a1 e0 ff b0       	r1 = 0xFF - r11			  ## ui_mask.c:379:37
  105e46:    10 db             	r0 *= r1  #			  ## ui_mask.c:379:30
  105e48:    01 25             		 r1 = [sp+20]			  ## ui_mask.c:381:9
  105e4a:    80 a9             	r0 = r0 >> 9			  ## ui_mask.c:379:50
  105e4c:    a0 e0 ff 00       	r0 = 0xFF - r0			  ## ui_mask.c:379:13
  105e50:    53 e1 ff 00       	r3 = r0 ^ 0xFF			  ## ui_mask.c:382:14
  105e54:    81 41             	if (r1 != 0) goto 2 <mask_radius+0x348 : 105e58 >			  ## ui_mask.c:382:14
  105e56:    03 16             	r3 = r0			  ## ui_mask.c:381:9
  105e58:    87 fd 0b 00       	ifs (r7 < 0) goto 22 <mask_radius+0x362 : 105e72 >
  105e5c:    00 26             	r0 = [sp+24]
  105e5e:    00 ed 08 70       	ifs (r7 >= r0) goto 16 <mask_radius+0x362 : 105e72 >
  105e62:    d8 ee 90 07       	r0 = b[r9+r7] (u)			  ## ui_mask.c:385:21
  105e66:    31 17             	r1 = r3.b0 (u)			  ## ui_mask.c:385:21
  105e68:    80 ff 8c 21 00 00 	call 8588 <mask_mix : 107ffa >			  ## ui_mask.c:385:21
  105e6e:    d8 ee 91 07       	b[r9+r7] = r0			  ## ui_mask.c:385:19
  105e72:    88 fd 0b 00       	ifs (r8 < 0) goto 22 <mask_radius+0x37C : 105e8c >
  105e76:    00 26             	r0 = [sp+24]
  105e78:    00 ed 08 80       	ifs (r8 >= r0) goto 16 <mask_radius+0x37C : 105e8c >
  105e7c:    d8 ee 90 08       	r0 = b[r9+r8] (u)			  ## ui_mask.c:388:21
  105e80:    31 17             	r1 = r3.b0 (u)			  ## ui_mask.c:388:21
  105e82:    80 ff 72 21 00 00 	call 8562 <mask_mix : 107ffa >			  ## ui_mask.c:388:21
  105e88:    d8 ee 91 08       	b[r9+r8] = r0			  ## ui_mask.c:388:19
  105e8c:    40 e1 02 c0       	r0 = r12 | 0x2			  ## ui_mask.c:379:46
  105e90:    0c f1 02 e0       	r12 = r14 + 2  #			  ## ui_mask.c:393:6
  105e94:    80 21             		 [sp+4] = r0			  ## ui_mask.c:393:6
  105e96:    d8 e9 1c a0       	r10 = h[sp+28] (u)			  ## ui_mask.c:393:6
  105e9a:    00 22             	r0 = [sp+8]			  ## ui_mask.c:392:14
  105e9c:    50 ed 01 b0       	h[r0+0] = r11			  ## ui_mask.c:392:14
  105ea0:    ff 3f             	r7 += -1			  ## ui_mask.c:390:7
  105ea2:    d4 e9 0c d0       	r13 = [sp+12]
  105ea6:    d4 e9 0d 90       	[sp+12] = r9
  105eaa:    b4 f0 90 ed       	r14 = r9 + r13  #			  ## ui_mask.c:365:8
  105eae:    87 20             		 [sp] = r7			  ## ui_mask.c:365:8
  105eb0:    c0 e1 64 90       	r9 = r6 << 4			  ## ui_mask.c:365:8
  105eb4:    44 20             	r4 = 0
  105eb6:    14 9c             	goto 120 <mask_radius+0x420 : 105f30 >
  105eb8:    00 1b             	r0 *= r0			  ## ui_mask.c:397:43
  105eba:    58 16             	r8 = r5			  ## ui_mask.c:397:43
  105ebc:    50 1e             	r0 = r5 - r0			  ## ui_mask.c:397:38
  105ebe:    00 a8             	r0 = r0 << 8			  ## ui_math.h:22:8
  105ec0:    b1 e1 40 b0       	r1 = uextra(r11, p:0, l:16)			  ## ui_math.h:24:29
  105ec4:    92 a4             	r2 = r1 >> 4			  ## ui_math.h:24:36
  105ec6:    92 18             	r2 += r9			  ## ui_math.h:24:26
  105ec8:    f0 e1 20 32       	r3 = r2 * r2			  ## ui_math.h:25:17
  105ecc:    88 1e             	r0 = r0 - r3			  ## ui_math.h:27:12
  105ece:    23 a1             	r3 = r2 << 1			  ## ui_math.h:28:23
  105ed0:    f4 e1 01 03       	r0 = r0 / r3 (s)			  ## ui_math.h:28:13
  105ed4:    25 1c             	r5 = r2 + r0			  ## ui_math.h:28:30
  105ed6:    50 a4             	r0 = r5 << 4			  ## ui_math.h:31:9
  105ed8:    bb e1 20 00       	r11 = uextra(r0, p:0, l:8)			  ## ui_math.h:31:9
  105edc:    b4 f0 b0 01       	r0 = r11 + r1  #			  ## ui_mask.c:399:19
  105ee0:    01 25             		 r1 = [sp+20]			  ## ui_mask.c:400:9
  105ee2:    80 a1             	r0 = r0 >> 1			  ## ui_mask.c:399:31
  105ee4:    5f e1 ff 00       	r15 = r0 ^ 0xFF			  ## ui_mask.c:401:14
  105ee8:    81 41             	if (r1 != 0) goto 2 <mask_radius+0x3DC : 105eec >			  ## ui_mask.c:401:14
  105eea:    0f 16             	r15 = r0			  ## ui_mask.c:400:9
  105eec:    87 fd 0d 00       	ifs (r7 < 0) goto 26 <mask_radius+0x3FA : 105f0a >
  105ef0:    00 26             	r0 = [sp+24]
  105ef2:    00 ed 0a 70       	ifs (r7 >= r0) goto 20 <mask_radius+0x3FA : 105f0a >
  105ef6:    71 f1 7f fc       	r1 = r15 & 0xFFFF00FF  #			  ## ui_mask.c:404:21
  105efa:    03 23             		 r3 = [sp+12]			  ## ui_mask.c:404:21
  105efc:    d8 ee 30 07       	r0 = b[r3+r7] (u)			  ## ui_mask.c:404:21
  105f00:    80 ff f4 20 00 00 	call 8436 <mask_mix : 107ffa >			  ## ui_mask.c:404:21
  105f06:    d8 ee 31 07       	b[r3+r7] = r0			  ## ui_mask.c:404:19
  105f0a:    c0 e1 54 a8       	r10 = r5 >> 4			  ## ui_math.h:30:11
  105f0e:    86 fd 0c 00       	ifs (r6 < 0) goto 24 <mask_radius+0x41A : 105f2a >			  ## ui_math.h:30:11
  105f12:    00 26             	r0 = [sp+24]
  105f14:    00 ed 09 60       	ifs (r6 >= r0) goto 18 <mask_radius+0x41A : 105f2a >
  105f18:    d8 ee e0 04       	r0 = b[r14+r4] (u)			  ## ui_mask.c:407:21
  105f1c:    71 e1 7f fc       	r1 = r15 & 0xFFFF00FF			  ## ui_mask.c:407:21
  105f20:    80 ff d4 20 00 00 	call 8404 <mask_mix : 107ffa >			  ## ui_mask.c:407:21
  105f26:    d8 ee e1 04       	b[r14+r4] = r0			  ## ui_mask.c:407:19
  105f2a:    c4 21             	r4 += 1			  ## ui_mask.c:396:4
  105f2c:    ff 3f             	r7 += -1			  ## ui_mask.c:409:7
  105f2e:    85 16             	r5 = r8
  105f30:    b4 f0 c0 04       	r0 = r12 + r4  #			  ## ui_mask.c:396:13
  105f34:    01 24             		 r1 = [sp+16]			  ## ui_mask.c:396:4
  105f36:    b4 e0 d0 64       	r6 = r13 + r4			  ## ui_mask.c:396:13
  105f3a:    81 ec bd 01       	if (r0 <= r1) goto -134 <mask_radius+0x3A8 : 105eb8 >			  ## ui_mask.c:396:13
  105f3e:    00 22             	r0 = [sp+8]			  ## ui_math.h:24:34
  105f40:    50 ed 01 b0       	h[r0+0] = r11			  ## ui_math.h:24:34
  105f44:    d8 e9 1d a0       	h[sp+28] = r10			  ## ui_math.h:30:7
  105f48:    c0 f1 b8 08       	r0 = r11 >> 8  #			  ## ui_math.h:31:7
  105f4c:    01 21             		 r1 = [sp+4]			  ## ui_math.h:31:7
  105f4e:    b0 f1 40 b0       	r0 = uextra(r11, p:0, l:16)  #			  ## ui_mask.c:414:8
  105f52:    98 41             		 b[r1+1] = r0			  ## ui_math.h:31:7
  105f54:    52 ee 10 b0       	b[r1+0] = r11			  ## ui_math.h:31:7
  105f58:    10 4c             	if (r0 == 0) goto 88 <mask_radius+0x4A2 : 105fb2 >			  ## ui_math.h:31:7
  105f5a:    d8 e9 26 10       	r1 = h[sp+38] (u)			  ## ui_mask.c:415:21
  105f5e:    10 db             	r0 *= r1  #			  ## ui_mask.c:415:19
  105f60:    01 25             		 r1 = [sp+20]			  ## ui_mask.c:416:9
  105f62:    80 a9             	r0 = r0 >> 9			  ## ui_mask.c:415:27
  105f64:    55 e1 ff 00       	r5 = r0 ^ 0xFF			  ## ui_mask.c:417:14
  105f68:    81 41             	if (r1 != 0) goto 2 <mask_radius+0x45C : 105f6c >
  105f6a:    05 16             	r5 = r0			  ## ui_mask.c:416:9
  105f6c:    d4 e9 0c 80       	r8 = [sp+12]
  105f70:    87 fd 0b 00       	ifs (r7 < 0) goto 22 <mask_radius+0x47A : 105f8a >
  105f74:    00 26             	r0 = [sp+24]
  105f76:    00 ed 08 70       	ifs (r7 >= r0) goto 16 <mask_radius+0x47A : 105f8a >
  105f7a:    d8 ee 80 07       	r0 = b[r8+r7] (u)			  ## ui_mask.c:420:21
  105f7e:    51 17             	r1 = r5.b0 (u)			  ## ui_mask.c:420:21
  105f80:    80 ff 74 20 00 00 	call 8308 <mask_mix : 107ffa >			  ## ui_mask.c:420:21
  105f86:    d8 ee 81 07       	b[r8+r7] = r0			  ## ui_mask.c:420:19
  105f8a:    86 fd 0b 00       	ifs (r6 < 0) goto 22 <mask_radius+0x494 : 105fa4 >
  105f8e:    00 26             	r0 = [sp+24]
  105f90:    00 ed 08 60       	ifs (r6 >= r0) goto 16 <mask_radius+0x494 : 105fa4 >
  105f94:    d8 ee e0 04       	r0 = b[r14+r4] (u)			  ## ui_mask.c:423:21
  105f98:    51 17             	r1 = r5.b0 (u)			  ## ui_mask.c:423:21
  105f9a:    80 ff 5a 20 00 00 	call 8282 <mask_mix : 107ffa >			  ## ui_mask.c:423:21
  105fa0:    d8 ee e1 04       	b[r14+r4] = r0			  ## ui_mask.c:423:19
  105fa4:    00 20             	r0 = [sp]			  ## ui_mask.c:426:7
  105fa6:    f8 3f             	r0 += -1			  ## ui_mask.c:426:7
  105fa8:    07 1f             	r7 = r0 - r4			  ## ui_mask.c:426:7
  105faa:    b4 e0 d0 04       	r0 = r13 + r4			  ## ui_mask.c:427:4
  105fae:    0e 81             	r6 = r0 + 1			  ## ui_mask.c:427:4
  105fb0:    04 82             	goto 4 <mask_radius+0x4A6 : 105fb6 >			  ## ui_mask.c:427:4
  105fb2:    d4 e9 0c 80       	r8 = [sp+12]
  105fb6:    04 26             	r4 = [sp+24]
  105fb8:    00 25             	r0 = [sp+20]
  105fba:    80 55             	if (r0 != 0) goto 42 <mask_radius+0x4D6 : 105fe6 >
  105fbc:    7a 81             	r2 = r7 + 1			  ## ui_mask.c:430:7
  105fbe:    04 ee 14 20       	ifs (r2 > r4) goto 40 <mask_radius+0x4DA : 105fea >
  105fc2:    32 ed 00 80       	ifs (r2 >= 0) {
  105fc6:    41 20             		r1 = 0			  ## ui_basic.c:110:2
  105fc8:    80 16             		r0 = r8			  ## ui_basic.c:110:2
  105fca:    80 ff b0 9d f1 ff 		call -942672
                               	} <memset : 1fd80 >			  ## ui_basic.c:110:2
  105fd0:    86 fd 0b 00       	ifs (r6 < 0) goto 22 <mask_radius+0x4DA : 105fea >
  105fd4:    04 ed 07 60       	ifs (r6 >= r4) goto 14 <mask_radius+0x4D6 : 105fe6 >
  105fd8:    b4 e0 80 06       	r0 = r8 + r6			  ## ui_mask.c:442:18
  105fdc:    c2 1f             	r2 = r4 - r6			  ## ui_mask.c:442:36
  105fde:    41 20             	r1 = 0
  105fe0:    80 ff 9a 9d f1 ff 	call -942694 <memset : 1fd80 >
  105fe6:    46 22             	r6 = 2
  105fe8:    d6 8e             	goto -1188 <mask_radius+0x36 : 105b46 >
  105fea:    46 20             	r6 = 0
  105fec:    d6 8c             	goto -1192 <mask_radius+0x36 : 105b46 >
  105fee:    00 00             	nop


sin0_90_table:
  105ff0:    00 00             	nop
  105ff2:    00 00             	nop
  105ff4:    3c 02             	flushinv [r12]
  105ff6:    00 00             	nop
  105ff8:    78 04             	[--sp] = {rets, r8-r4}
  105ffa:    00 00             	nop
  105ffc:    b3 06             	h[r3++=2] = r3
  105ffe:    00 00             	nop
  106000:    ee 08             	[r6++=r9] = r6
  106002:    00 00             	nop
  106004:    28 0b             	[r2++=r14] = r0
  106006:    00 00             	nop
  106008:    61 0d             	r1 = h[r6++=r10] (u)
  10600a:    00 00             	nop
  10600c:    99 0f             	h[r1++=r15] = r1
  10600e:    00 00             	nop
  106010:    d0 11             	r0 = b[r5++=r11] (u)
  106012:    00 00             	nop
  106014:    06 14              <unknown instruction>
  106016:    00 00             	nop
  106018:    3a 16             	r10 = r3
  10601a:    00 00             	nop
  10601c:    6c 18             	r12 += r6
  10601e:    00 00             	nop
  106020:    9d 1a             	r5 >>>= r1
  106022:    00 00             	nop
  106024:    cb 1c             	r3 = r4 + r3
  106026:    00 00             	nop
  106028:    f7 1e             	r7 = r7 - r2
  10602a:    00 00             	nop
  10602c:    21 21             	r1 = [sp+132]
  10602e:    00 00             	nop
  106030:    48 23             	r0 = 35
  106032:    00 00             	nop
  106034:    6c 25             	r4 = 165
  106036:    00 00             	nop
  106038:    8e 27             	[sp+28] = r14
  10603a:    00 00             	nop
  10603c:    ac 29             	[sp+164] = r12
  10603e:    00 00             	nop
  106040:    c7 2b             	r7 += 11
  106042:    00 00             	nop
  106044:    df 2d             	r7 += 109
  106046:    00 00             	nop
  106048:    f3 2f             	r3 += -49
  10604a:    00 00             	nop
  10604c:    03 32             	r3 = [sp+72]
  10604e:    00 00             	nop
  106050:    10 34             	r0 = -12
  106052:    00 00             	nop
  106054:    18 36              <unknown instruction>
  106056:    00 00             	nop
  106058:    1c 38              <unknown instruction>
  10605a:    00 00             	nop
  10605c:    1c 3a              <unknown instruction>
  10605e:    00 00             	nop
  106060:    17 3c             	r7 = -4
  106062:    00 00             	nop
  106064:    0e 3e             	r14 = [sp+120]
  106066:    00 00             	nop
  106068:    ff 3f             	r7 += -1
  10606a:    00 00             	nop
  10606c:    ec 41             	b[r6+1] = r4
  10606e:    00 00             	nop
  106070:    d4 43             	if (r4 != 0) goto -186 <mask_radius+0x4A8 : 105fb8 >
  106072:    00 00             	nop
  106074:    b6 45             	if (r6 != 0) goto 202 <sin0_90_table+0x150 : 106140 >
  106076:    00 00             	nop
  106078:    93 47             	if (r3 != 0) goto 78 <sin0_90_table+0xD8 : 1060c8 >
  10607a:    00 00             	nop
  10607c:    6a 49             	r2 = b[r6+9] (u)
  10607e:    00 00             	nop
  106080:    3c 4b             	r4 = b[r3+11] (u)
  106082:    00 00             	nop
  106084:    08 4d             	r0 = b[r0+13] (u)
  106086:    00 00             	nop
  106088:    cd 4e             	b[r4+14] = r5
  10608a:    00 00             	nop
  10608c:    8d 50             	b[r0+-16] = r5
  10608e:    00 00             	nop
  106090:    46 52             	if (r6 == 0) goto -220 <mask_radius+0x4A6 : 105fb6 >
  106092:    00 00             	nop
  106094:    f9 53             	b[r7+-13] = r1
  106096:    00 00             	nop
  106098:    a5 55             	if (r5 != 0) goto 170 <sin0_90_table+0x154 : 106144 >
  10609a:    00 00             	nop
  10609c:    4b 57             	r3 = b[r4+-9] (u)
  10609e:    00 00             	nop
  1060a0:    ea 58             	b[r6+-8] = r2
  1060a2:    00 00             	nop
  1060a4:    82 5a             	if (r2 != 0) goto 52 <sin0_90_table+0xEA : 1060da >
  1060a6:    00 00             	nop
  1060a8:    13 5c             	if (r3 == 0) goto 120 <sin0_90_table+0x132 : 106122 >
  1060aa:    00 00             	nop
  1060ac:    9c 5d             	b[r1+-3] = r4
  1060ae:    00 00             	nop
  1060b0:    1f 5f             	r7 = b[r1+-1] (u)
  1060b2:    00 00             	nop
  1060b4:    9a 60             	h[r1+0] = r2
  1060b6:    00 00             	nop
  1060b8:    0d 62             	r5 = h[r0+4] (u)
  1060ba:    00 00             	nop
  1060bc:    79 63             	r1 = h[r7+6] (u)
  1060be:    00 00             	nop
  1060c0:    dd 64             	h[r5+8] = r5
  1060c2:    00 00             	nop
  1060c4:    39 66             	r1 = h[r3+12] (u)
  1060c6:    00 00             	nop
  1060c8:    8d 67             	h[r0+14] = r5
  1060ca:    00 00             	nop
  1060cc:    d9 68             	h[r5+16] = r1
  1060ce:    00 00             	nop
  1060d0:    1d 6a             	r5 = h[r1+20] (u)
  1060d2:    00 00             	nop
  1060d4:    59 6b             	r1 = h[r5+22] (u)
  1060d6:    00 00             	nop
  1060d8:    8c 6c             	h[r0+24] = r4
  1060da:    00 00             	nop
  1060dc:    b7 6d             	[r3+52] = r7
  1060de:    00 00             	nop
  1060e0:    d9 6e             	h[r5+28] = r1
  1060e2:    00 00             	nop
  1060e4:    f3 6f             	[r7+60] = r3
  1060e6:    00 00             	nop
  1060e8:    04 71             	r4 = [r0+-60] 
  1060ea:    00 00             	nop
  1060ec:    0c 72             	r4 = h[r0+-28] (u)
  1060ee:    00 00             	nop
  1060f0:    0b 73             	r3 = h[r0+-26] (u)
  1060f2:    00 00             	nop
  1060f4:    01 74             	r1 = [r0+-48] 
  1060f6:    00 00             	nop
  1060f8:    ee 74             	h[r6+-24] = r6
  1060fa:    00 00             	nop
  1060fc:    d2 75             	[r5+-44] = r2
  1060fe:    00 00             	nop
  106100:    ad 76             	h[r2+-20] = r5
  106102:    00 00             	nop
  106104:    7f 77             	r7 = h[r7+-18] (u)
  106106:    00 00             	nop
  106108:    47 78             	r7 = [r4+-32] 
  10610a:    00 00             	nop
  10610c:    06 79             	r6 = [r0+-28] 
  10610e:    00 00             	nop
  106110:    bb 79             	h[r3+-14] = r3
  106112:    00 00             	nop
  106114:    67 7a             	r7 = [r6+-24] 
  106116:    00 00             	nop
  106118:    0a 7b             	r2 = h[r0+-10] (u)
  10611a:    00 00             	nop
  10611c:    a2 7b             	[r2+-20] = r2
  10611e:    00 00             	nop
  106120:    32 7c             	r2 = [r3+-16] 
  106122:    00 00             	nop
  106124:    b7 7c             	[r3+-16] = r7
  106126:    00 00             	nop
  106128:    33 7d             	r3 = [r3+-12] 
  10612a:    00 00             	nop
  10612c:    a5 7d             	[r2+-12] = r5
  10612e:    00 00             	nop
  106130:    0d 7e             	r5 = h[r0+-4] (u)
  106132:    00 00             	nop
  106134:    6c 7e             	r4 = h[r6+-4] (u)
  106136:    00 00             	nop
  106138:    c0 7e             	[r4+-8] = r0
  10613a:    00 00             	nop
  10613c:    0b 7f             	r3 = h[r0+-2] (u)
  10613e:    00 00             	nop
  106140:    4b 7f             	r3 = h[r4+-2] (u)
  106142:    00 00             	nop
  106144:    82 7f             	[r0+-4] = r2
  106146:    00 00             	nop
  106148:    af 7f             	h[r2+-2] = r7
  10614a:    00 00             	nop
  10614c:    d2 7f             	[r5+-4] = r2
  10614e:    00 00             	nop
  106150:    eb 7f             	h[r6+-2] = r3
  106152:    00 00             	nop
  106154:    fa 7f             	h[r7+-2] = r2
  106156:    00 00             	nop
  106158:    ff 7f             	h[r7+-2] = r7
  10615a:    00 00             	nop


lcd_interface_begin:
  10615c:    40 6f             	r0 = [r4+60] 
  10615e:    10 00              <unknown instruction>
  106160:    cc 71             	h[r4+-30] = r4
  106162:    10 00              <unknown instruction>
  106164:    30 72             	r0 = [r3+-56] 
  106166:    10 00              <unknown instruction>
  106168:    6e 72             	r6 = h[r6+-28] (u)
  10616a:    10 00              <unknown instruction>
  10616c:    7a 72             	r2 = h[r7+-28] (u)
  10616e:    10 00              <unknown instruction>
  106170:    2e 74             	r6 = h[r2+-24] (u)
  106172:    10 00              <unknown instruction>
  106174:    44 74             	r4 = [r4+-48] 
  106176:    10 00              <unknown instruction>
  106178:    ca 74             	h[r4+-24] = r2
  10617a:    10 00              <unknown instruction>
  10617c:    10 75             	r0 = [r1+-44] 
  10617e:    10 00              <unknown instruction>
  106180:    00 00             	nop
  106182:    00 00             	nop


lcd_interface_end:
  106184:    16 80             	goto -1984 <mask_angle+0x144 : 1059c6 >
  106186:    10 00              <unknown instruction>
  106188:    18 80             	r0 = r1 + 0
  10618a:    10 00              <unknown instruction>


gpio2reg:
  10618c:    01 16             	r1 = r0			  ## gpio.c:48:0
  10618e:    40 20             	r0 = 0			  ## gpio.c:48:0
  106190:    b1 ec 61 c0       	if (r1 <= 97) {			  ## gpio.c:48:0
  106194:    90 a4             		r0 = r1 >> 4			  ## gpio.c:52:28
  106196:    00 a2             		r0 = r0 << 2			  ## gpio.c:52:43
  106198:    c1 ff 00 b8 10 00 		r1 = 1095680 <gpio_regs : 10b800 >			  ## gpio.c:52:28
  10619e:    d8 ec 02 01       		r0 = [r0+r1]
                               	}			  ## gpio.c:52:28
  1061a2:    80 00             	rts			  ## gpio.c:53:1


gpio_direction_output:
  1061a4:    10 04             	[--sp] = rets			  ## gpio.c:313:0
  1061a6:    12 16             	r2 = r1			  ## gpio.c:313:0
  1061a8:    03 16             	r3 = r0			  ## gpio.c:313:0
  1061aa:    83 f9 17 c2       	if (r3 < 97) goto 46 <gpio_direction_output+0x38 : 1061dc >			  ## gpio.c:317:6
  1061ae:    83 f9 26 cc       	if (r3 < 102) goto 76 <gpio_direction_output+0x5A : 1061fe >
  1061b2:    c0 ff 00 18 fd 00 	r0 = 16586752 <_HEAP_END+0xD56800 : fd1800 >			  ## gpio.c:155:16
  1061b8:    40 ea 00 00       	[r0+0] = 0x0			  ## gpio.c:155:16
  1061bc:    e0 e0 90 0c       	r0 = r0 + 0x4800			  ## gpio.c:155:16
  1061c0:    00 ef a0 0c       	[r0+0] |= 0x5000			  ## gpio.c:155:16
  1061c4:    03 f8 1c ce       	if (r3 == 103) goto 56 <gpio_direction_output+0x5C : 106200 >			  ## gpio.c:320:4
  1061c8:    83 f8 19 cc       	if (r3 != 102) goto 50 <gpio_direction_output+0x5A : 1061fe >
  1061cc:    c0 ef 04 00       	[r0+0] &= 0xFFFFFFFB			  ## gpio.c:320:4
  1061d0:    01 60             	r1 = [r0+0] 			  ## gpio.c:321:4
  1061d2:    91 a1             	r1 = r1 >> 1			  ## gpio.c:321:4
  1061d4:    a2 e1 fc 10       	r2 <= insert(r1, p:1, l:31)			  ## gpio.c:321:4
  1061d8:    82 60             	[r0+0] = r2			  ## gpio.c:321:4
  1061da:    00 04             	pc = [sp++]			  ## gpio.c:321:4
  1061dc:    61 97             	call -82 <gpio2reg : 10618c >			  ## gpio.c:329:6
  1061de:    00 4f             	if (r0 == 0) goto 30 <gpio_direction_output+0x5A : 1061fe >
  1061e0:    61 e1 0f 30       	r1 = r3 & 0xF			  ## gpio.c:334:9
  1061e4:    43 21             	r3 = 1			  ## gpio.c:334:9
  1061e6:    c8 e1 30 11       	r1 = r3 << r1			  ## gpio.c:334:9
  1061ea:    02 45             	if (r2 == 0) goto 10 <gpio_direction_output+0x52 : 1061f6 >			  ## gpio.c:336:6
  1061ec:    32 e8 01 00       	if (r2 == 1) {
  1061f0:    64 e8 00 01       		[r0+0] |= r1
                               	}			  ## gpio.c:337:10
  1061f4:    04 82             	goto 4 <gpio_direction_output+0x56 : 1061fa >			  ## gpio.c:337:10
  1061f6:    64 e8 03 01       	[r0+0] &= ~r1			  ## gpio.c:339:10
  1061fa:    64 e8 0b 01       	[r0+8] &= ~r1			  ## gpio.c:341:9
  1061fe:    00 04             	pc = [sp++]
  106200:    c0 ef 08 00       	[r0+0] &= 0xFFFFFFF7			  ## gpio.c:320:4
  106204:    01 60             	r1 = [r0+0] 			  ## gpio.c:321:4
  106206:    a1 e1 84 20       	r1 <= insert(r2, p:1, l:1)			  ## gpio.c:321:4
  10620a:    81 60             	[r0+0] = r1			  ## gpio.c:321:4
  10620c:    00 04             	pc = [sp++]			  ## gpio.c:321:4


gpio_set_die:
  10620e:    10 04             	[--sp] = rets			  ## gpio.c:709:0
  106210:    12 16             	r2 = r1			  ## gpio.c:709:0
  106212:    03 16             	r3 = r0			  ## gpio.c:709:0
  106214:    83 f9 0f c2       	if (r3 < 97) goto 30 <gpio_set_die+0x28 : 106236 >			  ## gpio.c:713:6
  106218:    83 f9 1a cc       	if (r3 < 102) goto 52 <gpio_set_die+0x42 : 106250 >
  10621c:    c0 ff 00 60 fd 00 	r0 = 16605184 <_HEAP_END+0xD5B000 : fd6000 >
  106222:    03 f8 16 ce       	if (r3 == 103) goto 44 <gpio_set_die+0x44 : 106252 >			  ## gpio.c:715:4
  106226:    33 e8 66 c0       	if (r3 == 102) {
  10622a:    01 60             		r1 = [r0+0] 			  ## gpio.c:715:4
  10622c:    a1 e1 04 24       		r1 <= insert(r2, p:8, l:1)			  ## gpio.c:715:4
  106230:    81 60             		[r0+0] = r1			  ## gpio.c:715:4
  106232:    00 04             		pc = [sp++]
                               	}			  ## gpio.c:715:4
  106234:    00 04             	pc = [sp++]			  ## gpio.c:715:4
  106236:    51 8a             	call -172 <gpio2reg : 10618c >			  ## gpio.c:722:6
  106238:    00 4b             	if (r0 == 0) goto 22 <gpio_set_die+0x42 : 106250 >
  10623a:    61 e1 0f 30       	r1 = r3 & 0xF			  ## gpio.c:727:9
  10623e:    43 21             	r3 = 1			  ## gpio.c:727:9
  106240:    c8 e1 30 11       	r1 = r3 << r1			  ## gpio.c:727:9
  106244:    02 43             	if (r2 == 0) goto 6 <gpio_set_die+0x3E : 10624c >
  106246:    64 e8 0c 01       	[r0+12] |= r1			  ## gpio.c:730:10
  10624a:    00 04             	pc = [sp++]			  ## gpio.c:730:10
  10624c:    64 e8 0f 01       	[r0+12] &= ~r1			  ## gpio.c:732:10
  106250:    00 04             	pc = [sp++]
  106252:    01 60             	r1 = [r0+0] 			  ## gpio.c:715:4
  106254:    a1 e1 84 24       	r1 <= insert(r2, p:9, l:1)			  ## gpio.c:715:4
  106258:    81 60             	[r0+0] = r1			  ## gpio.c:715:4
  10625a:    00 04             	pc = [sp++]			  ## gpio.c:715:4


imd_debug_config:
  10625c:    75 04             	[--sp] = {rets, r5, r4}			  ## imd.c:179:0
  10625e:    c2 ff 00 c8 10 00 	r2 = 1099776 <backlight_status : 10c800 >			  ## imd.c:179:0
  106264:    23 67             	r3 = [r2+28] 			  ## imd.c:179:0
  106266:    c4 ff 1a ba 10 00 	r4 = 1096218 <imd_clock_init.div+0x5A : 10ba1a >			  ## imd.c:179:0
  10626c:    03 4c             	if (r3 == 0) goto 24 <imd_debug_config+0x2A : 106286 >			  ## imd.c:179:0
  10626e:    35 66             	r5 = [r3+24] 			  ## imd.c:188:14
  106270:    92 b0             	r2 = r1 >> 16			  ## imd.c:184:17
  106272:    d3 30             	r3 += 80			  ## imd.c:184:17
  106274:    05 f8 15 02       	if (r5 == 1) goto 42 <imd_debug_config+0x46 : 1062a2 >			  ## imd.c:188:6
  106278:    b5 e8 00 10       	if (r5 != 0) {
  10627c:    35 6e             		r5 = [r3+56] 
                               	} else {			  ## imd.c:205:19
  10627e:    35 60             		r5 = [r3+0] 
                               	}			  ## imd.c:189:19
  106280:    85 f8 1c 02       	if (r5 != 1) goto 56 <imd_debug_config+0x60 : 1062bc >			  ## imd.c:189:19
  106284:    04 91             	goto 34 <imd_debug_config+0x4C : 1062a8 >			  ## imd.c:189:19
  106286:    00 e1 44 40       	r0 = r4 + 68			  ## imd.c:183:2
  10628a:    02 e1 1e 44       	r2 = r4 + 1054			  ## imd.c:183:2
  10628e:    41 20             	r1 = 0			  ## imd.c:183:2
  106290:    6b 37             	r3 = 183			  ## imd.c:183:2
  106292:    80 ff 6c 9b f1 ff 	call -943252 <printf : 1fe04 >			  ## imd.c:183:2
  106298:    40 16             	r0 = r4			  ## imd.c:183:2
  10629a:    80 ff 64 9b f1 ff 	call -943260 <printf : 1fe04 >			  ## imd.c:183:2
  1062a0:    f7 9f             	goto -2 <imd_debug_config+0x44 : 1062a0 >			  ## imd.c:183:2
  1062a2:    35 65             	r5 = [r3+20] 			  ## imd.c:197:19
  1062a4:    85 f8 0a 02       	if (r5 != 1) goto 20 <imd_debug_config+0x60 : 1062bc >			  ## imd.c:197:19
  1062a8:    92 a5             	r2 = r1 >> 5
  1062aa:    62 e1 fc 2e       	r2 = r2 & 0x7E0
  1062ae:    93 a8             	r3 = r1 >> 8
  1062b0:    63 e1 78 3c       	r3 = r3 & 0xF800
  1062b4:    32 19             	r2 |= r3
  1062b6:    b3 e1 94 11       	r3 = uextra(r1, p:3, l:5)
  1062ba:    04 92             	goto 36 <imd_debug_config+0x84 : 1062e0 >
  1062bc:    73 e1 7f 2c       	r3 = r2 & 0xFFFF00FF
  1062c0:    85 f8 09 04       	if (r5 != 2) goto 18 <imd_debug_config+0x7A : 1062d6 >
  1062c4:    b3 a2             	r3 = r3 >> 2
  1062c6:    92 a4             	r2 = r1 >> 4
  1062c8:    62 e1 7c 2e       	r2 = r2 & 0xFC0
  1062cc:    a2 e1 18 36       	r2 <= insert(r3, p:12, l:6)
  1062d0:    b3 e1 18 11       	r3 = uextra(r1, p:2, l:6)
  1062d4:    04 85             	goto 10 <imd_debug_config+0x84 : 1062e0 >
  1062d6:    62 e1 7f 1c       	r2 = r1 & 0xFF00
  1062da:    a2 e1 20 38       	r2 <= insert(r3, p:16, l:8)
  1062de:    13 17             	r3 = r1.b0 (u)
  1062e0:    c5 ff 00 2d fe 00 	r5 = 16657664 <_HEAP_END+0xD67D00 : fe2d00 >
  1062e6:    00 48             	if (r0 == 0) goto 16 <imd_debug_config+0x9C : 1062f8 >			  ## imd.c:214:6
  1062e8:    b1 e8 ff 4f       	if (r1 != -1) {
  1062ec:    90 e1 20 03       		r0 = r2 | r3
  1062f0:    d0 65             		[r5+20] = r0
                               	}			  ## imd.c:216:28
  1062f2:    50 60             	r0 = [r5+0] 			  ## imd.c:219:3
  1062f4:    30 2d             	r0 |= 8192			  ## imd.c:219:3
  1062f6:    04 84             	goto 8 <imd_debug_config+0xA4 : 106300 >			  ## imd.c:219:3
  1062f8:    01 45             	if (r1 == 0) goto 10 <imd_debug_config+0xA8 : 106304 >
  1062fa:    d1 64             	[r5+16] = r1			  ## imd.c:222:28
  1062fc:    50 60             	r0 = [r5+0] 			  ## imd.c:223:3
  1062fe:    b8 2d             	r0 &= 4294959103			  ## imd.c:223:3
  106300:    d0 60             	[r5+0] = r0
  106302:    55 04             	{pc, r5, r4} = [sp++]			  ## imd.c:226:1
  106304:    00 e1 44 40       	r0 = r4 + 68			  ## imd.c:221:9
  106308:    02 e1 1e 44       	r2 = r4 + 1054			  ## imd.c:221:9
  10630c:    41 20             	r1 = 0			  ## imd.c:221:9
  10630e:    73 3d             	r3 = 221			  ## imd.c:221:9
  106310:    80 ff ee 9a f1 ff 	call -943378 <printf : 1fe04 >			  ## imd.c:221:9
  106316:    00 e1 ca 40       	r0 = r4 + 202			  ## imd.c:221:9
  10631a:    80 ff e4 9a f1 ff 	call -943388 <printf : 1fe04 >			  ## imd.c:221:9
  106320:    f7 9f             	goto -2 <imd_debug_config+0xC4 : 106320 >			  ## imd.c:221:9


imd_clock_init:
  106322:    7a 04             	[--sp] = {rets, r10-r4}			  ## imd.c:1130:0
  106324:    e2 9d             	sp += -12			  ## imd.c:1130:0
  106326:    c8 ff 00 c8 10 00 	r8 = 1099776 <backlight_status : 10c800 >			  ## imd.c:1130:0
  10632c:    d0 ec 8c 51       	r5 = [r8+28]			  ## imd.c:1130:0
  106330:    c4 ff 20 b8 10 00 	r4 = 1095712 <gpio_regs+0x20 : 10b820 >			  ## imd.c:1130:0
  106336:    05 53             	if (r5 == 0) goto 38 <imd_clock_init+0x3C : 10635e >			  ## imd.c:1130:0
  106338:    58 90             	r0 = r5 + 16			  ## imd.c:1130:0
  10633a:    01 62             	r1 = [r0+8] 			  ## imd.c:1154:14
  10633c:    11 40             	if (r1 == 0) goto 64 <imd_clock_init+0x5C : 10637e >			  ## imd.c:1154:14
  10633e:    03 67             	r3 = [r0+28] 			  ## imd.c:1153:64
  106340:    42 22             	r2 = 2			  ## imd.c:1153:55
  106342:    b3 e8 01 00       	if (r3 != 1) {			  ## imd.c:1153:55
  106346:    42 23             		r2 = 3
                               	}			  ## imd.c:1153:55
  106348:    00 eb 28 00       	{r5, r3} = [r0+]			  ## imd.c:1153:21
  10634c:    53 db             	r3 *= r5  #			  ## imd.c:1153:31
  10634e:    00 6d             		 r0 = [r0+52] 			  ## imd.c:1153:31
  106350:    30 1b             	r0 *= r3			  ## imd.c:1153:52
  106352:    20 1b             	r0 *= r2
  106354:    06 a2             	r6 = r0 << 2			  ## imd.c:1159:39
  106356:    b1 e8 01 00       	if (r1 != 1) {
  10635a:    06 16             		r6 = r0
                               	}			  ## imd.c:1158:13
  10635c:    34 81             	goto 194 <imd_clock_init+0xFE : 106420 >
  10635e:    00 e1 3e 42       	r0 = r4 + 574			  ## imd.c:1150:2
  106362:    02 e1 18 46       	r2 = r4 + 1560			  ## imd.c:1150:2
  106366:    41 20             	r1 = 0			  ## imd.c:1150:2
  106368:    43 e0 7e 04       	r3 = 1150 <WOLASynthesisFilter_Float_M64_m4_r1+0x7A : 47e >			  ## imd.c:1150:2
  10636c:    80 ff 92 9a f1 ff 	call -943470 <printf : 1fe04 >			  ## imd.c:1150:2
  106372:    00 e1 fa 41       	r0 = r4 + 506			  ## imd.c:1150:2
  106376:    80 ff 88 9a f1 ff 	call -943480 <printf : 1fe04 >			  ## imd.c:1150:2
  10637c:    f7 9f             	goto -2 <imd_clock_init+0x5A : 10637c >			  ## imd.c:1150:2
  10637e:    02 6f             	r2 = [r0+60] 			  ## imd.c:1105:28
  106380:    63 f1 1f 20       	r3 = r2 & 0x1F  #			  ## imd.c:1105:39
  106384:    01 6e             		 r1 = [r0+56] 			  ## imd.c:1107:20
  106386:    66 e1 f0 10       	r6 = r1 & 0xF0			  ## imd.c:1107:29
  10638a:    c3 21             	r3 += 1			  ## imd.c:1105:47
  10638c:    06 f8 0b 40       	if (r6 == 32) goto 22 <imd_clock_init+0x84 : 1063a6 >			  ## imd.c:1105:47
  106390:    d0 ec 50 65       	r6 = [r5+80]			  ## imd.c:1108:22
  106394:    45 26             	r5 = 6			  ## imd.c:1109:6
  106396:    b6 e8 02 00       	if (r6 != 2) {			  ## imd.c:1109:6
  10639a:    35 16             		r5 = r3
                               	}			  ## imd.c:1109:6
  10639c:    26 17             	r6 = r2.b0 (u)			  ## imd.c:1109:6
  10639e:    b6 e8 47 00       	if (r6 != 71) {			  ## imd.c:1109:6
  1063a2:    35 16             		r5 = r3
                               	}			  ## imd.c:1109:6
  1063a4:    53 16             	r3 = r5			  ## imd.c:1109:6
  1063a6:    65 e1 e0 20       	r5 = r2 & 0xE0			  ## imd.c:1113:30
  1063aa:    46 21             	r6 = 1			  ## imd.c:1113:38
  1063ac:    b5 e8 60 00       	if (r5 != 96) {			  ## imd.c:1113:38
  1063b0:    46 20             		r6 = 0
                               	}			  ## imd.c:1113:38
  1063b2:    aa a5             	r2 = r2 >>> 5			  ## imd.c:1116:42
  1063b4:    22 a2             	r2 = r2 << 2			  ## imd.c:1116:11
  1063b6:    42 18             	r2 += r4			  ## imd.c:1116:11
  1063b8:    d1 ec 20 29       	r2 = [r2+400]			  ## imd.c:1116:11
  1063bc:    63 18             	r3 += r6			  ## imd.c:1113:6
  1063be:    33 17             	r3 = r3.b0 (u)			  ## imd.c:1113:6
  1063c0:    3f e5              <unknown instruction>			  ## imd.c:1116:50
  1063c2:    9f 33              <unknown instruction>			  ## imd.c:1116:50
  1063c4:    3f e5              <unknown instruction>			  ## imd.c:1116:48
  1063c6:    22 23             	r2 = [sp+140]			  ## imd.c:1116:48
  1063c8:    05 f8 0c c0       	if (r5 == 96) goto 24 <imd_clock_init+0xC2 : 1063e4 >
  1063cc:    01 fc 0a 22       	if (r1 > 17) goto 20 <imd_clock_init+0xC2 : 1063e4 >
  1063d0:    c3 ff 01 00 03 00 	r3 = 196609 <silk_ana_filt_bank_1+0x10005 : 30001 >
  1063d6:    94 e1 32 11       	r1 = r3 & (1 << r1)
  1063da:    01 44             	if (r1 == 0) goto 8 <imd_clock_init+0xC2 : 1063e4 >
  1063dc:    60 e0 7e 15       	r1 = 0x3F800000			  ## imd.c:1121:9
  1063e0:    3f e5              <unknown instruction>			  ## imd.c:1121:9
  1063e2:    20 21             	r0 = [sp+132]			  ## imd.c:1121:9
  1063e4:    c1 ff 00 00 20 41 	r1 = 1092616192 <_HEAP_END+0xF85000 : 1200000 >			  ## imd.c:1156:76
  1063ea:    3f f5              <unknown instruction>			  ## imd.c:1156:76
  1063ec:    22 51             	if (r2 == 0) goto 162 <imd_clock_init+0x16E : 106490 >			  ## imd.c:1156:76
  1063ee:    03 6d             	r3 = [r0+52] 			  ## imd.c:1156:92
  1063f0:    00 eb 06 00       	{r2, r1} = [r0+]			  ## imd.c:1156:50
  1063f4:    3f e5              <unknown instruction>			  ## imd.c:1156:63
  1063f6:    1f 05             	r7 = [r1++=-4] 			  ## imd.c:1156:63
  1063f8:    45 2a             	r5 = 10			  ## imd.c:1156:63
  1063fa:    f4 e1 00 75       	r7 = r0 / r5 (u)			  ## imd.c:1157:134
  1063fe:    f0 f1 20 61       	r6 = r2 * r1  #			  ## imd.c:1156:40
  106402:    87 20             		 [sp] = r7			  ## imd.c:1157:3
  106404:    06 1b             	r6 *= r0			  ## imd.c:1156:61
  106406:    36 1b             	r6 *= r3			  ## imd.c:1156:82
  106408:    f4 e1 60 65       	r6 = r6 / r5 (u)			  ## imd.c:1156:97
  10640c:    e5 f1 0a 70       	r5 = r7 * 0xA  #			  ## imd.c:1157:159
  106410:    86 22             		 [sp+8] = r6			  ## imd.c:1157:3
  106412:    0d 1f             	r5 = r0 - r5			  ## imd.c:1157:159
  106414:    00 f1 fe 44       	r0 = r4 + 1278  #			  ## imd.c:1157:3
  106418:    85 21             		 [sp+4] = r5			  ## imd.c:1157:3
  10641a:    80 ff e4 99 f1 ff 	call -943644 <printf : 1fe04 >			  ## imd.c:1157:3
  106420:    00 e1 f4 61       	r0 = r6 + 500			  ## imd.c:1163:30
  106424:    f0 fc 31 ce       	if (r0 <= 999) goto 98 <imd_clock_init+0x168 : 10648a >			  ## imd.c:1163:30
  106428:    41 e0 e8 03       	r1 = 1000 <_MASK_MEM_SIZE+0x244 : 3e8 >			  ## imd.c:1163:37
  10642c:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## imd.c:1163:37
  106430:    c1 ff 80 bb 00 00 	r1 = 48000 <hd_quantize_intervals_LF+0x1EDC : bb80 >			  ## imd.c:1193:27
  106436:    f4 e1 10 00       	r0 = r1 / r0 (u)			  ## imd.c:1193:27
  10643a:    0a e1 01 00       	r10 = r0 + 1			  ## imd.c:1193:40
  10643e:    b0 e1 20 a0       	r0 = uextra(r10, p:0, l:8)
  106442:    42 20             	r2 = 0
  106444:    49 e0 a0 01       	r9 = 416 <UPDATE_SIZE+0x120 : 1a0 >
  106448:    04 9a             	goto 52 <imd_clock_init+0x15C : 10647e >
  10644a:    25 1d             	r5 = r2 + r4			  ## imd.c:1200:22
  10644c:    d8 ee 50 59       	r5 = b[r5+r9] (u)			  ## imd.c:1200:22
  106450:    85 e8 14 a0       	if (r10 != r5) goto 40 <imd_clock_init+0x15A : 10647c >			  ## imd.c:1200:22
  106454:    46 20             	r6 = 0
  106456:    04 90             	goto 32 <imd_clock_init+0x156 : 106478 >
  106458:    47 20             	r7 = 0
  10645a:    45 20             	r5 = 0
  10645c:    04 8a             	goto 20 <imd_clock_init+0x150 : 106472 >
  10645e:    63 1d             	r3 = r6 + r4			  ## imd.c:1090:19
  106460:    51 dd             	r1 = r5 + r4  #			  ## imd.c:1090:31
  106462:    3b 44             		 r3 = b[r3+4] (u)			  ## imd.c:1090:19
  106464:    19 48             	r1 = b[r1+8] (u)			  ## imd.c:1090:31
  106466:    31 1b             	r1 *= r3			  ## imd.c:1090:30
  106468:    01 e8 1f 00       	if (r0 == r1) goto 62 <imd_clock_init+0x188 : 1064aa >			  ## imd.c:1090:30
  10646c:    e7 e0 80 7c       	r7 = r7 + 0x4000			  ## imd.c:1089:3
  106470:    c5 21             	r5 += 1			  ## imd.c:1089:23
  106472:    85 fe f4 07       	ifs (r5 <= 3) goto -24 <imd_clock_init+0x13C : 10645e >
  106476:    c6 21             	r6 += 1			  ## imd.c:1088:22
  106478:    86 fe ee 07       	ifs (r6 <= 3) goto -36 <imd_clock_init+0x136 : 106458 >
  10647c:    c2 21             	r2 += 1			  ## imd.c:1199:32
  10647e:    82 fc e4 1f       	if (r2 <= 15) goto -56 <imd_clock_init+0x128 : 10644a >
  106482:    f8 3f             	r0 += -1			  ## imd.c:1210:2
  106484:    42 20             	r2 = 0			  ## imd.c:1210:2
  106486:    41 20             	r1 = 0			  ## imd.c:1210:2
  106488:    04 96             	goto 44 <imd_clock_init+0x194 : 1064b6 >			  ## imd.c:1210:2
  10648a:    00 e1 3e 42       	r0 = r4 + 574			  ## imd.c:1164:2
  10648e:    02 e1 18 46       	r2 = r4 + 1560			  ## imd.c:1164:2
  106492:    41 20             	r1 = 0			  ## imd.c:1164:2
  106494:    43 e0 8c 04       	r3 = 1164 <WOLASynthesisFilter_Float_M64_m4_r1+0x88 : 48c >			  ## imd.c:1164:2
  106498:    80 ff 66 99 f1 ff 	call -943770 <printf : 1fe04 >			  ## imd.c:1164:2
  10649e:    00 e1 2f 45       	r0 = r4 + 1327			  ## imd.c:1164:2
  1064a2:    80 ff 5c 99 f1 ff 	call -943780 <printf : 1fe04 >			  ## imd.c:1164:2
  1064a8:    f7 9f             	goto -2 <imd_clock_init+0x186 : 1064a8 >			  ## imd.c:1164:2
  1064aa:    61 e1 40 7c       	r1 = r7 & 0xC000			  ## imd.c:1201:8
  1064ae:    60 ac             	r0 = r6 << 12			  ## imd.c:1201:8
  1064b0:    62 e1 40 0d       	r2 = r0 & 0x3000			  ## imd.c:1201:8
  1064b4:    40 20             	r0 = 0			  ## imd.c:1201:8
  1064b6:    c3 ff 24 00 fd 00 	r3 = 16580644 <_HEAP_END+0xD55024 : fd0024 >
  1064bc:    35 60             	r5 = [r3+0] 			  ## imd.c:1211:2
  1064be:    75 e1 70 5e       	r5 = r5 & 0xFFFFF0FF			  ## imd.c:1211:2
  1064c2:    45 e1 30 5e       	r5 = r5 | 0xB00			  ## imd.c:1211:2
  1064c6:    b5 60             	[r3+0] = r5			  ## imd.c:1211:2
  1064c8:    35 60             	r5 = [r3+0] 			  ## imd.c:1212:2
  1064ca:    75 e1 40 5d       	r5 = r5 & 0xFFFFCFFF			  ## imd.c:1212:2
  1064ce:    52 19             	r2 |= r5			  ## imd.c:1212:2
  1064d0:    b2 60             	[r3+0] = r2			  ## imd.c:1212:2
  1064d2:    32 60             	r2 = [r3+0] 			  ## imd.c:1213:2
  1064d4:    72 e1 40 2c       	r2 = r2 & 0xFFFF3FFF			  ## imd.c:1213:2
  1064d8:    21 19             	r1 |= r2			  ## imd.c:1213:2
  1064da:    b1 60             	[r3+0] = r1			  ## imd.c:1213:2
  1064dc:    c1 ff 1c 2d fe 00 	r1 = 16657692 <_HEAP_END+0xD67D1C : fe2d1c >			  ## imd.c:1214:22
  1064e2:    90 60             	[r1+0] = r0			  ## imd.c:1214:22
  1064e4:    d0 ec 8c 01       	r0 = [r8+28]			  ## imd.c:1222:6
  1064e8:    00 66             	r0 = [r0+24] 			  ## imd.c:1222:14
  1064ea:    00 f9 05 04       	if (r0 >= 2) goto 10 <imd_clock_init+0x1D6 : 1064f8 >			  ## imd.c:1222:14
  1064ee:    40 21             	r0 = 1			  ## imd.c:1264:20
  1064f0:    52 ee 8f 0e       	b[r8+239] = r0			  ## imd.c:1264:20
  1064f4:    02 83             	sp += 12			  ## imd.c:1264:20
  1064f6:    5a 04             	{pc, r10-r4} = [sp++]			  ## imd.c:1265:1
  1064f8:    00 e1 3e 42       	r0 = r4 + 574			  ## imd.c:1228:3
  1064fc:    02 e1 18 46       	r2 = r4 + 1560			  ## imd.c:1228:3
  106500:    41 20             	r1 = 0			  ## imd.c:1228:3
  106502:    43 e0 cc 04       	r3 = 1228 <WOLASynthesisFilter_Float_M64_m4_r1+0xC8 : 4cc >			  ## imd.c:1228:3
  106506:    80 ff f8 98 f1 ff 	call -943880 <printf : 1fe04 >			  ## imd.c:1228:3
  10650c:    00 e1 1c 44       	r0 = r4 + 1052			  ## imd.c:1228:3
  106510:    80 ff ee 98 f1 ff 	call -943890 <printf : 1fe04 >			  ## imd.c:1228:3
  106516:    f7 9f             	goto -2 <imd_clock_init+0x1F4 : 106516 >			  ## imd.c:1228:3


lcd_init:
  106518:    77 04             	[--sp] = {rets, r7-r4}			  ## imd.c:433:0
  10651a:    01 16             	r1 = r0			  ## imd.c:433:0
  10651c:    c6 ff 00 c8 10 00 	r6 = 1099776 <backlight_status : 10c800 >			  ## imd.c:433:0
  106522:    d1 ec 65 14       	[r6+324] = r1			  ## imd.c:435:15
  106526:    e1 67             	[r6+28] = r1			  ## imd.c:436:9
  106528:    50 ec 10 21       	r3_r2 = d[r1+16]			  ## imd.c:437:63
  10652c:    c4 ff 80 b9 10 00 	r4 = 1096064 <ui_cfg_data+0x134 : 10b980 >			  ## imd.c:437:63
  106532:    40 16             	r0 = r4			  ## imd.c:437:2
  106534:    80 ff ca 98 f1 ff 	call -943926 <printf : 1fe04 >			  ## imd.c:437:2
  10653a:    40 21             	r0 = 1			  ## imd.c:332:22
  10653c:    52 ee 61 0f       	b[r6+241] = r0			  ## imd.c:332:22
  106540:    52 ee 62 0f       	b[r6+242] = r0			  ## imd.c:333:25
  106544:    d1 ec 6c 03       	r0 = [r6+316]			  ## imd.c:339:13
  106548:    00 44             	if (r0 == 0) goto 8 <lcd_init+0x3A : 106552 >			  ## imd.c:339:13
  10654a:    d1 ec 6c 13       	r1 = [r6+316]			  ## imd.c:340:10
  10654e:    40 21             	r0 = 1			  ## imd.c:340:3
  106550:    c1 00             	call r1			  ## imd.c:340:3
  106552:    60 67             	r0 = [r6+28] 			  ## imd.c:451:11
  106554:    00 5d             	if (r0 == 0) goto 58 <lcd_init+0x78 : 106590 >			  ## imd.c:451:11
  106556:    02 6b             	r2 = [r0+44] 			  ## imd.c:451:19
  106558:    41 21             	r1 = 1			  ## imd.c:278:6
  10655a:    82 41             	if (r2 != 0) goto 2 <lcd_init+0x46 : 10655e >			  ## imd.c:278:6
  10655c:    21 16             	r1 = r2			  ## imd.c:278:6
  10655e:    81 6b             	[r0+44] = r1
  106560:    01 6d             	r1 = [r0+52] 			  ## imd.c:284:14
  106562:    01 45             	if (r1 == 0) goto 10 <lcd_init+0x56 : 10656e >			  ## imd.c:284:14
  106564:    01 6e             	r1 = [r0+56] 			  ## imd.c:285:34
  106566:    40 21             	r0 = 1			  ## imd.c:285:3
  106568:    bf ea 78 fe       	call -784 <imd_debug_config : 10625c >			  ## imd.c:285:3
  10656c:    60 67             	r0 = [r6+28] 
  10656e:    01 6f             	r1 = [r0+60] 			  ## imd.c:288:14
  106570:    01 43             	if (r1 == 0) goto 6 <lcd_init+0x60 : 106578 >			  ## imd.c:288:14
  106572:    41 21             	r1 = 1			  ## imd.c:290:23
  106574:    52 ee 6e 1e       	b[r6+238] = r1			  ## imd.c:290:23
  106578:    01 6b             	r1 = [r0+44] 			  ## imd.c:294:18
  10657a:    c0 ff 00 2d fe 00 	r0 = 16657664 <_HEAP_END+0xD67D00 : fe2d00 >			  ## imd.c:294:18
  106580:    01 57             	if (r1 == 0) goto 46 <lcd_init+0x98 : 1065b0 >			  ## imd.c:294:2
  106582:    81 f8 19 02       	if (r1 != 1) goto 50 <lcd_init+0xA0 : 1065b8 >
  106586:    01 63             	r1 = [r0+12] 			  ## imd.c:296:3
  106588:    71 e1 40 1e       	r1 = r1 & 0xFFFFF3FF			  ## imd.c:296:3
  10658c:    31 2b             	r1 |= 2048			  ## imd.c:296:3
  10658e:    04 93             	goto 38 <lcd_init+0x9E : 1065b6 >			  ## imd.c:296:3
  106590:    00 e1 de 40       	r0 = r4 + 222			  ## imd.c:276:2
  106594:    02 e1 b8 44       	r2 = r4 + 1208			  ## imd.c:276:2
  106598:    41 20             	r1 = 0			  ## imd.c:276:2
  10659a:    43 e0 14 01       	r3 = 276 <UPDATE_SIZE+0x94 : 114 >			  ## imd.c:276:2
  10659e:    80 ff 60 98 f1 ff 	call -944032 <printf : 1fe04 >			  ## imd.c:276:2
  1065a4:    00 e1 9a 40       	r0 = r4 + 154			  ## imd.c:276:2
  1065a8:    80 ff 56 98 f1 ff 	call -944042 <printf : 1fe04 >			  ## imd.c:276:2
  1065ae:    f7 9f             	goto -2 <lcd_init+0x96 : 1065ae >			  ## imd.c:276:2
  1065b0:    01 63             	r1 = [r0+12] 			  ## imd.c:299:3
  1065b2:    71 e1 40 1e       	r1 = r1 & 0xFFFFF3FF			  ## imd.c:299:3
  1065b6:    81 63             	[r0+12] = r1
  1065b8:    00 ef 00 05       	[r0+0] |= 0x20000000			  ## imd.c:304:2
  1065bc:    00 ef 00 0c       	[r0+0] |= 0x8000			  ## imd.c:306:3
  1065c0:    00 ef 80 0b       	[r0+0] |= 0x10000			  ## imd.c:310:2
  1065c4:    00 ef 01 00       	[r0+0] |= 0x1			  ## imd.c:311:2
  1065c8:    67 65             	r7 = [r6+20] 			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:51:2
  1065ca:    c2 ff 82 80 10 00 	r2 = 1081474 <imd_isr : 108082 >			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:51:2
  1065d0:    58 28             	r0 = 104			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:51:2
  1065d2:    41 26             	r1 = 6			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:51:2
  1065d4:    43 20             	r3 = 0			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:51:2
  1065d6:    45 20             	r5 = 0			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:51:2
  1065d8:    c7 00             	call r7			  ## D:\手表公版程序\ac701n_watch_release_v2.0.1v\code\loader\update_ui\cpu\br28\ui_entry.c:51:2
  1065da:    50 ee 6f 0e       	r0 = b[r6+239] (u)			  ## imd.c:314:14
  1065de:    80 42             	if (r0 != 0) goto 4 <lcd_init+0xCC : 1065e4 >			  ## imd.c:314:14
  1065e0:    bf ea 9f fe       	call -706 <imd_clock_init : 106322 >			  ## imd.c:315:3
  1065e4:    40 21             	r0 = 1
  1065e6:    52 ee 6c 0e       	b[r6+236] = r0			  ## imd.c:317:17
  1065ea:    52 ee 6d 5e       	b[r6+237] = r5			  ## imd.c:318:18
  1065ee:    c7 ff 70 c4 10 00 	r7 = 1098864 <imd_pap_io : 10c470 >			  ## imd.c:318:18
  1065f4:    00 e1 30 70       	r0 = r7 + 48			  ## imd.c:40:16
  1065f8:    69 9c             	r1 = r6 + 28
  1065fa:    90 68             	[r1+32] = r0			  ## imd.c:40:16
  1065fc:    97 69             	[r1+36] = r7			  ## imd.c:40:16
  1065fe:    78 98             	r0 = r7 + 24			  ## imd.c:40:16
  106600:    90 6a             	[r1+40] = r0			  ## imd.c:40:16
  106602:    10 60             	r0 = [r1+0] 			  ## imd.c:453:6
  106604:    00 66             	r0 = [r0+24] 			  ## imd.c:453:14
  106606:    00 f8 13 02       	if (r0 == 1) goto 38 <lcd_init+0x118 : 106630 >			  ## imd.c:453:6
  10660a:    80 58             	if (r0 != 0) goto 48 <lcd_init+0x124 : 10663c >
  10660c:    71 6c             	r1 = [r7+48] 			  ## imd.c:456:19
  10660e:    81 52             	if (r1 != 0) goto 36 <lcd_init+0x11C : 106634 >			  ## imd.c:456:19
  106610:    00 e1 de 40       	r0 = r4 + 222			  ## imd.c:459:4
  106614:    02 e1 b8 44       	r2 = r4 + 1208			  ## imd.c:459:4
  106618:    41 20             	r1 = 0			  ## imd.c:459:4
  10661a:    43 e0 cb 01       	r3 = 459 <_MASK_MEM_SIZE+0x27 : 1cb >			  ## imd.c:459:4
  10661e:    80 ff e0 97 f1 ff 	call -944160 <printf : 1fe04 >			  ## imd.c:459:4
  106624:    00 e1 61 40       	r0 = r4 + 97			  ## imd.c:459:4
  106628:    80 ff d6 97 f1 ff 	call -944170 <printf : 1fe04 >			  ## imd.c:459:4
  10662e:    f7 9f             	goto -2 <lcd_init+0x116 : 10662e >			  ## imd.c:459:4
  106630:    71 60             	r1 = [r7+0] 			  ## imd.c:464:19
  106632:    01 51             	if (r1 == 0) goto 34 <lcd_init+0x13E : 106656 >			  ## imd.c:464:19
  106634:    00 e1 ec 60       	r0 = r6 + 236
  106638:    c1 00             	call r1
  10663a:    57 04             	{pc, r7-r4} = [sp++]
  10663c:    71 6c             	r1 = [r7+48] 			  ## imd.c:473:19
  10663e:    01 5b             	if (r1 == 0) goto 54 <lcd_init+0x15E : 106676 >			  ## imd.c:473:19
  106640:    05 e1 ec 60       	r5 = r6 + 236			  ## imd.c:474:4
  106644:    50 16             	r0 = r5			  ## imd.c:474:4
  106646:    c1 00             	call r1			  ## imd.c:474:4
  106648:    d0 ec 64 04       	r0 = [r6+68]			  ## imd.c:45:9
  10664c:    10 44             	if (r0 == 0) goto 72 <lcd_init+0x17E : 106696 >
  10664e:    71 66             	r1 = [r7+24] 			  ## imd.c:479:19
  106650:    11 42             	if (r1 == 0) goto 68 <lcd_init+0x17E : 106696 >			  ## imd.c:479:19
  106652:    50 16             	r0 = r5			  ## imd.c:480:4
  106654:    f7 91             	goto -30 <lcd_init+0x120 : 106638 >
  106656:    00 e1 de 40       	r0 = r4 + 222			  ## imd.c:467:4
  10665a:    02 e1 b8 44       	r2 = r4 + 1208			  ## imd.c:467:4
  10665e:    41 20             	r1 = 0			  ## imd.c:467:4
  106660:    43 e0 d3 01       	r3 = 467 <_MASK_MEM_SIZE+0x2F : 1d3 >			  ## imd.c:467:4
  106664:    80 ff 9a 97 f1 ff 	call -944230 <printf : 1fe04 >			  ## imd.c:467:4
  10666a:    00 e1 61 40       	r0 = r4 + 97			  ## imd.c:467:4
  10666e:    80 ff 90 97 f1 ff 	call -944240 <printf : 1fe04 >			  ## imd.c:467:4
  106674:    f7 9f             	goto -2 <lcd_init+0x15C : 106674 >			  ## imd.c:467:4
  106676:    00 e1 de 40       	r0 = r4 + 222			  ## imd.c:476:4
  10667a:    02 e1 b8 44       	r2 = r4 + 1208			  ## imd.c:476:4
  10667e:    41 20             	r1 = 0			  ## imd.c:476:4
  106680:    43 e0 dc 01       	r3 = 476 <_MASK_MEM_SIZE+0x38 : 1dc >			  ## imd.c:476:4
  106684:    80 ff 7a 97 f1 ff 	call -944262 <printf : 1fe04 >			  ## imd.c:476:4
  10668a:    00 e1 61 40       	r0 = r4 + 97			  ## imd.c:476:4
  10668e:    80 ff 70 97 f1 ff 	call -944272 <printf : 1fe04 >			  ## imd.c:476:4
  106694:    f7 9f             	goto -2 <lcd_init+0x17C : 106694 >			  ## imd.c:476:4
  106696:    00 e1 de 40       	r0 = r4 + 222			  ## imd.c:482:4
  10669a:    02 e1 b8 44       	r2 = r4 + 1208			  ## imd.c:482:4
  10669e:    41 20             	r1 = 0			  ## imd.c:482:4
  1066a0:    43 e0 e2 01       	r3 = 482 <_MASK_MEM_SIZE+0x3E : 1e2 >			  ## imd.c:482:4
  1066a4:    80 ff 5a 97 f1 ff 	call -944294 <printf : 1fe04 >			  ## imd.c:482:4
  1066aa:    00 e1 61 40       	r0 = r4 + 97			  ## imd.c:482:4
  1066ae:    80 ff 50 97 f1 ff 	call -944304 <printf : 1fe04 >			  ## imd.c:482:4
  1066b4:    f7 9f             	goto -2 <lcd_init+0x19C : 1066b4 >			  ## imd.c:482:4


sbrk:
  1066b6:    7a 04             	[--sp] = {rets, r10-r4}			  ## mem_heap.c:985:0
  1066b8:    49 e0 01 00       	r9 = 1 <moveable_slot_size+0x1 : 1 >			  ## mem_heap.c:985:0
  1066bc:    43 21             	r3 = 1			  ## mem_heap.c:993:65
  1066be:    b0 ee 00 00       	ifs (r0 <= 0) {			  ## mem_heap.c:993:65
  1066c2:    43 20             		r3 = 0
                               	}			  ## mem_heap.c:993:65
  1066c4:    c8 ff fc c7 10 00 	r8 = 1099772 <sbrk.__init_addr : 10c7fc >			  ## mem_heap.c:993:65
  1066ca:    d0 ec 80 70       	r7 = [r8+0]			  ## mem_heap.c:989:6
  1066ce:    b7 e8 00 10       	if (r7 != 0) {			  ## mem_heap.c:989:6
  1066d2:    75 16             		r5 = r7
                               	} else {			  ## mem_heap.c:989:6
  1066d4:    c5 ff 8c cd 10 00 		r5 = 1101196
                               	} <text_end : 10cd8c >			  ## mem_heap.c:989:6
  1066da:    56 1c             	r6 = r5 + r0			  ## mem_heap.c:993:19
  1066dc:    ca ff 00 b0 27 00 	r10 = 2600960 <_HEAP_END : 27b000 >			  ## mem_heap.c:993:31
  1066e2:    42 21             	r2 = 1			  ## mem_heap.c:993:31
  1066e4:    96 e9 00 0a       	if (r6 < r10) {			  ## mem_heap.c:993:31
  1066e8:    42 20             		r2 = 0
                               	}			  ## mem_heap.c:993:31
  1066ea:    11 3f             	r1 = -1			  ## mem_heap.c:993:51
  1066ec:    13 ea 00 02       	if ((r3 & r2) == 0) {			  ## mem_heap.c:993:51
  1066f0:    51 16             		r1 = r5
                               	}			  ## mem_heap.c:993:51
  1066f2:    44 21             	r4 = 1			  ## mem_heap.c:993:65
  1066f4:    30 ed 01 00       	ifs (r0 >= 1) {			  ## mem_heap.c:993:65
  1066f8:    44 20             		r4 = 0
                               	}			  ## mem_heap.c:993:65
  1066fa:    16 e9 00 0a       	if (r6 >= r10) {			  ## mem_heap.c:993:65
  1066fe:    c1 14             		r9 = 0
                               	}			  ## mem_heap.c:993:31
  106700:    07 43             	if (r7 == 0) goto 6 <sbrk+0x52 : 106708 >			  ## mem_heap.c:993:31
  106702:    90 e1 40 09       	r0 = r4 | r9			  ## mem_heap.c:1004:1
  106706:    00 46             	if (r0 == 0) goto 12 <sbrk+0x5E : 106714 >
  106708:    90 e1 32 02       	r0 = r3 & r2			  ## mem_heap.c:993:51
  10670c:    80 41             	if (r0 != 0) goto 2 <sbrk+0x5A : 106710 >			  ## mem_heap.c:993:51
  10670e:    65 16             	r5 = r6			  ## mem_heap.c:993:51
  106710:    d0 ec 81 50       	[r8+0] = r5			  ## mem_heap.c:1004:1
  106714:    10 16             	r0 = r1			  ## mem_heap.c:1004:1
  106716:    5a 04             	{pc, r10-r4} = [sp++]			  ## mem_heap.c:1004:1


mem_heap_init:
  106718:    78 04             	[--sp] = {rets, r8-r4}			  ## mem_heap.c:338:0
  10671a:    c4 ff 00 c8 10 00 	r4 = 1099776 <backlight_status : 10c800 >			  ## mem_heap.c:338:0
  106720:    50 ee 4c 0a       	r0 = b[r4+172] (u)			  ## mem_heap.c:341:15
  106724:    90 49             	if (r0 != 0) goto 82 <mem_heap_init+0x60 : 106778 >			  ## mem_heap.c:341:15
  106726:    c0 ff 72 9a 10 00 	r0 = 1088114 <realloc+0x450 : 109a72 >			  ## mem_heap.c:219:30
  10672c:    05 e1 7c 40       	r5 = r4 + 124			  ## mem_heap.c:219:30
  106730:    c0 d4             	r8 = 0  #			  ## mem_heap.c:219:30
  106732:    d0 66             		 [r5+24] = r0			  ## mem_heap.c:219:30
  106734:    d0 ec 51 81       	[r5+16] = r8			  ## mem_heap.c:350:25
  106738:    58 20             	r0 = 96			  ## mem_heap.c:352:15
  10673a:    51 9d             	call -134 <sbrk : 1066b6 >			  ## mem_heap.c:352:15
  10673c:    09 9f             	r1 = r0 + 31			  ## mem_heap.c:354:25
  10673e:    71 e1 1f 10       	r1 = r1 & 0xFFFFFFE0			  ## mem_heap.c:354:25
  106742:    d1 60             	[r5+0] = r1			  ## mem_heap.c:354:15
  106744:    52 64             	r2 = [r5+16] 			  ## mem_heap.c:357:51
  106746:    93 1c             	r3 = r1 + r2			  ## mem_heap.c:354:25
  106748:    07 e1 20 30       	r7 = r3 + 32			  ## mem_heap.c:357:29
  10674c:    97 60             	[r1+0] = r7			  ## mem_heap.c:357:12
  10674e:    91 61             	[r1+4] = r1			  ## mem_heap.c:358:12
  106750:    c6 ff ef cd ab a5 	r6 = 2779500015 <_HEAP_END+0x1841DEF : 1abcdef >			  ## mem_heap.c:359:12
  106756:    96 62             	[r1+8] = r6			  ## mem_heap.c:359:12
  106758:    d7 61             	[r5+4] = r7			  ## mem_heap.c:361:19
  10675a:    c6 ff ae ea 5a 5a 	r6 = 1515907758 <_HEAP_END+0x333AAE : 5aeaae >			  ## mem_heap.c:362:25
  106760:    b6 6a             	[r3+40] = r6			  ## mem_heap.c:362:25
  106762:    b7 68             	[r3+32] = r7			  ## mem_heap.c:363:25
  106764:    b1 69             	[r3+36] = r1			  ## mem_heap.c:364:25
  106766:    d8 20             	r0 += 96			  ## mem_heap.c:371:81
  106768:    d0 63             	[r5+12] = r0			  ## mem_heap.c:371:20
  10676a:    d1 62             	[r5+8] = r1			  ## mem_heap.c:374:17
  10676c:    d2 67             	[r5+28] = r2			  ## mem_heap.c:376:2
  10676e:    d0 ec 55 81       	[r5+20] = r8			  ## spinlock.h:69:15
  106772:    40 21             	r0 = 1			  ## mem_heap.c:384:21
  106774:    52 ee 4c 0a       	b[r4+172] = r0			  ## mem_heap.c:384:21
  106778:    58 04             	{pc, r8-r4} = [sp++]			  ## mem_heap.c:385:1


malloc:
  10677a:    79 04             	[--sp] = {rets, r9-r4}			  ## mem_heap.c:471:0
  10677c:    64 e0 00 13       	r1 = rets			  ## mem_heap.c:477:3
  106780:    c8 ff 00 c8 10 00 	r8 = 1099776 <backlight_status : 10c800 >			  ## mem_heap.c:477:3
  106786:    d0 ec 89 13       	[r8+56] = r1			  ## mem_heap.c:477:3
  10678a:    20 4a             	if (r0 == 0) goto 148 <malloc+0xA6 : 106820 >			  ## mem_heap.c:477:3
  10678c:    c0 3f             	r0 += 31			  ## mem_heap.c:487:9
  10678e:    76 e1 1f 00       	r6 = r0 & 0xFFFFFFE0			  ## mem_heap.c:487:9
  106792:    b6 ec 20 00       	if (r6 <= 32) {
  106796:    4e 20             		r6 = 32
                               	}			  ## mem_heap.c:489:6
  106798:    51 9f             	call -130 <mem_heap_init : 106718 >			  ## mem_heap.c:483:2
  10679a:    80 ff 7a d8 ff ff 	call -10118 <local_irq_disable : 10401a >			  ## spinlock.h:76:2
  1067a0:    d0 ec 8c 18       	r1 = [r8+140]			  ## mem_heap.c:495:22
  1067a4:    d0 ec 80 08       	r0 = [r8+128]			  ## mem_heap.c:495:22
  1067a8:    81 ec 5e 60       	if (r6 <= r1) goto 188 <malloc+0xEE : 106868 >			  ## mem_heap.c:495:22
  1067ac:    04 f1 80 60       	r4 = r6 + 128  #			  ## mem_heap.c:589:43
  1067b0:    00 61             		 r0 = [r0+4] 			  ## mem_heap.c:590:24
  1067b2:    00 62             	r0 = [r0+8] 			  ## mem_heap.c:590:30
  1067b4:    c9 ff ef cd ab a5 	r9 = 2779500015 <_HEAP_END+0x1841DEF : 1abcdef >			  ## mem_heap.c:590:35
  1067ba:    45 20             	r5 = 0			  ## mem_heap.c:590:35
  1067bc:    89 e8 0f 00       	if (r0 != r9) goto 30 <malloc+0x64 : 1067de >			  ## mem_heap.c:590:35
  1067c0:    40 20             	r0 = 0			  ## mem_heap.c:593:14
  1067c2:    bf ea 78 ff       	call -272 <sbrk : 1066b6 >			  ## mem_heap.c:593:14
  1067c6:    d0 ec 88 18       	r1 = [r8+136]			  ## mem_heap.c:594:16
  1067ca:    80 e8 06 10       	if (r1 != r0) goto 12 <malloc+0x60 : 1067da >
  1067ce:    d0 ec 80 08       	r0 = [r8+128]			  ## mem_heap.c:597:39
  1067d2:    01 61             	r1 = [r0+4] 			  ## mem_heap.c:597:81
  1067d4:    12 20             	r2 = -32			  ## mem_heap.c:597:87
  1067d6:    29 1e             	r1 = r2 - r1			  ## mem_heap.c:597:87
  1067d8:    15 1c             	r5 = r1 + r0			  ## mem_heap.c:597:47
  1067da:    4c 1f             	r4 = r4 - r5			  ## mem_heap.c:600:34
  1067dc:    45 21             	r5 = 1
  1067de:    40 16             	r0 = r4			  ## mem_heap.c:607:13
  1067e0:    bf ea 69 ff       	call -302 <sbrk : 1066b6 >			  ## mem_heap.c:607:13
  1067e4:    70 f8 0e fe       	if (r0 == -1) goto 28 <malloc+0x8A : 106804 >
  1067e8:    d0 ec 88 18       	r1 = [r8+136]			  ## mem_heap.c:617:15
  1067ec:    00 e8 1a 10       	if (r1 == r0) goto 52 <malloc+0xAA : 106824 >			  ## mem_heap.c:617:15
  1067f0:    d0 ec 80 18       	r1 = [r8+128]			  ## mem_heap.c:620:30
  1067f4:    0a 9f             	r2 = r0 + 31			  ## mem_heap.c:618:15
  1067f6:    77 e1 1f 20       	r7 = r2 & 0xFFFFFFE0			  ## mem_heap.c:618:15
  1067fa:    f1 61             	[r7+4] = r1			  ## mem_heap.c:620:19
  1067fc:    d0 ec 79 90       	[r7+8] = r9			  ## mem_heap.c:621:19
  106800:    97 60             	[r1+0] = r7			  ## mem_heap.c:626:26
  106802:    04 91             	goto 34 <malloc+0xAC : 106826 >			  ## mem_heap.c:626:26
  106804:    c0 ff 7b 9a 10 00 	r0 = 1088123 <realloc+0x459 : 109a7b >			  ## mem_heap.c:609:3
  10680a:    41 16             	r1 = r4			  ## mem_heap.c:609:3
  10680c:    80 ff f2 95 f1 ff 	call -944654 <printf : 1fe04 >			  ## mem_heap.c:609:3
  106812:    00 e1 a4 80       	r0 = r8 + 164			  ## mem_heap.c:610:3
  106816:    c0 eb 01 00       	[r0+0] += 1			  ## mem_heap.c:610:3
  10681a:    80 ff 0c d8 ff ff 	call -10228 <local_irq_enable : 10402c >			  ## spinlock.h:87:2
  106820:    44 20             	r4 = 0
  106822:    44 83             	goto 262 <malloc+0x1B0 : 10692a >
  106824:    17 3f             	r7 = -1
  106826:    40 18             	r0 += r4			  ## mem_heap.c:629:31
  106828:    d0 ec 89 08       	[r8+136] = r0			  ## mem_heap.c:629:20
  10682c:    71 e1 1f 00       	r1 = r0 & 0xFFFFFFE0			  ## mem_heap.c:631:40
  106830:    c0 ff ae ea 5a 5a 	r0 = 1515907758 <_HEAP_END+0x333AAE : 5aeaae >			  ## mem_heap.c:632:20
  106836:    30 f1 e0 1f       	r0 = r1 + -32  #			  ## mem_heap.c:631:83
  10683a:    90 7a             		 [r1+-24] = r0			  ## mem_heap.c:632:20
  10683c:    90 78             	[r1+-32] = r0			  ## mem_heap.c:633:20
  10683e:    77 f8 03 fe       	if (r7 == -1) goto 6 <malloc+0xCE : 106848 >			  ## mem_heap.c:633:20
  106842:    97 79             	[r1+-28] = r7			  ## mem_heap.c:648:21
  106844:    f0 60             	[r7+0] = r0			  ## mem_heap.c:649:19
  106846:    04 88             	goto 16 <malloc+0xDE : 106858 >			  ## mem_heap.c:649:19
  106848:    d0 ec 80 78       	r7 = [r8+128]
  10684c:    05 50             	if (r5 == 0) goto 32 <malloc+0xF4 : 10686e >			  ## mem_heap.c:639:7
  10684e:    72 61             	r2 = [r7+4] 			  ## mem_heap.c:640:42
  106850:    92 79             	[r1+-28] = r2			  ## mem_heap.c:640:22
  106852:    27 d6             	r7 = r2  #			  ## mem_heap.c:656:28
  106854:    71 61             		 r1 = [r7+4] 			  ## mem_heap.c:641:22
  106856:    90 60             	[r1+0] = r0			  ## mem_heap.c:641:33
  106858:    81 16             	r1 = r8			  ## mem_heap.c:651:19
  10685a:    d0 ec 13 08       	[++r1=128] = r0			  ## mem_heap.c:651:19
  10685e:    12 63             	r2 = [r1+12] 			  ## mem_heap.c:653:25
  106860:    42 18             	r2 += r4			  ## mem_heap.c:653:25
  106862:    92 63             	[r1+12] = r2			  ## mem_heap.c:653:25
  106864:    92 66             	[r1+24] = r2			  ## mem_heap.c:654:2
  106866:    87 4e             	if (r7 != 0) goto 28 <malloc+0x10A : 106884 >			  ## mem_heap.c:654:2
  106868:    d0 ec 84 78       	r7 = [r8+132]			  ## mem_heap.c:505:57
  10686c:    04 8b             	goto 22 <malloc+0x10A : 106884 >
  10686e:    81 d6             	r1 = r8  #			  ## mem_heap.c:651:19
  106870:    97 79             		 [r1+-28] = r7			  ## mem_heap.c:643:22
  106872:    f0 60             	[r7+0] = r0			  ## mem_heap.c:644:27
  106874:    d0 ec 79 90       	[r7+8] = r9			  ## mem_heap.c:645:27
  106878:    d0 ec 13 08       	[++r1=128] = r0			  ## mem_heap.c:651:19
  10687c:    12 63             	r2 = [r1+12] 			  ## mem_heap.c:653:25
  10687e:    42 18             	r2 += r4			  ## mem_heap.c:653:25
  106880:    92 63             	[r1+12] = r2			  ## mem_heap.c:653:25
  106882:    92 66             	[r1+24] = r2			  ## mem_heap.c:654:2
  106884:    c1 ff ef cd ab a5 	r1 = 2779500015 <_HEAP_END+0x1841DEF : 1abcdef >
  10688a:    04 8c             	goto 24 <malloc+0x12A : 1068a4 >
  10688c:    72 62             	r2 = [r7+8] 			  ## mem_heap.c:506:13
  10688e:    81 e8 08 20       	if (r2 != r1) goto 16 <malloc+0x128 : 1068a2 >			  ## mem_heap.c:506:13
  106892:    04 f1 20 70       	r4 = r7 + 32  #			  ## mem_heap.c:507:49
  106896:    72 60             		 r2 = [r7+0] 			  ## mem_heap.c:507:25
  106898:    23 1f             	r3 = r2 - r4			  ## mem_heap.c:507:31
  10689a:    06 e9 06 30       	if (r3 >= r6) goto 12 <malloc+0x130 : 1068aa >			  ## mem_heap.c:506:7
  10689e:    27 16             	r7 = r2
  1068a0:    04 81             	goto 2 <malloc+0x12A : 1068a4 >
  1068a2:    77 60             	r7 = [r7+0] 
  1068a4:    80 e8 f2 71       	if (r7 != r0) goto -28 <malloc+0x112 : 10688c >
  1068a8:    c7 81             	goto -254 <malloc+0x32 : 1067ac >
  1068aa:    00 e1 40 60       	r0 = r6 + 64			  ## mem_heap.c:511:99
  1068ae:    00 e9 0c 30       	if (r3 >= r0) goto 24 <malloc+0x150 : 1068ca >			  ## mem_heap.c:511:99
  1068b2:    c0 ff ae ea 5a 5a 	r0 = 1515907758 <_HEAP_END+0x333AAE : 5aeaae >			  ## mem_heap.c:544:15
  1068b8:    81 d6             	r1 = r8  #			  ## mem_heap.c:546:5
  1068ba:    f0 62             		 [r7+8] = r0			  ## mem_heap.c:544:15
  1068bc:    d0 ec 1e 09       	r0 = [++r1=156]			  ## mem_heap.c:546:5
  1068c0:    13 20             	r3 = -32			  ## mem_heap.c:546:5
  1068c2:    bb 1f             	r3 = r3 - r7			  ## mem_heap.c:546:5
  1068c4:    32 18             	r2 += r3			  ## mem_heap.c:546:5
  1068c6:    20 18             	r0 += r2			  ## mem_heap.c:546:5
  1068c8:    04 90             	goto 32 <malloc+0x170 : 1068ea >			  ## mem_heap.c:546:5
  1068ca:    c0 1d             	r0 = r4 + r6			  ## mem_heap.c:522:62
  1068cc:    81 62             	[r0+8] = r1			  ## mem_heap.c:524:16
  1068ce:    20 eb 84 00       	[r0+] = {r7, r2}			  ## mem_heap.c:525:16
  1068d2:    f0 60             	[r7+0] = r0			  ## mem_heap.c:532:15
  1068d4:    c1 ff ae ea 5a 5a 	r1 = 1515907758 <_HEAP_END+0x333AAE : 5aeaae >			  ## mem_heap.c:533:15
  1068da:    f1 62             	[r7+8] = r1			  ## mem_heap.c:533:15
  1068dc:    01 60             	r1 = [r0+0] 			  ## mem_heap.c:534:11
  1068de:    81 d6             	r1 = r8  #			  ## mem_heap.c:535:5
  1068e0:    90 61             		 [r1+4] = r0			  ## mem_heap.c:534:22
  1068e2:    d0 ec 1e 09       	r0 = [++r1=156]			  ## mem_heap.c:535:5
  1068e6:    60 18             	r0 += r6			  ## mem_heap.c:511:79
  1068e8:    c8 20             	r0 += 32			  ## mem_heap.c:535:5
  1068ea:    90 60             	[r1+0] = r0
  1068ec:    11 61             	r1 = [r1+4] 
  1068ee:    91 e9 00 00       	if (r1 < r0) {
  1068f2:    d0 ec 81 0a       		[r8+160] = r0
                               	}
  1068f6:    d0 ec 84 08       	r0 = [r8+132]			  ## mem_heap.c:548:24
  1068fa:    80 e8 10 70       	if (r7 != r0) goto 32 <malloc+0x1A4 : 10691e >			  ## mem_heap.c:548:24
  1068fe:    d0 ec 80 08       	r0 = [r8+128]
  106902:    c2 ff ae ea 5a 5a 	r2 = 1515907758 <_HEAP_END+0x333AAE : 5aeaae >
  106908:    23 16             	r3 = r2			  ## mem_heap.c:551:18
  10690a:    71 16             	r1 = r7			  ## mem_heap.c:551:18
  10690c:    04 84             	goto 8 <malloc+0x19C : 106916 >			  ## mem_heap.c:551:18
  10690e:    00 e8 04 10       	if (r1 == r0) goto 8 <malloc+0x1A0 : 10691a >
  106912:    11 60             	r1 = [r1+0] 			  ## mem_heap.c:552:17
  106914:    13 62             	r3 = [r1+8] 
  106916:    02 e8 fa 31       	if (r3 == r2) goto -12 <malloc+0x194 : 10690e >
  10691a:    d0 ec 85 18       	[r8+132] = r1			  ## mem_heap.c:554:20
  10691e:    80 ff 08 d7 ff ff 	call -10488 <local_irq_enable : 10402c >			  ## spinlock.h:87:2
  106924:    d0 ec 88 03       	r0 = [r8+56]			  ## mem_heap.c:570:21
  106928:    f0 63             	[r7+12] = r0			  ## mem_heap.c:570:19
  10692a:    40 16             	r0 = r4			  ## mem_heap.c:659:1
  10692c:    59 04             	{pc, r9-r4} = [sp++]			  ## mem_heap.c:659:1


delay_2ms:
  10692e:    76 04             	[--sp] = {rets, r6-r4}			  ## ui_entry.c:92:0
  106930:    04 16             	r4 = r0			  ## ui_entry.c:92:0
  106932:    45 20             	r5 = 0			  ## ui_entry.c:92:0
  106934:    c6 ff 00 c8 10 00 	r6 = 1099776 <backlight_status : 10c800 >			  ## ui_entry.c:92:0
  10693a:    04 8e             	goto 28 <delay_2ms+0x2A : 106958 >			  ## ui_entry.c:92:0
  10693c:    61 64             	r1 = [r6+16] 			  ## ui_entry.c:95:13
  10693e:    01 43             	if (r1 == 0) goto 6 <delay_2ms+0x18 : 106946 >			  ## ui_entry.c:95:13
  106940:    40 22             	r0 = 2			  ## ui_entry.c:96:13
  106942:    c1 00             	call r1			  ## ui_entry.c:96:13
  106944:    04 88             	goto 16 <delay_2ms+0x28 : 106956 >			  ## ui_entry.c:96:13
  106946:    40 e0 84 ea       	r0 = -5500 <_HEAP_END+0x1D83A84 : 1ffea84 >
  10694a:    04 84             	goto 8 <delay_2ms+0x26 : 106954 >
  10694c:    00 00             	nop			  ## ui_entry.c:100:17
  10694e:    00 00             	nop			  ## ui_entry.c:101:17
  106950:    00 00             	nop			  ## ui_entry.c:102:17
  106952:    c0 21             	r0 += 1			  ## ui_entry.c:99:13
  106954:    f0 5b             	if (r0 != 0) goto -10 <delay_2ms+0x1E : 10694c >
  106956:    c5 21             	r5 += 1			  ## ui_entry.c:94:28
  106958:    84 ed f0 51       	ifs (r5 < r4) goto -32 <delay_2ms+0xE : 10693c >
  10695c:    56 04             	{pc, r6-r4} = [sp++]			  ## ui_entry.c:107:1


imd_sfr_pop:
  10695e:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd.c:1304:0
  106964:    50 ee 00 1f       	r1 = b[r0+240] (u)			  ## imd.c:1306:14
  106968:    11 48             	if (r1 == 0) goto 80 <imd_sfr_pop+0x5C : 1069ba >			  ## imd.c:1306:14
  10696a:    41 20             	r1 = 0			  ## imd.c:1309:18
  10696c:    02 e1 f0 00       	r2 = r0 + 240			  ## imd.c:1309:18
  106970:    a9 40             	b[r2+0] = r1			  ## imd.c:1309:18
  106972:    21 61             	r1 = [r2+4] 			  ## imd.c:1312:21
  106974:    c3 ff 00 2d fe 00 	r3 = 16657664 <_HEAP_END+0xD67D00 : fe2d00 >			  ## imd.c:1312:21
  10697a:    b1 60             	[r3+0] = r1			  ## imd.c:1312:19
  10697c:    21 62             	r1 = [r2+8] 			  ## imd.c:1313:21
  10697e:    b1 61             	[r3+4] = r1			  ## imd.c:1313:19
  106980:    21 63             	r1 = [r2+12] 			  ## imd.c:1314:21
  106982:    b1 62             	[r3+8] = r1			  ## imd.c:1314:19
  106984:    21 64             	r1 = [r2+16] 			  ## imd.c:1315:21
  106986:    b1 63             	[r3+12] = r1			  ## imd.c:1315:19
  106988:    21 65             	r1 = [r2+20] 			  ## imd.c:1317:32
  10698a:    b1 64             	[r3+16] = r1			  ## imd.c:1317:30
  10698c:    21 66             	r1 = [r2+24] 			  ## imd.c:1318:32
  10698e:    b1 65             	[r3+20] = r1			  ## imd.c:1318:30
  106990:    21 67             	r1 = [r2+28] 			  ## imd.c:1319:32
  106992:    b1 66             	[r3+24] = r1			  ## imd.c:1319:30
  106994:    21 68             	r1 = [r2+32] 			  ## imd.c:1320:32
  106996:    b1 67             	[r3+28] = r1			  ## imd.c:1320:30
  106998:    21 69             	r1 = [r2+36] 			  ## imd.c:1322:24
  10699a:    b1 68             	[r3+32] = r1			  ## imd.c:1322:22
  10699c:    21 6a             	r1 = [r2+40] 			  ## imd.c:1323:24
  10699e:    b1 69             	[r3+36] = r1			  ## imd.c:1323:22
  1069a0:    21 6b             	r1 = [r2+44] 			  ## imd.c:1325:24
  1069a2:    b1 6a             	[r3+40] = r1			  ## imd.c:1325:22
  1069a4:    21 6c             	r1 = [r2+48] 			  ## imd.c:1326:24
  1069a6:    b1 6b             	[r3+44] = r1			  ## imd.c:1326:22
  1069a8:    21 6d             	r1 = [r2+52] 			  ## imd.c:1327:24
  1069aa:    b1 6c             	[r3+48] = r1			  ## imd.c:1327:22
  1069ac:    21 6e             	r1 = [r2+56] 			  ## imd.c:1329:24
  1069ae:    b1 6d             	[r3+52] = r1			  ## imd.c:1329:22
  1069b0:    21 6f             	r1 = [r2+60] 			  ## imd.c:1330:24
  1069b2:    b1 6e             	[r3+56] = r1			  ## imd.c:1330:22
  1069b4:    d1 ec 00 03       	r0 = [r0+304]			  ## imd.c:1331:24
  1069b8:    b0 6f             	[r3+60] = r0			  ## imd.c:1331:22
  1069ba:    80 00             	rts			  ## imd.c:1334:1


lcd_wait:
  1069bc:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd.c:666:0
  1069c2:    50 ee 0d 1e       	r1 = b[r0+237] (u)			  ## imd.c:661:19
  1069c6:    f1 5d             	if (r1 != 0) goto -6 <lcd_wait+0x6 : 1069c2 >			  ## imd.c:668:2
  1069c8:    80 00             	rts			  ## imd.c:677:1


imd_irq_disable:
  1069ca:    74 04             	[--sp] = {rets, r4}			  ## imd.c:73:0
  1069cc:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd.c:73:0
  1069d2:    00 67             	r0 = [r0+28] 			  ## imd.c:73:0
  1069d4:    00 4e             	if (r0 == 0) goto 28 <imd_irq_disable+0x28 : 1069f2 >			  ## imd.c:73:0
  1069d6:    c1 ff 00 2d fe 00 	r1 = 16657664 <_HEAP_END+0xD67D00 : fe2d00 >			  ## imd.c:75:5
  1069dc:    c0 ef 00 15       	[r1+0] &= 0xDFFFFFFF			  ## imd.c:75:5
  1069e0:    00 66             	r0 = [r0+24] 			  ## imd.c:76:18
  1069e2:    00 f8 17 04       	if (r0 == 2) goto 46 <imd_irq_disable+0x4A : 106a14 >			  ## imd.c:76:2
  1069e6:    00 f8 18 02       	if (r0 == 1) goto 48 <imd_irq_disable+0x50 : 106a1a >
  1069ea:    80 5b             	if (r0 != 0) goto 54 <imd_irq_disable+0x58 : 106a22 >
  1069ec:    00 e1 20 10       	r0 = r1 + 32
  1069f0:    04 96             	goto 44 <imd_irq_disable+0x54 : 106a1e >
  1069f2:    c4 ff 1a ba 10 00 	r4 = 1096218 <imd_clock_init.div+0x5A : 10ba1a >			  ## imd.c:74:2
  1069f8:    00 e1 44 40       	r0 = r4 + 68			  ## imd.c:74:2
  1069fc:    02 e1 1e 44       	r2 = r4 + 1054			  ## imd.c:74:2
  106a00:    41 20             	r1 = 0			  ## imd.c:74:2
  106a02:    53 2a             	r3 = 74			  ## imd.c:74:2
  106a04:    80 ff fa 93 f1 ff 	call -945158 <printf : 1fe04 >			  ## imd.c:74:2
  106a0a:    40 16             	r0 = r4			  ## imd.c:74:2
  106a0c:    80 ff f2 93 f1 ff 	call -945166 <printf : 1fe04 >			  ## imd.c:74:2
  106a12:    f7 9f             	goto -2 <imd_irq_disable+0x48 : 106a12 >			  ## imd.c:74:2
  106a14:    00 e1 34 10       	r0 = r1 + 52
  106a18:    04 82             	goto 4 <imd_irq_disable+0x54 : 106a1e >
  106a1a:    00 e1 28 10       	r0 = r1 + 40
  106a1e:    c0 ef 00 05       	[r0+0] &= 0xDFFFFFFF
  106a22:    54 04             	{pc, r4} = [sp++]			  ## imd.c:87:1


lcd_write_cmd:
  106a24:    77 04             	[--sp] = {rets, r7-r4}			  ## imd.c:496:0
  106a26:    c7 ff 00 c8 10 00 	r7 = 1099776 <backlight_status : 10c800 >			  ## imd.c:496:0
  106a2c:    24 d6             	r4 = r2  #			  ## imd.c:496:0
  106a2e:    73 67             		 r3 = [r7+28] 			  ## imd.c:496:0
  106a30:    15 16             	r5 = r1			  ## imd.c:496:0
  106a32:    06 16             	r6 = r0			  ## imd.c:496:0
  106a34:    03 52             	if (r3 == 0) goto 36 <lcd_write_cmd+0x36 : 106a5a >			  ## imd.c:496:0
  106a36:    41 93             	call -218 <imd_sfr_pop : 10695e >			  ## imd.c:500:2
  106a38:    61 81             	call -126 <lcd_wait : 1069bc >			  ## imd.c:502:5
  106a3a:    61 87             	call -114 <imd_irq_disable : 1069ca >			  ## imd.c:503:2
  106a3c:    70 67             	r0 = [r7+28] 			  ## imd.c:505:7
  106a3e:    01 66             	r1 = [r0+24] 			  ## imd.c:505:15
  106a40:    c0 ff 70 c4 10 00 	r0 = 1098864 <imd_pap_io : 10c470 >			  ## imd.c:505:15
  106a46:    01 f8 03 04       	if (r1 == 2) goto 6 <lcd_write_cmd+0x2C : 106a50 >			  ## imd.c:505:15
  106a4a:    01 f8 18 02       	if (r1 == 1) goto 48 <lcd_write_cmd+0x5A : 106a7e >
  106a4e:    91 40             	if (r1 != 0) goto 64 <lcd_write_cmd+0x6C : 106a90 >
  106a50:    71 6f             	r1 = [r7+60] 			  ## imd.c:45:9
  106a52:    01 5e             	if (r1 == 0) goto 60 <lcd_write_cmd+0x6C : 106a90 >
  106a54:    03 6d             	r3 = [r0+52] 			  ## imd.c:508:19
  106a56:    83 58             	if (r3 != 0) goto 48 <lcd_write_cmd+0x64 : 106a88 >			  ## imd.c:508:19
  106a58:    57 04             	{pc, r7-r4} = [sp++]			  ## imd.c:518:1
  106a5a:    c4 ff 1a ba 10 00 	r4 = 1096218 <imd_clock_init.div+0x5A : 10ba1a >			  ## imd.c:498:2
  106a60:    00 e1 44 40       	r0 = r4 + 68			  ## imd.c:498:2
  106a64:    02 e1 1e 44       	r2 = r4 + 1054			  ## imd.c:498:2
  106a68:    41 20             	r1 = 0			  ## imd.c:498:2
  106a6a:    43 e0 f2 01       	r3 = 498 <_MASK_MEM_SIZE+0x4E : 1f2 >			  ## imd.c:498:2
  106a6e:    80 ff 90 93 f1 ff 	call -945264 <printf : 1fe04 >			  ## imd.c:498:2
  106a74:    40 16             	r0 = r4			  ## imd.c:498:2
  106a76:    80 ff 88 93 f1 ff 	call -945272 <printf : 1fe04 >			  ## imd.c:498:2
  106a7c:    f7 9f             	goto -2 <lcd_write_cmd+0x58 : 106a7c >			  ## imd.c:498:2
  106a7e:    d0 ec 70 14       	r1 = [r7+64]			  ## imd.c:45:9
  106a82:    01 46             	if (r1 == 0) goto 12 <lcd_write_cmd+0x6C : 106a90 >
  106a84:    03 61             	r3 = [r0+4] 			  ## imd.c:514:19
  106a86:    03 44             	if (r3 == 0) goto 8 <lcd_write_cmd+0x6C : 106a90 >			  ## imd.c:514:19
  106a88:    60 16             	r0 = r6
  106a8a:    51 16             	r1 = r5
  106a8c:    42 16             	r2 = r4
  106a8e:    c3 00             	call r3
  106a90:    57 04             	{pc, r7-r4} = [sp++]			  ## imd.c:518:1


free:
  106a92:    78 04             	[--sp] = {rets, r8-r4}			  ## mem_heap.c:395:0
  106a94:    04 16             	r4 = r0			  ## mem_heap.c:395:0
  106a96:    24 47             	if (r4 == 0) goto 142 <free+0x94 : 106b26 >			  ## mem_heap.c:395:0
  106a98:    80 ff 7c d5 ff ff 	call -10884 <local_irq_disable : 10401a >			  ## spinlock.h:76:2
  106a9e:    c8 ff ef cd ab a5 	r8 = 2779500015 <_HEAP_END+0x1841DEF : 1abcdef >			  ## mem_heap.c:432:12
  106aa4:    d7 ec 49 8e       	[r4+-24] = r8			  ## mem_heap.c:432:12
  106aa8:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## mem_heap.c:432:12
  106aae:    d0 ec 04 58       	r5 = [r0+132]			  ## mem_heap.c:434:21
  106ab2:    32 e1 e0 4f       	r2 = r4 + -32			  ## mem_heap.c:423:44
  106ab6:    92 e9 00 45       	if (r2 < r5) {
  106aba:    d0 ec 05 28       		[r0+132] = r2			  ## mem_heap.c:436:18
  106abe:    25 16             		r5 = r2
                               	}			  ## mem_heap.c:436:18
  106ac0:    07 f1 20 20       	r7 = r2 + 32  #			  ## mem_heap.c:439:2
  106ac4:    46 78             		 r6 = [r4+-32] 			  ## mem_heap.c:439:2
  106ac6:    d0 ec 0c 39       	r3 = [r0+156]			  ## mem_heap.c:439:2
  106aca:    f7 1f             	r7 = r7 - r6			  ## mem_heap.c:439:2
  106acc:    73 18             	r3 += r7			  ## mem_heap.c:439:2
  106ace:    d0 ec 0d 39       	[r0+156] = r3			  ## mem_heap.c:439:2
  106ad2:    02 e8 14 60       	if (r6 == r2) goto 40 <free+0x6C : 106afe >			  ## mem_heap.c:439:2
  106ad6:    67 62             	r7 = [r6+8] 			  ## mem_heap.c:307:27
  106ad8:    88 e8 11 70       	if (r7 != r8) goto 34 <free+0x6C : 106afe >			  ## mem_heap.c:307:27
  106adc:    d0 ec 00 78       	r7 = [r0+128]			  ## mem_heap.c:307:82
  106ae0:    07 e8 0d 60       	if (r6 == r7) goto 26 <free+0x6C : 106afe >			  ## mem_heap.c:307:82
  106ae4:    15 e8 00 46       	if (r5 == r6) {
  106ae8:    d0 ec 05 28       		[r0+132] = r2			  ## mem_heap.c:310:19
  106aec:    25 16             		r5 = r2
                               	}			  ## mem_heap.c:310:19
  106aee:    67 60             	r7 = [r6+0] 			  ## mem_heap.c:312:21
  106af0:    c7 78             	[r4+-32] = r7			  ## mem_heap.c:312:13
  106af2:    66 60             	r6 = [r6+0] 			  ## mem_heap.c:313:9
  106af4:    76 d6             	r6 = r7  #			  ## mem_heap.c:325:21
  106af6:    e2 61             		 [r6+4] = r2			  ## mem_heap.c:313:20
  106af8:    fb 20             	r3 += -32			  ## mem_heap.c:315:3
  106afa:    d0 ec 0d 39       	[r0+156] = r3			  ## mem_heap.c:315:3
  106afe:    47 79             	r7 = [r4+-28] 			  ## mem_heap.c:319:14
  106b00:    02 e8 0e 70       	if (r7 == r2) goto 28 <free+0x8E : 106b20 >
  106b04:    71 62             	r1 = [r7+8] 			  ## mem_heap.c:320:27
  106b06:    88 e8 0b 10       	if (r1 != r8) goto 22 <free+0x8E : 106b20 >			  ## mem_heap.c:320:27
  106b0a:    15 e8 00 02       	if (r5 == r2) {
  106b0e:    d0 ec 05 78       		[r0+132] = r7
                               	}			  ## mem_heap.c:323:19
  106b12:    f6 60             	[r7+0] = r6			  ## mem_heap.c:325:14
  106b14:    41 78             	r1 = [r4+-32] 			  ## mem_heap.c:326:8
  106b16:    31 f1 e0 3f       	r1 = r3 + -32  #			  ## mem_heap.c:328:3
  106b1a:    97 61             		 [r1+4] = r7			  ## mem_heap.c:326:19
  106b1c:    d0 ec 0d 19       	[r0+156] = r1			  ## mem_heap.c:328:3
  106b20:    80 ff 06 d5 ff ff 	call -11002 <local_irq_enable : 10402c >			  ## spinlock.h:87:2
  106b26:    58 04             	{pc, r8-r4} = [sp++]			  ## mem_heap.c:445:1


lcd_drv_cmd_list:
  106b28:    7f 04             	[--sp] = {rets, r15-r4}			  ## lcd_drive.c:288:0
  106b2a:    e2 9d             	sp += -12			  ## lcd_drive.c:288:0
  106b2c:    14 16             	r4 = r1			  ## lcd_drive.c:288:0
  106b2e:    0e 16             	r14 = r0			  ## lcd_drive.c:288:0
  106b30:    40 e0 40 01       	r0 = 320 <UPDATE_SIZE+0xC0 : 140 >			  ## lcd_drive.c:299:15
  106b34:    bf ea 21 fe       	call -958 <malloc : 10677a >			  ## lcd_drive.c:299:15
  106b38:    0c 16             	r12 = r0			  ## lcd_drive.c:299:15
  106b3a:    ca ff 3c b8 10 00 	r10 = 1095740 <get_clk_div.div2_tab+0x14 : 10b83c >
  106b40:    00 e1 f4 a0       	r0 = r10 + 244			  ## lcd_drive.c:300:2
  106b44:    c1 16             	r1 = r12			  ## lcd_drive.c:300:2
  106b46:    80 ff b8 92 f1 ff 	call -945480 <printf : 1fe04 >			  ## lcd_drive.c:300:2
  106b4c:    b4 f0 e0 64       	r6 = r14 + r4  #
  106b50:    84 22             		 [sp+8] = r4
  106b52:    00 e1 05 e0       	r0 = r14 + 5			  ## lcd_drive.c:303:7
  106b56:    00 f1 07 e0       	r0 = r14 + 7  #			  ## lcd_drive.c:303:7
  106b5a:    80 21             		 [sp+4] = r0			  ## lcd_drive.c:303:7
  106b5c:    80 20             	[sp] = r0			  ## lcd_drive.c:303:7
  106b5e:    41 20             	r1 = 0			  ## lcd_drive.c:303:7
  106b60:    44 9c             	goto 312 <lcd_drv_cmd_list+0x172 : 106c9a >			  ## lcd_drive.c:303:7
  106b62:    00 21             	r0 = [sp+4]			  ## lcd_drive.c:289:6
  106b64:    b4 f0 00 91       	r9 = r0 + r1  #			  ## lcd_drive.c:289:6
  106b68:    00 20             		 r0 = [sp]			  ## lcd_drive.c:289:6
  106b6a:    b4 e0 00 b1       	r11 = r0 + r1			  ## lcd_drive.c:289:6
  106b6e:    93 16             	r3 = r9
  106b70:    b2 16             	r2 = r11
  106b72:    24 16             	r4 = r2
  106b74:    32 e1 fc 4f       	r2 = r4 + -4			  ## lcd_drive.c:261:17
  106b78:    38 16             	r8 = r3			  ## lcd_drive.c:261:17
  106b7a:    06 e9 f8 21       	if (r2 >= r6) goto -16 <lcd_drv_cmd_list+0x46 : 106b6e >			  ## lcd_drive.c:261:17
  106b7e:    4a 59             	r2 = b[r4+-7] (u)			  ## lcd_drive.c:262:8
  106b80:    4b 5a             	r3 = b[r4+-6] (u)			  ## lcd_drive.c:262:21
  106b82:    22 b8             	r2 = r2 << 24			  ## lcd_drive.c:262:13
  106b84:    a2 f1 20 38       	r2 <= insert(r3, p:16, l:8)  #			  ## lcd_drive.c:262:19
  106b88:    4d 5b             		 r5 = b[r4+-5] (u)			  ## lcd_drive.c:262:34
  106b8a:    a2 f1 20 54       	r2 <= insert(r5, p:8, l:8)  #			  ## lcd_drive.c:262:32
  106b8e:    4f 5c             		 r7 = b[r4+-4] (u)			  ## lcd_drive.c:262:46
  106b90:    90 e1 20 57       	r5 = r2 | r7			  ## lcd_drive.c:262:44
  106b94:    03 e1 01 80       	r3 = r8 + 1			  ## lcd_drive.c:262:7
  106b98:    4a 81             	r2 = r4 + 1			  ## lcd_drive.c:262:7
  106b9a:    21 ff 55 53 e9 ff 	if (r5 != 1431655765) goto -46 <lcd_drv_cmd_list+0x4A : 106b72 >			  ## lcd_drive.c:262:7
  106ba0:    37 e1 fc 2f       	r7 = r2 + -4			  ## lcd_drive.c:263:18
  106ba4:    b4 e0 72 de       	r13 = r7 - r14			  ## lcd_drive.c:263:18
  106ba8:    7d f8 e1 ff       	if (r13 == -1) goto -62 <lcd_drv_cmd_list+0x46 : 106b6e >
  106bac:    7d 83             	r5 = r7 + 3			  ## lcd_drive.c:275:17
  106bae:    06 e9 de 51       	if (r5 >= r6) goto -68 <lcd_drv_cmd_list+0x46 : 106b6e >			  ## lcd_drive.c:275:17
  106bb2:    78 40             	r0 = b[r7+0] (u)			  ## lcd_drive.c:276:8
  106bb4:    79 41             	r1 = b[r7+1] (u)			  ## lcd_drive.c:276:21
  106bb6:    00 b8             	r0 = r0 << 24			  ## lcd_drive.c:276:13
  106bb8:    a0 f1 20 18       	r0 <= insert(r1, p:16, l:8)  #			  ## lcd_drive.c:276:19
  106bbc:    7b 42             		 r3 = b[r7+2] (u)			  ## lcd_drive.c:276:34
  106bbe:    a0 f1 20 34       	r0 <= insert(r3, p:8, l:8)  #			  ## lcd_drive.c:276:32
  106bc2:    5d 40             		 r5 = b[r5+0] (u)			  ## lcd_drive.c:276:46
  106bc4:    50 19             	r0 |= r5			  ## lcd_drive.c:276:44
  106bc6:    c7 21             	r7 += 1			  ## lcd_drive.c:276:21
  106bc8:    21 ff aa 03 ef ff 	if (r0 != 2863311530) goto -34 <lcd_drv_cmd_list+0x84 : 106bac >
  106bce:    30 e1 ff 7f       	r0 = r7 + -1			  ## lcd_drive.c:277:18
  106bd2:    b4 e0 02 fe       	r15 = r0 - r14			  ## lcd_drive.c:277:18
  106bd6:    7f f8 ca ff       	if (r15 == -1) goto -108 <lcd_drv_cmd_list+0x46 : 106b6e >
  106bda:    51 ee 2c bf       	r11 = b[r2+-4] (u)			  ## lcd_drive.c:312:15
  106bde:    c0 f1 b8 51       	r5 = r11 << 24  #			  ## lcd_drive.c:314:17
  106be2:    28 5d             		 r0 = b[r2+-3] (u)			  ## lcd_drive.c:314:27
  106be4:    a5 f1 20 08       	r5 <= insert(r0, p:16, l:8)  #			  ## lcd_drive.c:314:24
  106be8:    29 5e             		 r1 = b[r2+-2] (u)			  ## lcd_drive.c:314:43
  106bea:    a5 f1 20 14       	r5 <= insert(r1, p:8, l:8)  #			  ## lcd_drive.c:314:40
  106bee:    2b 5f             		 r3 = b[r2+-1] (u)			  ## lcd_drive.c:314:57
  106bf0:    90 e1 50 03       	r0 = r5 | r3			  ## lcd_drive.c:314:55
  106bf4:    c1 ff ff a5 5a ff 	r1 = 4284130815 <_HEAP_END+0x132F5FF : 15aa5ff >			  ## lcd_drive.c:314:9
  106bfa:    81 e8 0c 00       	if (r0 != r1) goto 24 <lcd_drv_cmd_list+0xEE : 106c16 >			  ## lcd_drive.c:314:9
  106bfe:    48 41             	r0 = b[r4+1] (u)			  ## lcd_drive.c:316:17
  106c00:    c0 21             	r0 += 1			  ## lcd_drive.c:316:23
  106c02:    80 a1             	r0 = r0 >> 1			  ## lcd_drive.c:316:28
  106c04:    bf ea 93 fe       	call -730 <delay_2ms : 10692e >			  ## lcd_drive.c:316:6
  106c08:    00 f1 01 a1       	r0 = r10 + 257  #			  ## lcd_drive.c:317:6
  106c0c:    49 41             		 r1 = b[r4+1] (u)			  ## lcd_drive.c:317:30
  106c0e:    80 ff f0 91 f1 ff 	call -945680 <printf : 1fe04 >			  ## lcd_drive.c:317:6
  106c14:    24 80             	goto 128 <lcd_drv_cmd_list+0x16E : 106c96 >			  ## lcd_drive.c:317:6
  106c16:    b4 e0 f2 0d       	r0 = r15 - r13			  ## lcd_drive.c:313:18
  106c1a:    00 e1 ff 00       	r0 = r0 + 255			  ## lcd_drive.c:313:26
  106c1e:    39 e1 fd 2f       	r9 = r2 + -3			  ## lcd_drive.c:312:15
  106c22:    01 e1 b6 a1       	r1 = r10 + 438			  ## lcd_drive.c:320:12
  106c26:    07 17             	r7 = r0.b0 (u)			  ## lcd_drive.c:320:63
  106c28:    c0 16             	r0 = r12			  ## lcd_drive.c:320:12
  106c2a:    b2 16             	r2 = r11			  ## lcd_drive.c:320:12
  106c2c:    73 16             	r3 = r7			  ## lcd_drive.c:320:12
  106c2e:    80 ff cc 91 f1 ff 	call -945716 <sprintf : 1fe00 >			  ## lcd_drive.c:320:12
  106c34:    04 16             	r4 = r0			  ## lcd_drive.c:320:12
  106c36:    c5 14             	r13 = 0			  ## lcd_drive.c:320:12
  106c38:    07 ed 1a d0       	ifs (r13 >= r7) goto 52 <lcd_drv_cmd_list+0x148 : 106c70 >
  106c3c:    d0 ee 81 20       	r2 = b[r8++=1] (u)			  ## lcd_drive.c:322:54
  106c40:    c5 17             	r5 = r4.l (u)			  ## lcd_drive.c:322:31
  106c42:    b4 e0 c0 05       	r0 = r12 + r5			  ## lcd_drive.c:322:31
  106c46:    01 e1 18 a0       	r1 = r10 + 24			  ## lcd_drive.c:322:14
  106c4a:    80 ff b0 91 f1 ff 	call -945744 <sprintf : 1fe00 >			  ## lcd_drive.c:322:14
  106c50:    09 1d             	r1 = r0 + r5			  ## lcd_drive.c:322:11
  106c52:    40 18             	r0 += r4			  ## lcd_drive.c:323:11
  106c54:    80 17             	r0 = r0.l (u)			  ## lcd_drive.c:323:11
  106c56:    0d e1 01 d0       	r13 = r13 + 1			  ## lcd_drive.c:321:28
  106c5a:    14 16             	r4 = r1
  106c5c:    a0 f9 ec 6f       	if (r0 < 311) goto -40 <lcd_drv_cmd_list+0x110 : 106c38 >
  106c60:    c0 18             	r0 += r12			  ## lcd_drive.c:324:32
  106c62:    42 20             	r2 = 0			  ## lcd_drive.c:324:32
  106c64:    8a 43             	b[r0+3] = r2			  ## lcd_drive.c:324:15
  106c66:    4a 2e             	r2 = 46			  ## lcd_drive.c:324:15
  106c68:    8a 42             	b[r0+2] = r2			  ## lcd_drive.c:324:15
  106c6a:    8a 41             	b[r0+1] = r2			  ## lcd_drive.c:324:15
  106c6c:    8a 40             	b[r0+0] = r2			  ## lcd_drive.c:324:15
  106c6e:    1c 83             	r4 = r1 + 3			  ## lcd_drive.c:324:12
  106c70:    41 20             	r1 = 0
  106c72:    c0 17             	r0 = r4.l (u)			  ## lcd_drive.c:328:30
  106c74:    c0 18             	r0 += r12			  ## lcd_drive.c:328:30
  106c76:    89 41             	b[r0+1] = r1			  ## lcd_drive.c:328:13
  106c78:    41 2a             	r1 = 10			  ## lcd_drive.c:328:13
  106c7a:    a0 d6             	r0 = r10  #			  ## lcd_drive.c:329:6
  106c7c:    89 40             		 b[r0+0] = r1			  ## lcd_drive.c:328:13
  106c7e:    c1 16             	r1 = r12			  ## lcd_drive.c:329:6
  106c80:    80 ff 7e 91 f1 ff 	call -945794 <printf : 1fe04 >			  ## lcd_drive.c:329:6
  106c86:    40 21             	r0 = 1			  ## lcd_drive.c:330:6
  106c88:    bf ea 51 fe       	call -862 <delay_2ms : 10692e >			  ## lcd_drive.c:330:6
  106c8c:    b0 16             	r0 = r11			  ## lcd_drive.c:332:6
  106c8e:    91 16             	r1 = r9			  ## lcd_drive.c:332:6
  106c90:    72 16             	r2 = r7			  ## lcd_drive.c:332:6
  106c92:    bf ea c7 fe       	call -626 <lcd_write_cmd : 106a24 >			  ## lcd_drive.c:332:6
  106c96:    01 e1 04 f0       	r1 = r15 + 4			  ## lcd_drive.c:335:13
  106c9a:    00 22             	r0 = [sp+8]			  ## lcd_drive.c:289:6
  106c9c:    80 ed 61 11       	ifs (r1 < r0) goto -318 <lcd_drv_cmd_list+0x3A : 106b62 >			  ## lcd_drive.c:289:6
  106ca0:    c0 16             	r0 = r12			  ## lcd_drive.c:340:2
  106ca2:    bf ea f6 fe       	call -532 <free : 106a92 >			  ## lcd_drive.c:340:2
  106ca6:    02 83             	sp += 12
  106ca8:    5f 04             	{pc, r15-r4} = [sp++]			  ## lcd_drive.c:343:1


lcd_qspi_st77903_mode:
  106caa:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd_spi.c:601:0
  106cb0:    00 6c             	r0 = [r0+48] 			  ## imd_spi.c:602:11
  106cb2:    50 ee 08 14       	r1 = b[r0+72] (u)			  ## imd_spi.c:602:23
  106cb6:    40 21             	r0 = 1			  ## imd_spi.c:602:54
  106cb8:    b1 e8 23 00       	if (r1 != 35) {			  ## imd_spi.c:602:54
  106cbc:    40 20             		r0 = 0
                               	}			  ## imd_spi.c:602:54
  106cbe:    80 00             	rts			  ## imd_spi.c:606:1


imd_irq_enable:
  106cc0:    74 04             	[--sp] = {rets, r4}			  ## imd.c:56:0
  106cc2:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd.c:56:0
  106cc8:    00 67             	r0 = [r0+28] 			  ## imd.c:56:0
  106cca:    00 4e             	if (r0 == 0) goto 28 <imd_irq_enable+0x28 : 106ce8 >			  ## imd.c:56:0
  106ccc:    c1 ff 00 2d fe 00 	r1 = 16657664 <_HEAP_END+0xD67D00 : fe2d00 >			  ## imd.c:58:5
  106cd2:    00 ef 00 15       	[r1+0] |= 0x20000000			  ## imd.c:58:5
  106cd6:    00 66             	r0 = [r0+24] 			  ## imd.c:59:18
  106cd8:    00 f8 17 04       	if (r0 == 2) goto 46 <imd_irq_enable+0x4A : 106d0a >			  ## imd.c:59:2
  106cdc:    00 f8 18 02       	if (r0 == 1) goto 48 <imd_irq_enable+0x50 : 106d10 >
  106ce0:    80 5b             	if (r0 != 0) goto 54 <imd_irq_enable+0x58 : 106d18 >
  106ce2:    00 e1 20 10       	r0 = r1 + 32
  106ce6:    04 96             	goto 44 <imd_irq_enable+0x54 : 106d14 >
  106ce8:    c4 ff 1a ba 10 00 	r4 = 1096218 <imd_clock_init.div+0x5A : 10ba1a >			  ## imd.c:57:2
  106cee:    00 e1 44 40       	r0 = r4 + 68			  ## imd.c:57:2
  106cf2:    02 e1 1e 44       	r2 = r4 + 1054			  ## imd.c:57:2
  106cf6:    41 20             	r1 = 0			  ## imd.c:57:2
  106cf8:    4b 39             	r3 = 57			  ## imd.c:57:2
  106cfa:    80 ff 04 91 f1 ff 	call -945916 <printf : 1fe04 >			  ## imd.c:57:2
  106d00:    40 16             	r0 = r4			  ## imd.c:57:2
  106d02:    80 ff fc 90 f1 ff 	call -945924 <printf : 1fe04 >			  ## imd.c:57:2
  106d08:    f7 9f             	goto -2 <imd_irq_enable+0x48 : 106d08 >			  ## imd.c:57:2
  106d0a:    00 e1 34 10       	r0 = r1 + 52
  106d0e:    04 82             	goto 4 <imd_irq_enable+0x54 : 106d14 >
  106d10:    00 e1 28 10       	r0 = r1 + 40
  106d14:    00 ef 00 05       	[r0+0] |= 0x20000000
  106d18:    54 04             	{pc, r4} = [sp++]			  ## imd.c:70:1


imd_spi_io_enable:
  106d1a:    c0 ff 00 50 fd 00 	r0 = 16601088 <_HEAP_END+0xD5A000 : fd5000 >			  ## imd_spi.c:41:0
  106d20:    c2 ef 78 0e       	[r0+8] &= 0xFFFFF07F			  ## imd_spi.c:43:19
  106d24:    c0 ef 78 0e       	[r0+0] &= 0xFFFFF07F			  ## imd_spi.c:44:19
  106d28:    c0 ff 18 2d fe 00 	r0 = 16657688 <_HEAP_END+0xD67D18 : fe2d18 >			  ## imd_spi.c:46:5
  106d2e:    00 ef f8 0b       	[r0+0] |= 0x1F000			  ## imd_spi.c:46:5
  106d32:    80 00             	rts			  ## imd_spi.c:47:1


imd_set_buf_size:
  106d34:    75 04             	[--sp] = {rets, r5, r4}			  ## imd.c:233:0
  106d36:    c4 ff 5e ba 10 00 	r4 = 1096286 <imd_clock_init.div+0x9E : 10ba5e >			  ## imd.c:233:0
  106d3c:    10 4a             	if (r0 == 0) goto 84 <imd_set_buf_size+0x5E : 106d92 >			  ## imd.c:233:0
  106d3e:    11 58             	if (r1 == 0) goto 112 <imd_set_buf_size+0x7C : 106db0 >			  ## imd.c:233:0
  106d40:    22 46             	if (r2 == 0) goto 140 <imd_set_buf_size+0x9A : 106dce >			  ## imd.c:233:0
  106d42:    c3 ff 00 2d fe 00 	r3 = 16657664 <_HEAP_END+0xD67D00 : fe2d00 >			  ## imd.c:233:0
  106d48:    34 61             	r4 = [r3+4] 			  ## imd.c:238:5
  106d4a:    c4 aa             	r4 = r4 >> 10			  ## imd.c:238:5
  106d4c:    a0 e1 58 45       	r0 <= insert(r4, p:10, l:22)			  ## imd.c:238:5
  106d50:    b0 61             	[r3+4] = r0			  ## imd.c:238:5
  106d52:    44 f0 ff 03       	r4 = 1023  # <_MASK_MEM_SIZE+0x25B : 3ff >			  ## imd.c:238:5
  106d56:    30 61             		 r0 = [r3+4] 			  ## imd.c:239:5
  106d58:    94 19             	r4 &= r1			  ## imd.c:239:5
  106d5a:    c5 ff ff 03 f0 ff 	r5 = 4293919743 <_HEAP_END+0x1C853FF : 1f003ff >			  ## imd.c:239:5
  106d60:    d0 19             	r0 &= r5			  ## imd.c:239:5
  106d62:    a0 e1 28 45       	r0 <= insert(r4, p:10, l:10)			  ## imd.c:239:5
  106d66:    b0 61             	[r3+4] = r0			  ## imd.c:239:5
  106d68:    30 61             	r0 = [r3+4] 			  ## imd.c:240:5
  106d6a:    c5 ff ff ff 0f 00 	r5 = 1048575 <EX_RAM_SIZE+0x9CFFF : fffff >			  ## imd.c:240:5
  106d70:    d0 19             	r0 &= r5			  ## imd.c:240:5
  106d72:    a0 e1 30 2a       	r0 <= insert(r2, p:20, l:12)			  ## imd.c:240:5
  106d76:    b0 61             	[r3+4] = r0			  ## imd.c:240:5
  106d78:    42 f0 03 f0       	r2 = -4093  # <_HEAP_END+0x1D84003 : 1fff003 >			  ## imd.c:241:5
  106d7c:    30 60             		 r0 = [r3+0] 			  ## imd.c:241:5
  106d7e:    a0 19             	r0 &= r2			  ## imd.c:241:5
  106d80:    a0 e1 28 41       	r0 <= insert(r4, p:2, l:10)			  ## imd.c:241:5
  106d84:    b0 60             	[r3+0] = r0			  ## imd.c:241:5
  106d86:    30 63             	r0 = [r3+12] 			  ## imd.c:242:5
  106d88:    80 aa             	r0 = r0 >> 10			  ## imd.c:242:5
  106d8a:    a1 e1 58 05       	r1 <= insert(r0, p:10, l:22)			  ## imd.c:242:5
  106d8e:    b1 63             	[r3+12] = r1			  ## imd.c:242:5
  106d90:    55 04             	{pc, r5, r4} = [sp++]			  ## imd.c:243:1
  106d92:    02 e1 da 43       	r2 = r4 + 986			  ## imd.c:234:5
  106d96:    41 20             	r1 = 0			  ## imd.c:234:5
  106d98:    7b 2a             	r3 = 234			  ## imd.c:234:5
  106d9a:    40 16             	r0 = r4			  ## imd.c:234:5
  106d9c:    80 ff 62 90 f1 ff 	call -946078 <printf : 1fe04 >			  ## imd.c:234:5
  106da2:    00 e1 e4 40       	r0 = r4 + 228			  ## imd.c:234:5
  106da6:    41 20             	r1 = 0			  ## imd.c:234:5
  106da8:    80 ff 56 90 f1 ff 	call -946090 <printf : 1fe04 >			  ## imd.c:234:5
  106dae:    f7 9f             	goto -2 <imd_set_buf_size+0x7A : 106dae >			  ## imd.c:234:5
  106db0:    02 e1 da 43       	r2 = r4 + 986			  ## imd.c:235:5
  106db4:    41 20             	r1 = 0			  ## imd.c:235:5
  106db6:    7b 2b             	r3 = 235			  ## imd.c:235:5
  106db8:    40 16             	r0 = r4			  ## imd.c:235:5
  106dba:    80 ff 44 90 f1 ff 	call -946108 <printf : 1fe04 >			  ## imd.c:235:5
  106dc0:    00 e1 4c 41       	r0 = r4 + 332			  ## imd.c:235:5
  106dc4:    41 20             	r1 = 0			  ## imd.c:235:5
  106dc6:    80 ff 38 90 f1 ff 	call -946120 <printf : 1fe04 >			  ## imd.c:235:5
  106dcc:    f7 9f             	goto -2 <imd_set_buf_size+0x98 : 106dcc >			  ## imd.c:235:5
  106dce:    02 e1 da 43       	r2 = r4 + 986			  ## imd.c:236:5
  106dd2:    41 20             	r1 = 0			  ## imd.c:236:5
  106dd4:    7b 2c             	r3 = 236			  ## imd.c:236:5
  106dd6:    40 16             	r0 = r4			  ## imd.c:236:5
  106dd8:    80 ff 26 90 f1 ff 	call -946138 <printf : 1fe04 >			  ## imd.c:236:5
  106dde:    00 e1 70 41       	r0 = r4 + 368			  ## imd.c:236:5
  106de2:    41 20             	r1 = 0			  ## imd.c:236:5
  106de4:    80 ff 1a 90 f1 ff 	call -946150 <printf : 1fe04 >			  ## imd.c:236:5
  106dea:    f7 9f             	goto -2 <imd_set_buf_size+0xB6 : 106dea >			  ## imd.c:236:5


lcd_draw:
  106dec:    76 04             	[--sp] = {rets, r6-r4}			  ## imd.c:610:0
  106dee:    c6 ff 00 c8 10 00 	r6 = 1099776 <backlight_status : 10c800 >			  ## imd.c:610:0
  106df4:    14 d6             	r4 = r1  #			  ## imd.c:610:0
  106df6:    62 67             		 r2 = [r6+28] 			  ## imd.c:610:0
  106df8:    05 16             	r5 = r0			  ## imd.c:610:0
  106dfa:    02 50             	if (r2 == 0) goto 32 <lcd_draw+0x30 : 106e1c >			  ## imd.c:610:0
  106dfc:    bf ea af fd       	call -1186 <imd_sfr_pop : 10695e >			  ## imd.c:614:2
  106e00:    40 20             	r0 = 0			  ## imd.c:614:2
  106e02:    52 ee 6c 0e       	b[r6+236] = r0			  ## imd.c:617:24
  106e06:    40 21             	r0 = 1			  ## imd.c:618:25
  106e08:    52 ee 6d 0e       	b[r6+237] = r0			  ## imd.c:618:25
  106e0c:    bf ea 58 ff       	call -336 <imd_irq_enable : 106cc0 >			  ## imd.c:620:9
  106e10:    60 67             	r0 = [r6+28] 			  ## imd.c:620:9
  106e12:    01 6d             	r1 = [r0+52] 			  ## imd.c:624:14
  106e14:    01 55             	if (r1 == 0) goto 42 <lcd_draw+0x54 : 106e40 >			  ## imd.c:624:6
  106e16:    01 6e             	r1 = [r0+56] 			  ## imd.c:625:34
  106e18:    40 21             	r0 = 1			  ## imd.c:625:3
  106e1a:    04 97             	goto 46 <lcd_draw+0x5E : 106e4a >			  ## imd.c:625:3
  106e1c:    c4 ff 1a ba 10 00 	r4 = 1096218 <imd_clock_init.div+0x5A : 10ba1a >			  ## imd.c:612:2
  106e22:    00 e1 44 40       	r0 = r4 + 68			  ## imd.c:612:2
  106e26:    02 e1 1e 44       	r2 = r4 + 1054			  ## imd.c:612:2
  106e2a:    41 20             	r1 = 0			  ## imd.c:612:2
  106e2c:    43 e0 64 02       	r3 = 612 <_MASK_MEM_SIZE+0xC0 : 264 >			  ## imd.c:612:2
  106e30:    80 ff ce 8f f1 ff 	call -946226 <printf : 1fe04 >			  ## imd.c:612:2
  106e36:    40 16             	r0 = r4			  ## imd.c:612:2
  106e38:    80 ff c6 8f f1 ff 	call -946234 <printf : 1fe04 >			  ## imd.c:612:2
  106e3e:    f7 9f             	goto -2 <lcd_draw+0x52 : 106e3e >			  ## imd.c:612:2
  106e40:    b5 e8 00 10       	if (r5 != 0) {
  106e44:    40 20             		r0 = 0
                               	} else {			  ## imd.c:631:4
  106e46:    40 21             		r0 = 1
                               	}			  ## imd.c:628:4
  106e48:    41 16             	r1 = r4			  ## imd.c:628:4
  106e4a:    bf ea 07 fa       	call -3058 <imd_debug_config : 10625c >
  106e4e:    60 67             	r0 = [r6+28] 			  ## imd.c:635:6
  106e50:    01 66             	r1 = [r0+24] 			  ## imd.c:635:14
  106e52:    c0 ff 70 c4 10 00 	r0 = 1098864 <imd_pap_io : 10c470 >			  ## imd.c:635:14
  106e58:    01 f8 07 02       	if (r1 == 1) goto 14 <lcd_draw+0x7E : 106e6a >			  ## imd.c:635:6
  106e5c:    81 4c             	if (r1 != 0) goto 24 <lcd_draw+0x8A : 106e76 >
  106e5e:    61 6f             	r1 = [r6+60] 			  ## imd.c:45:9
  106e60:    01 50             	if (r1 == 0) goto 32 <lcd_draw+0x96 : 106e82 >
  106e62:    d0 ec 00 04       	r0 = [r0+64]			  ## imd.c:638:19
  106e66:    80 4c             	if (r0 != 0) goto 24 <lcd_draw+0x94 : 106e80 >			  ## imd.c:638:19
  106e68:    56 04             	{pc, r6-r4} = [sp++]			  ## imd.c:656:1
  106e6a:    d0 ec 60 14       	r1 = [r6+64]			  ## imd.c:45:9
  106e6e:    01 49             	if (r1 == 0) goto 18 <lcd_draw+0x96 : 106e82 >
  106e70:    00 64             	r0 = [r0+16] 			  ## imd.c:644:19
  106e72:    80 46             	if (r0 != 0) goto 12 <lcd_draw+0x94 : 106e80 >			  ## imd.c:644:19
  106e74:    56 04             	{pc, r6-r4} = [sp++]			  ## imd.c:656:1
  106e76:    d0 ec 64 14       	r1 = [r6+68]			  ## imd.c:45:9
  106e7a:    01 43             	if (r1 == 0) goto 6 <lcd_draw+0x96 : 106e82 >
  106e7c:    00 6a             	r0 = [r0+40] 			  ## imd.c:650:19
  106e7e:    00 41             	if (r0 == 0) goto 2 <lcd_draw+0x96 : 106e82 >			  ## imd.c:650:19
  106e80:    c0 00             	call r0
  106e82:    56 04             	{pc, r6-r4} = [sp++]			  ## imd.c:656:1


lcd_spi_draw_st77903:
  106e84:    75 04             	[--sp] = {rets, r5, r4}			  ## imd_spi.c:724:0
  106e86:    c5 ff 00 c8 10 00 	r5 = 1099776 <backlight_status : 10c800 >			  ## imd_spi.c:724:0
  106e8c:    04 e1 4c 50       	r4 = r5 + 76			  ## imd_spi.c:724:0
  106e90:    c0 69             	[r4+36] = r0			  ## imd_spi.c:728:24
  106e92:    c1 61             	[r4+4] = r1			  ## imd_spi.c:729:24
  106e94:    d0 e9 0c 00       	r1_r0 = d[sp+12]			  ## imd_spi.c:729:24
  106e98:    c2 62             	[r4+8] = r2			  ## imd_spi.c:730:24
  106e9a:    c3 63             	[r4+12] = r3			  ## imd_spi.c:731:29
  106e9c:    c0 64             	[r4+16] = r0			  ## imd_spi.c:733:29
  106e9e:    c1 65             	[r4+20] = r1			  ## imd_spi.c:734:30
  106ea0:    40 60             	r0 = [r4+0] 			  ## imd_spi.c:734:30
  106ea2:    c4 ff 5e ba 10 00 	r4 = 1096286 <imd_clock_init.div+0x9E : 10ba5e >			  ## imd_spi.c:734:30
  106ea8:    00 4f             	if (r0 == 0) goto 30 <lcd_spi_draw_st77903+0x44 : 106ec8 >			  ## imd_spi.c:736:5
  106eaa:    02 e1 e0 44       	r2 = r4 + 1248			  ## imd_spi.c:736:5
  106eae:    41 20             	r1 = 0			  ## imd_spi.c:736:5
  106eb0:    43 e0 e0 02       	r3 = 736 <_MASK_MEM_SIZE+0x13C : 2e0 >			  ## imd_spi.c:736:5
  106eb4:    40 16             	r0 = r4			  ## imd_spi.c:736:5
  106eb6:    80 ff 48 8f f1 ff 	call -946360 <printf : 1fe04 >			  ## imd_spi.c:736:5
  106ebc:    00 e1 90 42       	r0 = r4 + 656			  ## imd_spi.c:736:5
  106ec0:    80 ff 3e 8f f1 ff 	call -946370 <printf : 1fe04 >			  ## imd_spi.c:736:5
  106ec6:    f7 9f             	goto -2 <lcd_spi_draw_st77903+0x42 : 106ec6 >			  ## imd_spi.c:736:5
  106ec8:    bf ea fa fe       	call -524 <imd_irq_enable : 106cc0 >			  ## imd_spi.c:738:5
  106ecc:    c0 ff 20 2d fe 00 	r0 = 16657696 <_HEAP_END+0xD67D20 : fe2d20 >
  106ed2:    00 ef c0 0b       	[r0+0] |= 0x18000			  ## imd_spi.c:261:9
  106ed6:    01 60             	r1 = [r0+0] 			  ## imd_spi.c:262:9
  106ed8:    71 e1 fc 1c       	r1 = r1 & 0xFFFF81FF			  ## imd_spi.c:262:9
  106edc:    41 e1 84 1c       	r1 = r1 | 0x4200			  ## imd_spi.c:262:9
  106ee0:    81 60             	[r0+0] = r1			  ## imd_spi.c:262:9
  106ee2:    c0 ff cc c4 10 00 	r0 = 1098956 <line_buffer : 10c4cc >			  ## imd_spi.c:742:5
  106ee8:    c1 ff 44 c4 10 00 	r1 = 1098820 <line_begin_cmd.157 : 10c444 >			  ## imd_spi.c:742:5
  106eee:    10 83             	rep 4 4 {			  ## imd_spi.c:742:5
  106ef0:    12 05             		r2 = [r1++=4] 			  ## imd_spi.c:742:5
  106ef2:    82 05             		[r0++=4] = r2
                               	}			  ## imd_spi.c:742:5
  106ef4:    40 21             	r0 = 1			  ## imd_spi.c:744:33
  106ef6:    d0 ec 5d 04       	[r5+76] = r0			  ## imd_spi.c:744:33
  106efa:    bf ea 0e ff       	call -484 <imd_spi_io_enable : 106d1a >			  ## imd_spi.c:746:5
  106efe:    40 20             	r0 = 0			  ## imd_spi.c:747:5
  106f00:    80 ea 96 08       	call 4396 <lcd_cs : 108030 >			  ## imd_spi.c:747:5
  106f04:    40 28             	r0 = 8			  ## imd_spi.c:749:5
  106f06:    41 21             	r1 = 1			  ## imd_spi.c:749:5
  106f08:    42 30             	r2 = 16			  ## imd_spi.c:749:5
  106f0a:    bf ea 13 ff       	call -474 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:749:5
  106f0e:    c1 ff 54 c4 10 00 	r1 = 1098836 <frame_begin_cmd : 10c454 >			  ## imd_spi.c:749:5
  106f14:    61 ff 03 10 04 00 	if ((r1 & 0x3) != 0) goto 8 <lcd_spi_draw_st77903+0x9E : 106f22 >			  ## imd_spi.c:749:5
  106f1a:    40 21             	r0 = 1			  ## imd_spi.c:751:5
  106f1c:    bf ea 66 ff       	call -308 <lcd_draw : 106dec >			  ## imd_spi.c:751:5
  106f20:    55 04             	{pc, r5, r4} = [sp++]			  ## imd_spi.c:753:1
  106f22:    02 e1 e0 44       	r2 = r4 + 1248			  ## imd_spi.c:750:5
  106f26:    41 20             	r1 = 0			  ## imd_spi.c:750:5
  106f28:    43 e0 ee 02       	r3 = 750 <_MASK_MEM_SIZE+0x14A : 2ee >			  ## imd_spi.c:750:5
  106f2c:    40 16             	r0 = r4			  ## imd_spi.c:750:5
  106f2e:    80 ff d0 8e f1 ff 	call -946480 <printf : 1fe04 >			  ## imd_spi.c:750:5
  106f34:    00 e1 61 42       	r0 = r4 + 609			  ## imd_spi.c:750:5
  106f38:    80 ff c6 8e f1 ff 	call -946490 <printf : 1fe04 >			  ## imd_spi.c:750:5
  106f3e:    f7 9f             	goto -2 <lcd_spi_draw_st77903+0xBA : 106f3e >			  ## imd_spi.c:750:5


lcd_drv_init:
  106f40:    7c 04             	[--sp] = {rets, r12-r4}			  ## lcd_drive.c:710:0
  106f42:    e2 9e             	sp += -8			  ## lcd_drive.c:710:0
  106f44:    04 16             	r4 = r0			  ## lcd_drive.c:710:0
  106f46:    c0 ff f0 9a 10 00 	r0 = 1088240 <realloc+0x4CE : 109af0 >			  ## lcd_drive.c:711:2
  106f4c:    80 ff b6 8e f1 ff 	call -946506 <puts : 1fe08 >			  ## lcd_drive.c:711:2
  106f52:    40 61             	r0 = [r4+4] 			  ## lcd_drive.c:714:45
  106f54:    c9 ff 00 c8 10 00 	r9 = 1099776 <backlight_status : 10c800 >			  ## lcd_drive.c:714:45
  106f5a:    d0 ec 95 00       	[r9+4] = r0			  ## lcd_drive.c:714:10
  106f5e:    c8 ff 1a ba 10 00 	r8 = 1096218 <imd_clock_init.div+0x5A : 10ba1a >			  ## lcd_drive.c:714:10
  106f64:    10 4e             	if (r0 == 0) goto 92 <lcd_drv_init+0x82 : 106fc2 >			  ## lcd_drive.c:714:10
  106f66:    50 ec 04 20       	r3_r2 = d[r0+4]			  ## lcd_drive.c:718:58
  106f6a:    04 63             	r4 = [r0+12] 			  ## lcd_drive.c:718:75
  106f6c:    00 f1 fc 81       	r0 = r8 + 508  #			  ## lcd_drive.c:717:2
  106f70:    01 60             		 r1 = [r0+0] 			  ## lcd_drive.c:718:21
  106f72:    84 20             	[sp] = r4			  ## lcd_drive.c:717:2
  106f74:    80 ff 8a 8e f1 ff 	call -946550 <printf : 1fe04 >			  ## lcd_drive.c:717:2
  106f7a:    d0 ec 94 00       	r0 = [r9+4]			  ## lcd_drive.c:722:6
  106f7e:    00 63             	r0 = [r0+12] 			  ## lcd_drive.c:722:15
  106f80:    b0 e8 ff 4f       	if (r0 != -1) {			  ## lcd_drive.c:722:15
  106f84:    41 21             		r1 = 1			  ## lcd_drive.c:723:3
  106f86:    bf ea 0d f9       		call -3558
                               	} <gpio_direction_output : 1061a4 >			  ## lcd_drive.c:723:3
  106f8a:    c0 ff 36 75 10 00 	r0 = 1078582 <spi_dc_ctrl : 107536 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:326:17
  106f90:    91 16             	r1 = r9			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:326:17
  106f92:    d1 ec 1b 03       	[++r1=312] = r0			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:326:17
  106f96:    c0 ff 5c 75 10 00 	r0 = 1078620 <spi_cs_ctrl : 10755c >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:327:17
  106f9c:    90 61             	[r1+4] = r0			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:327:17
  106f9e:    c0 ff 96 76 10 00 	r0 = 1078934 <spi_te_stat : 107696 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:328:17
  106fa4:    90 62             	[r1+8] = r0			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:328:17
  106fa6:    cb ff 04 c4 10 00 	r11 = 1098756 <lcd_drive : 10c404 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:328:17
  106fac:    50 ee b5 10       	r1 = b[r11+5] (u)			  ## lcd_drive.c:728:16
  106fb0:    40 21             	r0 = 1			  ## lcd_drive.c:728:16
  106fb2:    01 57             	if (r1 == 0) goto 46 <lcd_drv_init+0xA2 : 106fe2 >
  106fb4:    50 ee b4 30       	r3 = b[r11+4] (u)			  ## lcd_drive.c:728:41
  106fb8:    42 21             	r2 = 1			  ## lcd_drive.c:728:41
  106fba:    03 54             	if (r3 == 0) goto 40 <lcd_drv_init+0xA4 : 106fe4 >			  ## lcd_drive.c:728:41
  106fbc:    10 16             	r0 = r1
  106fbe:    32 16             	r2 = r3
  106fc0:    04 91             	goto 34 <lcd_drv_init+0xA4 : 106fe4 >
  106fc2:    00 e1 44 80       	r0 = r8 + 68			  ## lcd_drive.c:716:2
  106fc6:    02 e1 90 87       	r2 = r8 + 1936			  ## lcd_drive.c:716:2
  106fca:    41 20             	r1 = 0			  ## lcd_drive.c:716:2
  106fcc:    43 e0 cc 02       	r3 = 716 <_MASK_MEM_SIZE+0x128 : 2cc >			  ## lcd_drive.c:716:2
  106fd0:    80 ff 2e 8e f1 ff 	call -946642 <printf : 1fe04 >			  ## lcd_drive.c:716:2
  106fd6:    00 e1 76 82       	r0 = r8 + 630			  ## lcd_drive.c:716:2
  106fda:    80 ff 24 8e f1 ff 	call -946652 <printf : 1fe04 >			  ## lcd_drive.c:716:2
  106fe0:    f7 9f             	goto -2 <lcd_drv_init+0xA0 : 106fe0 >			  ## lcd_drive.c:716:2
  106fe2:    42 21             	r2 = 1
  106fe4:    52 ee 91 0f       	b[r9+241] = r0			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:332:22
  106fe8:    52 ee 92 2f       	b[r9+242] = r2			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:333:25
  106fec:    d0 ec 94 00       	r0 = [r9+4]			  ## lcd_drive.c:733:23
  106ff0:    d0 ec b8 12       	r1 = [r11+40]			  ## lcd_drive.c:733:2
  106ff4:    02 66             	r2 = [r0+24] 			  ## lcd_drive.c:733:41
  106ff6:    d0 ec 13 27       	[++r1=112] = r2			  ## lcd_drive.c:733:21
  106ffa:    02 67             	r2 = [r0+28] 			  ## lcd_drive.c:734:41
  106ffc:    92 61             	[r1+4] = r2			  ## lcd_drive.c:734:21
  106ffe:    02 68             	r2 = [r0+32] 			  ## lcd_drive.c:735:44
  107000:    92 68             	[r1+32] = r2			  ## lcd_drive.c:735:24
  107002:    02 69             	r2 = [r0+36] 			  ## lcd_drive.c:736:44
  107004:    92 69             	[r1+36] = r2			  ## lcd_drive.c:736:24
  107006:    00 6a             	r0 = [r0+40] 			  ## lcd_drive.c:737:42
  107008:    00 f1 4a 81       	r0 = r8 + 330  #			  ## lcd_drive.c:133:2
  10700c:    90 6a             		 [r1+40] = r0			  ## lcd_drive.c:737:22
  10700e:    d0 ec bc 22       	r2 = [r11+44]			  ## lcd_drive.c:133:62
  107012:    b1 16             	r1 = r11			  ## lcd_drive.c:133:2
  107014:    80 ff ea 8d f1 ff 	call -946710 <printf : 1fe04 >			  ## lcd_drive.c:133:2
  10701a:    d0 ec bc 02       	r0 = [r11+44]			  ## lcd_drive.c:135:13
  10701e:    00 42             	if (r0 == 0) goto 4 <lcd_drv_init+0xE4 : 107024 >			  ## lcd_drive.c:135:6
  107020:    c0 00             	call r0			  ## lcd_drive.c:136:3
  107022:    14 87             	goto 78 <lcd_drv_init+0x132 : 107072 >			  ## lcd_drive.c:136:3
  107024:    d0 ec 94 00       	r0 = [r9+4]			  ## lcd_drive.c:138:16
  107028:    00 60             	r0 = [r0+0] 			  ## lcd_drive.c:138:25
  10702a:    41 21             	r1 = 1			  ## lcd_drive.c:138:3
  10702c:    bf ea ef f8       	call -3618 <gpio_set_die : 10620e >			  ## lcd_drive.c:138:3
  107030:    d0 ec 94 00       	r0 = [r9+4]			  ## lcd_drive.c:139:25
  107034:    00 60             	r0 = [r0+0] 			  ## lcd_drive.c:139:34
  107036:    41 21             	r1 = 1			  ## lcd_drive.c:139:3
  107038:    bf ea b4 f8       	call -3736 <gpio_direction_output : 1061a4 >			  ## lcd_drive.c:139:3
  10703c:    40 e0 e8 03       	r0 = 1000 <_MASK_MEM_SIZE+0x244 : 3e8 >			  ## lcd_drive.c:141:3
  107040:    80 ff ca cf ff ff 	call -12342 <delay : 104010 >			  ## lcd_drive.c:141:3
  107046:    d0 ec 94 00       	r0 = [r9+4]			  ## lcd_drive.c:142:25
  10704a:    00 60             	r0 = [r0+0] 			  ## lcd_drive.c:142:34
  10704c:    41 20             	r1 = 0			  ## lcd_drive.c:142:3
  10704e:    bf ea a9 f8       	call -3758 <gpio_direction_output : 1061a4 >			  ## lcd_drive.c:142:3
  107052:    40 e0 e8 03       	r0 = 1000 <_MASK_MEM_SIZE+0x244 : 3e8 >			  ## lcd_drive.c:144:3
  107056:    80 ff b4 cf ff ff 	call -12364 <delay : 104010 >			  ## lcd_drive.c:144:3
  10705c:    d0 ec 94 00       	r0 = [r9+4]			  ## lcd_drive.c:145:25
  107060:    00 60             	r0 = [r0+0] 			  ## lcd_drive.c:145:34
  107062:    41 21             	r1 = 1			  ## lcd_drive.c:145:3
  107064:    bf ea 9e f8       	call -3780 <gpio_direction_output : 1061a4 >			  ## lcd_drive.c:145:3
  107068:    40 e0 e8 03       	r0 = 1000 <_MASK_MEM_SIZE+0x244 : 3e8 >			  ## lcd_drive.c:147:3
  10706c:    80 ff 9e cf ff ff 	call -12386 <delay : 104010 >			  ## lcd_drive.c:147:3
  107072:    d0 ec b8 02       	r0 = [r11+40]			  ## lcd_drive.c:740:11
  107076:    bf ea 4f fa       	call -2914 <lcd_init : 106518 >			  ## lcd_drive.c:740:2
  10707a:    50 ec b8 00       	r1_r0 = d[r11+8]			  ## lcd_drive.c:742:42
  10707e:    bf ea 53 fd       	call -1370 <lcd_drv_cmd_list : 106b28 >			  ## lcd_drive.c:742:2
  107082:    bf ea 12 fe       	call -988 <lcd_qspi_st77903_mode : 106caa >			  ## lcd_drive.c:744:9
  107086:    00 f8 8f 00       	if (r0 == 0) goto 286 <lcd_drv_init+0x268 : 1071a8 >			  ## lcd_drive.c:744:9
  10708a:    52 ea 01 90       	[r9+72] = 0x1			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:707:31
  10708e:    d0 ec 98 04       	r0 = [r9+72]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  107092:    00 44             	if (r0 == 0) goto 8 <lcd_drv_init+0x15C : 10709c >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  107094:    d0 ec 98 04       	r0 = [r9+72]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  107098:    80 f8 04 04       	if (r0 != 2) goto 8 <lcd_drv_init+0x164 : 1070a4 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  10709c:    d0 ec b8 12       	r1 = [r11+40]			  ## lcd_drive.c:479:17
  1070a0:    10 64             	r0 = [r1+16] 			  ## lcd_drive.c:479:25
  1070a2:    04 84             	goto 8 <lcd_drv_init+0x16C : 1070ac >
  1070a4:    d0 ec b8 12       	r1 = [r11+40]			  ## lcd_drive.c:483:17
  1070a8:    10 64             	r0 = [r1+16] 			  ## lcd_drive.c:483:25
  1070aa:    c0 28             	r0 += 8			  ## lcd_drive.c:483:35
  1070ac:    13 6b             	r3 = [r1+44] 
  1070ae:    42 23             	r2 = 3
  1070b0:    03 41             	if (r3 == 0) goto 2 <lcd_drv_init+0x174 : 1070b4 >
  1070b2:    42 22             	r2 = 2
  1070b4:    20 db             	r0 *= r2  #
  1070b6:    14 65             		 r4 = [r1+20] 
  1070b8:    0a 83             	r2 = r0 + 3
  1070ba:    d0 ec b0 01       	r0 = [r11+16]			  ## lcd_drive.c:488:17
  1070be:    41 24             	r1 = 4
  1070c0:    f4 e1 21 11       	r1 = r2 / r1 (s)
  1070c4:    17 a2             	r7 = r1 << 2
  1070c6:    00 43             	if (r0 == 0) goto 6 <lcd_drv_init+0x18E : 1070ce >			  ## lcd_drive.c:488:9
  1070c8:    d0 ec b0 a2       	r10 = [r11+32]
  1070cc:    04 94             	goto 40 <lcd_drv_init+0x1B6 : 1070f6 >
  1070ce:    40 21             	r0 = 1			  ## lcd_drive.c:498:28
  1070d0:    52 ee bd 01       	b[r11+29] = r0			  ## lcd_drive.c:498:28
  1070d4:    f0 e1 70 a4       	r10 = r7 * r4			  ## lcd_drive.c:499:42
  1070d8:    d0 ec b1 a2       	[r11+32] = r10			  ## lcd_drive.c:499:29
  1070dc:    a0 16             	r0 = r10			  ## lcd_drive.c:500:32
  1070de:    bf ea 4c fb       	call -2408 <malloc : 10677a >			  ## lcd_drive.c:500:32
  1070e2:    d0 ec b1 01       	[r11+16] = r0			  ## lcd_drive.c:500:24
  1070e6:    d0 ec b5 01       	[r11+20] = r0			  ## lcd_drive.c:501:28
  1070ea:    d0 ec b9 01       	[r11+24] = r0			  ## lcd_drive.c:502:28
  1070ee:    41 20             	r1 = 0			  ## lcd_drive.c:502:28
  1070f0:    52 ee bc 11       	b[r11+28] = r1			  ## lcd_drive.c:503:31
  1070f4:    20 5c             	if (r0 == 0) goto 184 <lcd_drv_init+0x26E : 1071ae >			  ## lcd_drive.c:503:31
  1070f6:    41 20             	r1 = 0			  ## lcd_drive.c:509:5
  1070f8:    c4 14             	r12 = 0			  ## lcd_drive.c:509:5
  1070fa:    a2 16             	r2 = r10			  ## lcd_drive.c:509:5
  1070fc:    80 ff 7e 8c f1 ff 	call -947074 <memset : 1fd80 >			  ## lcd_drive.c:509:5
  107102:    d0 ec 98 04       	r0 = [r9+72]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  107106:    80 f8 19 02       	if (r0 != 1) goto 50 <lcd_drv_init+0x1FC : 10713c >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  10710a:    c0 ff 40 9c 10 00 	r0 = 1088576 <line_begin_cmd : 109c40 >
  107110:    04 91             	goto 34 <lcd_drv_init+0x1F4 : 107134 >
  107112:    01 e1 14 b0       	r1 = r11 + 20			  ## lcd_drive.c:517:21
  107116:    d8 ec 1a 5c       	r5 = [r1+r12<<2]			  ## lcd_drive.c:517:21
  10711a:    42 20             	r2 = 0
  10711c:    04 87             	goto 14 <lcd_drv_init+0x1EC : 10712c >
  10711e:    03 16             	r3 = r0			  ## lcd_drive.c:520:17
  107120:    51 16             	r1 = r5			  ## lcd_drive.c:520:17
  107122:    10 8f             	rep 4 16 {			  ## lcd_drive.c:520:17
  107124:    36 07             		r6 = b[r3++=1] (u)			  ## lcd_drive.c:520:17
  107126:    96 07             		b[r1++=1] = r6
                               	}			  ## lcd_drive.c:520:17
  107128:    75 18             	r5 += r7			  ## lcd_drive.c:519:13
  10712a:    c2 21             	r2 += 1			  ## lcd_drive.c:519:37
  10712c:    84 ed f7 21       	ifs (r2 < r4) goto -18 <lcd_drv_init+0x1DE : 10711e >
  107130:    0c e1 01 c0       	r12 = r12 + 1			  ## lcd_drive.c:516:46
  107134:    50 ee bd 11       	r1 = b[r11+29] (u)			  ## lcd_drive.c:516:25
  107138:    81 ed eb c1       	ifs (r12 < r1) goto -42 <lcd_drv_init+0x1D2 : 107112 >			  ## lcd_drive.c:516:25
  10713c:    d0 ec b8 32       	r3 = [r11+40]
  107140:    03 49             	if (r3 == 0) goto 18 <lcd_drv_init+0x214 : 107154 >
  107142:    d0 ec 98 04       	r0 = [r9+72]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  107146:    00 44             	if (r0 == 0) goto 8 <lcd_drv_init+0x210 : 107150 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  107148:    d0 ec 98 04       	r0 = [r9+72]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  10714c:    80 f8 11 04       	if (r0 != 2) goto 34 <lcd_drv_init+0x232 : 107172 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd_spi.c:712:25
  107150:    31 64             	r1 = [r3+16] 			  ## lcd_drive.c:760:20
  107152:    04 91             	goto 34 <lcd_drv_init+0x236 : 107176 >
  107154:    00 e1 44 80       	r0 = r8 + 68			  ## lcd_drive.c:757:3
  107158:    02 e1 90 87       	r2 = r8 + 1936			  ## lcd_drive.c:757:3
  10715c:    41 20             	r1 = 0			  ## lcd_drive.c:757:3
  10715e:    43 e0 f5 02       	r3 = 757 <_MASK_MEM_SIZE+0x151 : 2f5 >			  ## lcd_drive.c:757:3
  107162:    80 ff 9c 8c f1 ff 	call -947044 <printf : 1fe04 >			  ## lcd_drive.c:757:3
  107168:    80 16             	r0 = r8			  ## lcd_drive.c:757:3
  10716a:    80 ff 94 8c f1 ff 	call -947052 <printf : 1fe04 >			  ## lcd_drive.c:757:3
  107170:    f7 9f             	goto -2 <lcd_drv_init+0x230 : 107170 >			  ## lcd_drive.c:757:3
  107172:    30 64             	r0 = [r3+16] 			  ## lcd_drive.c:764:20
  107174:    09 88             	r1 = r0 + 8			  ## lcd_drive.c:764:30
  107176:    d0 ec b0 01       	r0 = [r11+16]			  ## lcd_drive.c:769:14
  10717a:    00 56             	if (r0 == 0) goto 44 <lcd_drv_init+0x268 : 1071a8 >			  ## lcd_drive.c:769:14
  10717c:    50 ee bc 01       	r0 = b[r11+28] (u)			  ## lcd_drive.c:770:34
  107180:    02 f1 14 b0       	r2 = r11 + 20  #			  ## lcd_drive.c:770:34
  107184:    34 6b             		 r4 = [r3+44] 			  ## lcd_drive.c:770:34
  107186:    d8 ec 2a 00       	r0 = [r2+r0<<2]			  ## lcd_drive.c:770:34
  10718a:    32 65             	r2 = [r3+20] 			  ## lcd_drive.c:770:34
  10718c:    43 28             	r3 = 8			  ## lcd_drive.c:770:13
  10718e:    83 21             	[sp+4] = r3			  ## lcd_drive.c:770:13
  107190:    83 20             	[sp] = r3			  ## lcd_drive.c:770:13
  107192:    43 23             	r3 = 3			  ## lcd_drive.c:770:13
  107194:    04 41             	if (r4 == 0) goto 2 <lcd_drv_init+0x258 : 107198 >			  ## lcd_drive.c:770:13
  107196:    43 22             	r3 = 2
  107198:    13 1b             	r3 *= r1
  10719a:    c3 23             	r3 += 3
  10719c:    44 24             	r4 = 4
  10719e:    f4 e1 31 34       	r3 = r3 / r4 (s)
  1071a2:    33 a2             	r3 = r3 << 2
  1071a4:    bf ea 6e fe       	call -804 <lcd_spi_draw_st77903 : 106e84 >			  ## lcd_drive.c:770:13
  1071a8:    40 20             	r0 = 0			  ## lcd_drive.c:779:2
  1071aa:    02 82             	sp += 8			  ## lcd_drive.c:779:2
  1071ac:    5c 04             	{pc, r12-r4} = [sp++]			  ## lcd_drive.c:779:2
  1071ae:    00 e1 44 80       	r0 = r8 + 68			  ## lcd_drive.c:507:5
  1071b2:    02 e1 90 87       	r2 = r8 + 1936			  ## lcd_drive.c:507:5
  1071b6:    43 e0 fb 01       	r3 = 507 <_MASK_MEM_SIZE+0x57 : 1fb >			  ## lcd_drive.c:507:5
  1071ba:    80 ff 44 8c f1 ff 	call -947132 <printf : 1fe04 >			  ## lcd_drive.c:507:5
  1071c0:    00 e1 ac 80       	r0 = r8 + 172			  ## lcd_drive.c:507:5
  1071c4:    80 ff 3a 8c f1 ff 	call -947142 <printf : 1fe04 >			  ## lcd_drive.c:507:5
  1071ca:    f7 9f             	goto -2 <lcd_drv_init+0x28A : 1071ca >			  ## lcd_drive.c:507:5


lcd_drv_get_screen_info:
  1071cc:    74 04             	[--sp] = {rets, r4}			  ## lcd_drive.c:800:0
  1071ce:    c3 ff 04 c4 10 00 	r3 = 1098756 <lcd_drive : 10c404 >			  ## lcd_drive.c:800:0
  1071d4:    01 d6             	r1 = r0  #			  ## lcd_drive.c:800:0
  1071d6:    32 6a             		 r2 = [r3+40] 			  ## lcd_drive.c:802:16
  1071d8:    24 69             	r4 = [r2+36] 			  ## lcd_drive.c:802:24
  1071da:    9c 60             	h[r1+0] = r4			  ## lcd_drive.c:802:14
  1071dc:    20 6a             	r0 = [r2+40] 			  ## lcd_drive.c:803:25
  1071de:    98 61             	h[r1+2] = r0			  ## lcd_drive.c:803:15
  1071e0:    50 ee 2c 02       	r0 = b[r2+44] (u)			  ## lcd_drive.c:806:31
  1071e4:    98 46             	b[r1+6] = r0			  ## lcd_drive.c:806:21
  1071e6:    00 44             	if (r0 == 0) goto 8 <lcd_drv_get_screen_info+0x24 : 1071f0 >			  ## lcd_drive.c:807:6
  1071e8:    80 f8 0a 02       	if (r0 != 1) goto 20 <lcd_drv_get_screen_info+0x34 : 107200 >
  1071ec:    40 a1             	r0 = r4 << 1			  ## lcd_drive.c:808:31
  1071ee:    04 82             	goto 4 <lcd_drv_get_screen_info+0x28 : 1071f4 >			  ## lcd_drive.c:808:31
  1071f0:    e0 e1 03 40       	r0 = r4 * 0x3			  ## lcd_drive.c:810:31
  1071f4:    c0 23             	r0 += 3
  1071f6:    c4 ff fc ff 00 00 	r4 = 65532 <hd_quantize_intervals_LF+0x6358 : fffc >
  1071fc:    c0 19             	r0 &= r4
  1071fe:    98 62             	h[r1+4] = r0
  107200:    20 66             	r0 = [r2+24] 			  ## lcd_drive.c:814:28
  107202:    98 47             	b[r1+7] = r0			  ## lcd_drive.c:814:18
  107204:    3c 44             	r4 = b[r3+4] (u)			  ## lcd_drive.c:817:27
  107206:    9c 48             	b[r1+8] = r4			  ## lcd_drive.c:817:18
  107208:    38 45             	r0 = b[r3+5] (u)			  ## lcd_drive.c:818:27
  10720a:    98 49             	b[r1+9] = r0			  ## lcd_drive.c:818:18
  10720c:    84 42             	if (r4 != 0) goto 4 <lcd_drv_get_screen_info+0x46 : 107212 >			  ## lcd_drive.c:818:18
  10720e:    43 21             	r3 = 1			  ## lcd_drive.c:820:25
  107210:    9b 48             	b[r1+8] = r3			  ## lcd_drive.c:820:25
  107212:    80 42             	if (r0 != 0) goto 4 <lcd_drv_get_screen_info+0x4C : 107218 >
  107214:    40 21             	r0 = 1			  ## lcd_drive.c:823:25
  107216:    98 49             	b[r1+9] = r0			  ## lcd_drive.c:823:25
  107218:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## lcd_drive.c:827:22
  10721e:    0b 40             	r3 = b[r0+0] (u)			  ## lcd_drive.c:827:22
  107220:    40 21             	r0 = 1			  ## lcd_drive.c:827:21
  107222:    83 41             	if (r3 != 0) goto 2 <lcd_drv_get_screen_info+0x5A : 107226 >			  ## lcd_drive.c:827:21
  107224:    30 16             	r0 = r3			  ## lcd_drive.c:827:21
  107226:    98 4b             	b[r1+11] = r0			  ## lcd_drive.c:827:18
  107228:    22 67             	r2 = [r2+28] 			  ## lcd_drive.c:828:26
  10722a:    40 20             	r0 = 0			  ## lcd_drive.c:833:2
  10722c:    9a 4a             	b[r1+10] = r2			  ## lcd_drive.c:828:16
  10722e:    54 04             	{pc, r4} = [sp++]			  ## lcd_drive.c:833:2


lcd_drv_buffer_malloc:
  107230:    77 04             	[--sp] = {rets, r7-r4}			  ## lcd_drive.c:859:0
  107232:    c6 ff 04 c4 10 00 	r6 = 1098756 <lcd_drive : 10c404 >			  ## lcd_drive.c:859:0
  107238:    14 d6             	r4 = r1  #			  ## lcd_drive.c:859:0
  10723a:    62 6a             		 r2 = [r6+40] 			  ## lcd_drive.c:861:18
  10723c:    05 d6             	r5 = r0  #			  ## lcd_drive.c:861:18
  10723e:    23 68             		 r3 = [r2+32] 			  ## lcd_drive.c:861:26
  107240:    38 83             	r0 = r3 + 3			  ## lcd_drive.c:861:38
  107242:    21 67             	r1 = [r2+28] 			  ## lcd_drive.c:861:38
  107244:    42 24             	r2 = 4			  ## lcd_drive.c:861:43
  107246:    f4 e1 01 02       	r0 = r0 / r2 (s)			  ## lcd_drive.c:861:43
  10724a:    07 a2             	r7 = r0 << 2			  ## lcd_drive.c:861:47
  10724c:    f0 e1 70 01       	r0 = r7 * r1
  107250:    bf ea 93 fa       	call -2778 <malloc : 10677a >			  ## lcd_drive.c:864:16
  107254:    d0 60             	[r5+0] = r0			  ## lcd_drive.c:864:16
  107256:    05 46             	if (r5 == 0) goto 12 <lcd_drv_buffer_malloc+0x34 : 107264 >			  ## lcd_drive.c:864:16
  107258:    60 6a             	r0 = [r6+40] 			  ## lcd_drive.c:879:21
  10725a:    00 67             	r0 = [r0+28] 			  ## lcd_drive.c:879:29
  10725c:    f0 e1 00 17       	r1 = r0 * r7			  ## lcd_drive.c:879:19
  107260:    40 20             	r0 = 0			  ## lcd_drive.c:879:19
  107262:    04 83             	goto 6 <lcd_drv_buffer_malloc+0x3A : 10726a >			  ## lcd_drive.c:879:19
  107264:    41 20             	r1 = 0
  107266:    91 60             	[r1+0] = r1			  ## lcd_drive.c:873:8
  107268:    10 3f             	r0 = -1			  ## lcd_drive.c:873:8
  10726a:    c1 60             	[r4+0] = r1			  ## lcd_drive.c:879:8
  10726c:    57 04             	{pc, r7-r4} = [sp++]			  ## lcd_drive.c:882:1


lcd_drv_buffer_free:
  10726e:    10 04             	[--sp] = rets			  ## lcd_drive.c:903:0
  107270:    00 42             	if (r0 == 0) goto 4 <lcd_drv_buffer_free+0x8 : 107276 >			  ## lcd_drive.c:903:0
  107272:    bf ea 0e fc       	call -2020 <free : 106a92 >			  ## lcd_drive.c:906:4
  107276:    40 20             	r0 = 0			  ## lcd_drive.c:912:2
  107278:    00 04             	pc = [sp++]			  ## lcd_drive.c:912:2


lcd_drv_draw:
  10727a:    10 04             	[--sp] = rets			  ## lcd_drive.c:935:0
  10727c:    02 16             	r2 = r0			  ## lcd_drive.c:935:0
  10727e:    bf ea 14 fd       	call -1496 <lcd_qspi_st77903_mode : 106caa >			  ## lcd_drive.c:936:6
  107282:    01 16             	r1 = r0			  ## lcd_drive.c:936:6
  107284:    10 3f             	r0 = -1			  ## lcd_drive.c:936:6
  107286:    81 45             	if (r1 != 0) goto 10 <lcd_drv_draw+0x18 : 107292 >			  ## lcd_drive.c:936:6
  107288:    40 21             	r0 = 1			  ## lcd_drive.c:940:2
  10728a:    21 16             	r1 = r2			  ## lcd_drive.c:940:2
  10728c:    bf ea ae fd       	call -1188 <lcd_draw : 106dec >			  ## lcd_drive.c:940:2
  107290:    40 20             	r0 = 0
  107292:    00 04             	pc = [sp++]			  ## lcd_drive.c:942:1


lcd_set_draw_area:
  107294:    7b 04             	[--sp] = {rets, r11-r4}			  ## imd.c:569:0
  107296:    c7 ff 00 c8 10 00 	r7 = 1099776 <backlight_status : 10c800 >			  ## imd.c:569:0
  10729c:    38 d6             	r8 = r3  #			  ## imd.c:569:0
  10729e:    75 67             		 r5 = [r7+28] 			  ## imd.c:569:0
  1072a0:    29 16             	r9 = r2			  ## imd.c:569:0
  1072a2:    1b 16             	r11 = r1			  ## imd.c:569:0
  1072a4:    06 16             	r6 = r0			  ## imd.c:569:0
  1072a6:    c4 ff 1a ba 10 00 	r4 = 1096218 <imd_clock_init.div+0x5A : 10ba1a >			  ## imd.c:569:0
  1072ac:    05 5a             	if (r5 == 0) goto 52 <lcd_set_draw_area+0x4E : 1072e2 >			  ## imd.c:569:0
  1072ae:    50 ee 71 0f       	r0 = b[r7+241] (u)			  ## imd.c:569:0
  1072b2:    f4 e1 61 10       	r1 = r6 / r0 (s)			  ## imd.c:569:0
  1072b6:    10 1b             	r0 *= r1			  ## imd.c:569:0
  1072b8:    60 1e             	r0 = r6 - r0			  ## imd.c:569:0
  1072ba:    10 42             	if (r0 == 0) goto 68 <lcd_set_draw_area+0x6C : 107300 >			  ## imd.c:575:5
  1072bc:    00 e1 44 40       	r0 = r4 + 68			  ## imd.c:575:5
  1072c0:    02 e1 1e 44       	r2 = r4 + 1054			  ## imd.c:575:5
  1072c4:    41 20             	r1 = 0			  ## imd.c:575:5
  1072c6:    43 e0 3f 02       	r3 = 575 <_MASK_MEM_SIZE+0x9B : 23f >			  ## imd.c:575:5
  1072ca:    80 ff 34 8b f1 ff 	call -947404 <printf : 1fe04 >			  ## imd.c:575:5
  1072d0:    50 ee 71 2f       	r2 = b[r7+241] (u)			  ## imd.c:575:5
  1072d4:    00 e1 b8 45       	r0 = r4 + 1464			  ## imd.c:575:5
  1072d8:    61 16             	r1 = r6			  ## imd.c:575:5
  1072da:    80 ff 24 8b f1 ff 	call -947420 <printf : 1fe04 >			  ## imd.c:575:5
  1072e0:    f7 9f             	goto -2 <lcd_set_draw_area+0x4C : 1072e0 >			  ## imd.c:575:5
  1072e2:    00 e1 44 40       	r0 = r4 + 68			  ## imd.c:571:2
  1072e6:    02 e1 1e 44       	r2 = r4 + 1054			  ## imd.c:571:2
  1072ea:    41 20             	r1 = 0			  ## imd.c:571:2
  1072ec:    43 e0 3b 02       	r3 = 571 <_MASK_MEM_SIZE+0x97 : 23b >			  ## imd.c:571:2
  1072f0:    80 ff 0e 8b f1 ff 	call -947442 <printf : 1fe04 >			  ## imd.c:571:2
  1072f6:    40 16             	r0 = r4			  ## imd.c:571:2
  1072f8:    80 ff 06 8b f1 ff 	call -947450 <printf : 1fe04 >			  ## imd.c:571:2
  1072fe:    f7 9f             	goto -2 <lcd_set_draw_area+0x6A : 1072fe >			  ## imd.c:571:2
  107300:    50 ee 71 0f       	r0 = b[r7+241] (u)
  107304:    b4 e0 b2 16       	r1 = r11 - r6
  107308:    1d 81             	r5 = r1 + 1
  10730a:    f4 e1 51 10       	r1 = r5 / r0 (s)
  10730e:    10 1b             	r0 *= r1
  107310:    50 1e             	r0 = r5 - r0
  107312:    00 54             	if (r0 == 0) goto 40 <lcd_set_draw_area+0xA8 : 10733c >			  ## imd.c:576:5
  107314:    00 e1 44 40       	r0 = r4 + 68			  ## imd.c:576:5
  107318:    02 e1 1e 44       	r2 = r4 + 1054			  ## imd.c:576:5
  10731c:    41 20             	r1 = 0			  ## imd.c:576:5
  10731e:    43 e0 40 02       	r3 = 576 <_MASK_MEM_SIZE+0x9C : 240 >			  ## imd.c:576:5
  107322:    80 ff dc 8a f1 ff 	call -947492 <printf : 1fe04 >			  ## imd.c:576:5
  107328:    50 ee 71 3f       	r3 = b[r7+241] (u)			  ## imd.c:576:5
  10732c:    00 e1 23 47       	r0 = r4 + 1827			  ## imd.c:576:5
  107330:    61 16             	r1 = r6			  ## imd.c:576:5
  107332:    b2 16             	r2 = r11			  ## imd.c:576:5
  107334:    80 ff ca 8a f1 ff 	call -947510 <printf : 1fe04 >			  ## imd.c:576:5
  10733a:    f7 9f             	goto -2 <lcd_set_draw_area+0xA6 : 10733a >			  ## imd.c:576:5
  10733c:    50 ee 72 0f       	r0 = b[r7+242] (u)
  107340:    f4 e1 21 10       	r1 = r2 / r0 (s)
  107344:    10 1b             	r0 *= r1
  107346:    20 1e             	r0 = r2 - r0
  107348:    00 53             	if (r0 == 0) goto 38 <lcd_set_draw_area+0xDC : 107370 >			  ## imd.c:577:5
  10734a:    00 e1 44 40       	r0 = r4 + 68			  ## imd.c:577:5
  10734e:    02 e1 1e 44       	r2 = r4 + 1054			  ## imd.c:577:5
  107352:    41 20             	r1 = 0			  ## imd.c:577:5
  107354:    43 e0 41 02       	r3 = 577 <_MASK_MEM_SIZE+0x9D : 241 >			  ## imd.c:577:5
  107358:    80 ff a6 8a f1 ff 	call -947546 <printf : 1fe04 >			  ## imd.c:577:5
  10735e:    50 ee 72 2f       	r2 = b[r7+242] (u)			  ## imd.c:577:5
  107362:    00 e1 0d 46       	r0 = r4 + 1549			  ## imd.c:577:5
  107366:    91 16             	r1 = r9			  ## imd.c:577:5
  107368:    80 ff 96 8a f1 ff 	call -947562 <printf : 1fe04 >			  ## imd.c:577:5
  10736e:    f7 9f             	goto -2 <lcd_set_draw_area+0xDA : 10736e >			  ## imd.c:577:5
  107370:    50 ee 72 0f       	r0 = b[r7+242] (u)
  107374:    b1 1e             	r1 = r3 - r2
  107376:    0a e1 01 10       	r10 = r1 + 1
  10737a:    f4 e1 a1 10       	r1 = r10 / r0 (s)
  10737e:    10 1b             	r0 *= r1
  107380:    b4 e0 a2 00       	r0 = r10 - r0
  107384:    00 54             	if (r0 == 0) goto 40 <lcd_set_draw_area+0x11A : 1073ae >			  ## imd.c:578:5
  107386:    00 e1 44 40       	r0 = r4 + 68			  ## imd.c:578:5
  10738a:    02 e1 1e 44       	r2 = r4 + 1054			  ## imd.c:578:5
  10738e:    41 20             	r1 = 0			  ## imd.c:578:5
  107390:    43 e0 42 02       	r3 = 578 <_MASK_MEM_SIZE+0x9E : 242 >			  ## imd.c:578:5
  107394:    80 ff 6a 8a f1 ff 	call -947606 <printf : 1fe04 >			  ## imd.c:578:5
  10739a:    50 ee 72 3f       	r3 = b[r7+242] (u)			  ## imd.c:578:5
  10739e:    00 e1 02 48       	r0 = r4 + 2050			  ## imd.c:578:5
  1073a2:    91 16             	r1 = r9			  ## imd.c:578:5
  1073a4:    82 16             	r2 = r8			  ## imd.c:578:5
  1073a6:    80 ff 58 8a f1 ff 	call -947624 <printf : 1fe04 >			  ## imd.c:578:5
  1073ac:    f7 9f             	goto -2 <lcd_set_draw_area+0x118 : 1073ac >			  ## imd.c:578:5
  1073ae:    bf ea d6 fa       	call -2644 <imd_sfr_pop : 10695e >			  ## imd.c:580:2
  1073b2:    bf ea 03 fb       	call -2554 <lcd_wait : 1069bc >			  ## imd.c:581:5
  1073b6:    bf ea 08 fb       	call -2544 <imd_irq_disable : 1069ca >			  ## imd.c:582:2
  1073ba:    70 67             	r0 = [r7+28] 			  ## imd.c:587:33
  1073bc:    01 6b             	r1 = [r0+44] 			  ## imd.c:587:41
  1073be:    40 23             	r0 = 3			  ## imd.c:587:32
  1073c0:    01 41             	if (r1 == 0) goto 2 <lcd_set_draw_area+0x130 : 1073c4 >			  ## imd.c:587:32
  1073c2:    40 22             	r0 = 2			  ## imd.c:587:32
  1073c4:    50 1b             	r0 *= r5			  ## imd.c:587:29
  1073c6:    c0 23             	r0 += 3			  ## imd.c:587:78
  1073c8:    41 24             	r1 = 4			  ## imd.c:587:83
  1073ca:    f4 e1 01 01       	r0 = r0 / r1 (s)			  ## imd.c:587:83
  1073ce:    02 a2             	r2 = r0 << 2			  ## imd.c:587:87
  1073d0:    50 16             	r0 = r5			  ## imd.c:588:9
  1073d2:    a1 16             	r1 = r10			  ## imd.c:588:9
  1073d4:    bf ea ae fc       	call -1700 <imd_set_buf_size : 106d34 >			  ## imd.c:588:9
  1073d8:    70 67             	r0 = [r7+28] 			  ## imd.c:591:7
  1073da:    01 66             	r1 = [r0+24] 			  ## imd.c:591:15
  1073dc:    c0 ff 70 c4 10 00 	r0 = 1098864 <imd_pap_io : 10c470 >			  ## imd.c:591:15
  1073e2:    01 f8 03 04       	if (r1 == 2) goto 6 <lcd_set_draw_area+0x158 : 1073ec >			  ## imd.c:591:15
  1073e6:    01 f8 06 02       	if (r1 == 1) goto 12 <lcd_set_draw_area+0x162 : 1073f6 >
  1073ea:    81 51             	if (r1 != 0) goto 34 <lcd_set_draw_area+0x17A : 10740e >
  1073ec:    71 6f             	r1 = [r7+60] 			  ## imd.c:45:9
  1073ee:    01 4e             	if (r1 == 0) goto 28 <lcd_set_draw_area+0x178 : 10740c >
  1073f0:    04 6f             	r4 = [r0+60] 			  ## imd.c:594:19
  1073f2:    84 46             	if (r4 != 0) goto 12 <lcd_set_draw_area+0x16C : 107400 >			  ## imd.c:594:19
  1073f4:    5b 04             	{pc, r11-r4} = [sp++]			  ## imd.c:606:1
  1073f6:    d0 ec 70 14       	r1 = [r7+64]			  ## imd.c:45:9
  1073fa:    01 48             	if (r1 == 0) goto 16 <lcd_set_draw_area+0x178 : 10740c >
  1073fc:    04 63             	r4 = [r0+12] 			  ## imd.c:600:19
  1073fe:    04 46             	if (r4 == 0) goto 12 <lcd_set_draw_area+0x178 : 10740c >			  ## imd.c:600:19
  107400:    60 16             	r0 = r6
  107402:    b1 16             	r1 = r11
  107404:    92 16             	r2 = r9
  107406:    83 16             	r3 = r8
  107408:    c4 00             	call r4
  10740a:    5b 04             	{pc, r11-r4} = [sp++]			  ## imd.c:606:1
  10740c:    5b 04             	{pc, r11-r4} = [sp++]			  ## imd.c:606:1
  10740e:    00 e1 44 40       	r0 = r4 + 68			  ## imd.c:604:3
  107412:    02 e1 1e 44       	r2 = r4 + 1054			  ## imd.c:604:3
  107416:    41 20             	r1 = 0			  ## imd.c:604:3
  107418:    43 e0 5c 02       	r3 = 604 <_MASK_MEM_SIZE+0xB8 : 25c >			  ## imd.c:604:3
  10741c:    80 ff e2 89 f1 ff 	call -947742 <printf : 1fe04 >			  ## imd.c:604:3
  107422:    00 e1 e8 40       	r0 = r4 + 232			  ## imd.c:604:3
  107426:    80 ff d8 89 f1 ff 	call -947752 <printf : 1fe04 >			  ## imd.c:604:3
  10742c:    f7 9f             	goto -2 <lcd_set_draw_area+0x198 : 10742c >			  ## imd.c:604:3


lcd_drv_set_draw_area:
  10742e:    75 04             	[--sp] = {rets, r5, r4}			  ## lcd_drive.c:1180:0
  107430:    14 16             	r4 = r1			  ## lcd_drive.c:1180:0
  107432:    05 16             	r5 = r0			  ## lcd_drive.c:1180:0
  107434:    bf ea 39 fc       	call -1934 <lcd_qspi_st77903_mode : 106caa >			  ## lcd_drive.c:1187:6
  107438:    80 44             	if (r0 != 0) goto 8 <lcd_drv_set_draw_area+0x14 : 107442 >			  ## lcd_drive.c:1187:6
  10743a:    50 16             	r0 = r5			  ## lcd_drive.c:1191:2
  10743c:    41 16             	r1 = r4			  ## lcd_drive.c:1191:2
  10743e:    bf ea 29 ff       	call -430 <lcd_set_draw_area : 107294 >			  ## lcd_drive.c:1191:2
  107442:    55 04             	{pc, r5, r4} = [sp++]			  ## lcd_drive.c:1192:1


lcd_drv_clear_screen:
  107444:    76 04             	[--sp] = {rets, r6-r4}			  ## lcd_drive.c:1196:0
  107446:    04 16             	r4 = r0			  ## lcd_drive.c:1196:0
  107448:    bf ea 2f fc       	call -1954 <lcd_qspi_st77903_mode : 106caa >			  ## lcd_drive.c:1197:6
  10744c:    90 4b             	if (r0 != 0) goto 86 <lcd_drv_clear_screen+0x60 : 1074a4 >			  ## lcd_drive.c:1197:6
  10744e:    c5 ff 00 c8 10 00 	r5 = 1099776 <backlight_status : 10c800 >
  107454:    50 67             	r0 = [r5+28] 
  107456:    10 47             	if (r0 == 0) goto 78 <lcd_drv_clear_screen+0x62 : 1074a6 >
  107458:    bf ea 81 fa       	call -2814 <imd_sfr_pop : 10695e >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:709:5
  10745c:    bf ea 7f fa       	call -2818 <imd_sfr_pop : 10695e >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:713:5
  107460:    bf ea b3 fa       	call -2714 <imd_irq_disable : 1069ca >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:714:5
  107464:    50 67             	r0 = [r5+28] 			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:715:22
  107466:    50 ec 00 01       	r1_r0 = d[r0+16]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:715:49
  10746a:    e2 e1 03 00       	r2 = r0 * 0x3			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:715:79
  10746e:    bf ea 61 fc       	call -1854 <imd_set_buf_size : 106d34 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:715:5
  107472:    51 67             	r1 = [r5+28] 			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:717:20
  107474:    13 64             	r3 = [r1+16] 			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:717:59
  107476:    01 eb 05 00       	{r2, r0} = [r1+]			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:717:28
  10747a:    89 dc             	r1 = r0 + r3  #			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:717:49
  10747c:    16 65             		 r6 = [r1+20] 			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:717:114
  10747e:    f9 3f             	r1 += -1			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:717:69
  107480:    a3 1d             	r3 = r2 + r6			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:717:104
  107482:    fb 3f             	r3 += -1			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:717:125
  107484:    bf ea 06 ff       	call -500 <lcd_set_draw_area : 107294 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:717:2
  107488:    40 20             	r0 = 0			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:717:2
  10748a:    52 ee 5c 0e       	b[r5+236] = r0			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:718:17
  10748e:    40 21             	r0 = 1			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:719:18
  107490:    52 ee 5d 0e       	b[r5+237] = r0			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:719:18
  107494:    bf ea 14 fc       	call -2008 <imd_irq_enable : 106cc0 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:720:2
  107498:    40 20             	r0 = 0			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:721:2
  10749a:    41 16             	r1 = r4			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:721:2
  10749c:    bf ea a6 fc       	call -1716 <lcd_draw : 106dec >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:721:2
  1074a0:    bf ea 8c fa       	call -2792 <lcd_wait : 1069bc >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:722:2
  1074a4:    56 04             	{pc, r6-r4} = [sp++]			  ## lcd_drive.c:1202:1
  1074a6:    c4 ff 1a ba 10 00 	r4 = 1096218 <imd_clock_init.div+0x5A : 10ba1a >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:703:2
  1074ac:    00 e1 44 40       	r0 = r4 + 68			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:703:2
  1074b0:    02 e1 1e 44       	r2 = r4 + 1054			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:703:2
  1074b4:    41 20             	r1 = 0			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:703:2
  1074b6:    43 e0 bf 02       	r3 = 703 <_MASK_MEM_SIZE+0x11B : 2bf >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:703:2
  1074ba:    80 ff 44 89 f1 ff 	call -947900 <printf : 1fe04 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:703:2
  1074c0:    40 16             	r0 = r4			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:703:2
  1074c2:    80 ff 3c 89 f1 ff 	call -947908 <printf : 1fe04 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:703:2
  1074c8:    f7 9f             	goto -2 <lcd_drv_clear_screen+0x84 : 1074c8 >			  ## F:\jianlong\sdk\ac701_uboot_lcd_ui_0.0.1\cbp_out\lib\imd\imd.c:703:2


lcd_drv_backlight_ctrl:
  1074ca:    76 04             	[--sp] = {rets, r6-r4}			  ## lcd_drive.c:232:0
  1074cc:    c1 ff 04 c4 10 00 	r1 = 1098756 <lcd_drive : 10c404 >			  ## lcd_drive.c:190:13
  1074d2:    04 d6             	r4 = r0  #			  ## lcd_drive.c:190:13
  1074d4:    11 6c             		 r1 = [r1+48] 			  ## lcd_drive.c:190:13
  1074d6:    c6 ff 00 c8 10 00 	r6 = 1099776 <backlight_status : 10c800 >
  1074dc:    01 49             	if (r1 == 0) goto 18 <lcd_drv_backlight_ctrl+0x26 : 1074f0 >			  ## lcd_drive.c:190:6
  1074de:    c1 00             	call r1			  ## lcd_drive.c:191:3
  1074e0:    45 20             	r5 = 0
  1074e2:    40 20             	r0 = 0
  1074e4:    35 ed 00 00       	ifs (r5 >= 0) {
  1074e8:    40 16             		r0 = r4
                               	}			  ## lcd_drive.c:234:6
  1074ea:    50 d6             	r0 = r5  #			  ## lcd_drive.c:239:2
  1074ec:    e8 40             		 b[r6+0] = r0			  ## lcd_drive.c:239:2
  1074ee:    56 04             	{pc, r6-r4} = [sp++]			  ## lcd_drive.c:239:2
  1074f0:    60 61             	r0 = [r6+4] 			  ## lcd_drive.c:192:13
  1074f2:    00 64             	r0 = [r0+16] 			  ## lcd_drive.c:192:22
  1074f4:    70 f8 05 fe       	if (r0 == -1) goto 10 <lcd_drv_backlight_ctrl+0x38 : 107502 >			  ## lcd_drive.c:192:22
  1074f8:    04 46             	if (r4 == 0) goto 12 <lcd_drv_backlight_ctrl+0x3C : 107506 >			  ## lcd_drive.c:194:7
  1074fa:    41 21             	r1 = 1			  ## lcd_drive.c:195:4
  1074fc:    bf ea 52 f6       	call -4956 <gpio_direction_output : 1061a4 >			  ## lcd_drive.c:195:4
  107500:    f7 8f             	goto -34 <lcd_drv_backlight_ctrl+0x16 : 1074e0 >			  ## lcd_drive.c:195:4
  107502:    15 3f             	r5 = -1
  107504:    f7 8e             	goto -36 <lcd_drv_backlight_ctrl+0x18 : 1074e2 >
  107506:    41 20             	r1 = 0			  ## lcd_drive.c:197:4
  107508:    45 20             	r5 = 0			  ## lcd_drive.c:197:4
  10750a:    bf ea 4b f6       	call -4970 <gpio_direction_output : 1061a4 >			  ## lcd_drive.c:197:4
  10750e:    f7 89             	goto -46 <lcd_drv_backlight_ctrl+0x18 : 1074e2 >			  ## lcd_drive.c:197:4


lcd_drv_power_ctrl:
  107510:    75 04             	[--sp] = {rets, r5, r4}			  ## lcd_drive.c:243:0
  107512:    c5 ff 04 c4 10 00 	r5 = 1098756 <lcd_drive : 10c404 >			  ## lcd_drive.c:244:65
  107518:    04 d6             	r4 = r0  #			  ## lcd_drive.c:244:65
  10751a:    52 6d             		 r2 = [r5+52] 			  ## lcd_drive.c:244:65
  10751c:    c0 ff f4 99 10 00 	r0 = 1087988 <realloc+0x3D2 : 1099f4 >			  ## lcd_drive.c:244:2
  107522:    51 16             	r1 = r5			  ## lcd_drive.c:244:2
  107524:    80 ff da 88 f1 ff 	call -948006 <printf : 1fe04 >			  ## lcd_drive.c:244:2
  10752a:    51 6d             	r1 = [r5+52] 			  ## lcd_drive.c:245:13
  10752c:    01 42             	if (r1 == 0) goto 4 <lcd_drv_power_ctrl+0x22 : 107532 >			  ## lcd_drive.c:245:13
  10752e:    40 16             	r0 = r4			  ## lcd_drive.c:246:3
  107530:    c1 00             	call r1			  ## lcd_drive.c:246:3
  107532:    40 20             	r0 = 0			  ## lcd_drive.c:248:2
  107534:    55 04             	{pc, r5, r4} = [sp++]			  ## lcd_drive.c:248:2


spi_dc_ctrl:
  107536:    75 04             	[--sp] = {rets, r5, r4}			  ## lcd_drive.c:92:0
  107538:    c5 ff 00 c8 10 00 	r5 = 1099776 <backlight_status : 10c800 >			  ## lcd_drive.c:92:0
  10753e:    04 d6             	r4 = r0  #			  ## lcd_drive.c:92:0
  107540:    51 61             		 r1 = [r5+4] 			  ## lcd_drive.c:93:6
  107542:    12 62             	r2 = [r1+8] 			  ## lcd_drive.c:93:15
  107544:    72 f8 09 fe       	if (r2 == -1) goto 18 <spi_dc_ctrl+0x24 : 10755a >
  107548:    41 21             	r1 = 1			  ## lcd_drive.c:96:2
  10754a:    20 16             	r0 = r2			  ## lcd_drive.c:96:2
  10754c:    bf ea 5f f6       	call -4930 <gpio_set_die : 10620e >			  ## lcd_drive.c:96:2
  107550:    41 d6             	r1 = r4  #			  ## lcd_drive.c:97:2
  107552:    50 61             		 r0 = [r5+4] 			  ## lcd_drive.c:97:24
  107554:    00 62             	r0 = [r0+8] 			  ## lcd_drive.c:97:33
  107556:    bf ea 25 f6       	call -5046 <gpio_direction_output : 1061a4 >			  ## lcd_drive.c:97:2
  10755a:    55 04             	{pc, r5, r4} = [sp++]			  ## lcd_drive.c:98:1


spi_cs_ctrl:
  10755c:    75 04             	[--sp] = {rets, r5, r4}			  ## lcd_drive.c:82:0
  10755e:    c5 ff 00 c8 10 00 	r5 = 1099776 <backlight_status : 10c800 >			  ## lcd_drive.c:82:0
  107564:    04 d6             	r4 = r0  #			  ## lcd_drive.c:82:0
  107566:    51 61             		 r1 = [r5+4] 			  ## lcd_drive.c:83:6
  107568:    12 61             	r2 = [r1+4] 			  ## lcd_drive.c:83:15
  10756a:    72 f8 09 fe       	if (r2 == -1) goto 18 <spi_cs_ctrl+0x24 : 107580 >
  10756e:    41 21             	r1 = 1			  ## lcd_drive.c:86:2
  107570:    20 16             	r0 = r2			  ## lcd_drive.c:86:2
  107572:    bf ea 4c f6       	call -4968 <gpio_set_die : 10620e >			  ## lcd_drive.c:86:2
  107576:    41 d6             	r1 = r4  #			  ## lcd_drive.c:87:2
  107578:    50 61             		 r0 = [r5+4] 			  ## lcd_drive.c:87:24
  10757a:    00 61             	r0 = [r0+4] 			  ## lcd_drive.c:87:33
  10757c:    bf ea 12 f6       	call -5084 <gpio_direction_output : 1061a4 >			  ## lcd_drive.c:87:2
  107580:    55 04             	{pc, r5, r4} = [sp++]			  ## lcd_drive.c:88:1


gpio_set_pull_up:
  107582:    10 04             	[--sp] = rets			  ## gpio.c:476:0
  107584:    12 16             	r2 = r1			  ## gpio.c:476:0
  107586:    03 16             	r3 = r0			  ## gpio.c:476:0
  107588:    83 f9 0f c2       	if (r3 < 97) goto 30 <gpio_set_pull_up+0x28 : 1075aa >			  ## gpio.c:480:6
  10758c:    83 f9 1b cc       	if (r3 < 102) goto 54 <gpio_set_pull_up+0x44 : 1075c6 >
  107590:    c0 ff 00 60 fd 00 	r0 = 16605184 <_HEAP_END+0xD5B000 : fd6000 >
  107596:    03 f8 17 ce       	if (r3 == 103) goto 46 <gpio_set_pull_up+0x46 : 1075c8 >			  ## gpio.c:482:4
  10759a:    33 e8 66 c0       	if (r3 == 102) {
  10759e:    01 60             		r1 = [r0+0] 			  ## gpio.c:482:4
  1075a0:    a1 e1 04 22       		r1 <= insert(r2, p:4, l:1)			  ## gpio.c:482:4
  1075a4:    81 60             		[r0+0] = r1			  ## gpio.c:482:4
  1075a6:    00 04             		pc = [sp++]
                               	}			  ## gpio.c:482:4
  1075a8:    00 04             	pc = [sp++]			  ## gpio.c:482:4
  1075aa:    bf ea ef f5       	call -5154 <gpio2reg : 10618c >			  ## gpio.c:489:6
  1075ae:    00 4b             	if (r0 == 0) goto 22 <gpio_set_pull_up+0x44 : 1075c6 >
  1075b0:    61 e1 0f 30       	r1 = r3 & 0xF			  ## gpio.c:494:9
  1075b4:    43 21             	r3 = 1			  ## gpio.c:494:9
  1075b6:    c8 e1 30 11       	r1 = r3 << r1			  ## gpio.c:494:9
  1075ba:    02 43             	if (r2 == 0) goto 6 <gpio_set_pull_up+0x40 : 1075c2 >
  1075bc:    64 e8 10 01       	[r0+16] |= r1			  ## gpio.c:497:9
  1075c0:    00 04             	pc = [sp++]			  ## gpio.c:497:9
  1075c2:    64 e8 13 01       	[r0+16] &= ~r1			  ## gpio.c:499:9
  1075c6:    00 04             	pc = [sp++]
  1075c8:    01 60             	r1 = [r0+0] 			  ## gpio.c:482:4
  1075ca:    a1 e1 84 22       	r1 <= insert(r2, p:5, l:1)			  ## gpio.c:482:4
  1075ce:    81 60             	[r0+0] = r1			  ## gpio.c:482:4
  1075d0:    00 04             	pc = [sp++]			  ## gpio.c:482:4


usb_set_pull_down:
  1075d2:    c0 21             	r0 += 1			  ## gpio.c:113:0
  1075d4:    c1 ff 00 60 fd 00 	r1 = 16605184 <_HEAP_END+0xD5B000 : fd6000 >			  ## gpio.c:118:19
  1075da:    66 e8 03 10       	[r1+0] &= ~(1 << r0)			  ## gpio.c:118:19
  1075de:    80 00             	rts			  ## gpio.c:118:19


gpio_set_pull_down:
  1075e0:    10 04             	[--sp] = rets			  ## gpio.c:562:0
  1075e2:    02 16             	r2 = r0			  ## gpio.c:562:0
  1075e4:    82 f9 06 c2       	if (r2 < 97) goto 12 <gpio_set_pull_down+0x14 : 1075f4 >			  ## gpio.c:566:6
  1075e8:    82 f9 0b cc       	if (r2 < 102) goto 22 <gpio_set_pull_down+0x22 : 107602 >
  1075ec:    30 e1 9f 2f       	r0 = r2 + -97			  ## gpio.c:568:27
  1075f0:    71 90             	call -32 <usb_set_pull_down : 1075d2 >			  ## gpio.c:568:4
  1075f2:    00 04             	pc = [sp++]			  ## gpio.c:568:4
  1075f4:    bf ea ca f5       	call -5228 <gpio2reg : 10618c >			  ## gpio.c:575:6
  1075f8:    00 44             	if (r0 == 0) goto 8 <gpio_set_pull_down+0x22 : 107602 >
  1075fa:    61 e1 0f 20       	r1 = r2 & 0xF			  ## gpio.c:580:9
  1075fe:    66 e8 17 01       	[r0+20] &= ~(1 << r1)			  ## gpio.c:585:9
  107602:    00 04             	pc = [sp++]


gpio_direction_input:
  107604:    10 04             	[--sp] = rets			  ## gpio.c:231:0
  107606:    02 16             	r2 = r0			  ## gpio.c:231:0
  107608:    82 f9 16 c2       	if (r2 < 97) goto 44 <gpio_direction_input+0x34 : 107638 >			  ## gpio.c:235:6
  10760c:    82 f9 1b cc       	if (r2 < 102) goto 54 <gpio_direction_input+0x42 : 107646 >
  107610:    c0 ff 00 18 fd 00 	r0 = 16586752 <_HEAP_END+0xD56800 : fd1800 >			  ## gpio.c:155:16
  107616:    40 ea 00 00       	[r0+0] = 0x0			  ## gpio.c:155:16
  10761a:    e0 e0 90 0c       	r0 = r0 + 0x4800			  ## gpio.c:155:16
  10761e:    00 ef a0 0c       	[r0+0] |= 0x5000			  ## gpio.c:155:16
  107622:    32 e8 67 40       	if (r2 == 103) {			  ## gpio.c:155:16
  107626:    00 ef 08 00       		[r0+0] |= 0x8			  ## gpio.c:238:4
  10762a:    00 04             		pc = [sp++]
                               	}			  ## gpio.c:238:4
  10762c:    32 e8 66 40       	if (r2 == 102) {			  ## gpio.c:238:4
  107630:    00 ef 04 00       		[r0+0] |= 0x4			  ## gpio.c:238:4
  107634:    00 04             		pc = [sp++]
                               	}			  ## gpio.c:238:4
  107636:    00 04             	pc = [sp++]			  ## gpio.c:238:4
  107638:    bf ea a8 f5       	call -5296 <gpio2reg : 10618c >			  ## gpio.c:245:6
  10763c:    00 44             	if (r0 == 0) goto 8 <gpio_direction_input+0x42 : 107646 >
  10763e:    61 e1 0f 20       	r1 = r2 & 0xF			  ## gpio.c:250:9
  107642:    66 e8 08 01       	[r0+8] |= 1 << r1			  ## gpio.c:253:9
  107646:    00 04             	pc = [sp++]


usb_read:
  107648:    c1 ff 00 18 fd 00 	r1 = 16586752 <_HEAP_END+0xD56800 : fd1800 >			  ## gpio.c:146:0
  10764e:    a2 f0 16 00       	r2 = 0x16 - r0  #			  ## gpio.c:148:26
  107652:    11 60             		 r1 = [r1+0] 			  ## gpio.c:148:18
  107654:    40 21             	r0 = 1			  ## gpio.c:148:18
  107656:    c8 e1 00 22       	r2 = r0 << r2			  ## gpio.c:148:26
  10765a:    11 ea 00 02       	if ((r1 & r2) == 0) {			  ## gpio.c:148:26
  10765e:    40 20             		r0 = 0
                               	}			  ## gpio.c:148:26
  107660:    80 00             	rts			  ## gpio.c:149:2


gpio_read:
  107662:    10 04             	[--sp] = rets			  ## gpio.c:420:0
  107664:    02 16             	r2 = r0			  ## gpio.c:420:0
  107666:    82 f9 07 c2       	if (r2 < 97) goto 14 <gpio_read+0x16 : 107678 >			  ## gpio.c:424:6
  10766a:    10 2a             	r0 = -22
  10766c:    82 f9 10 cc       	if (r2 < 102) goto 32 <gpio_read+0x2E : 107690 >
  107670:    30 e1 9f 2f       	r0 = r2 + -97			  ## gpio.c:426:25
  107674:    71 89             	call -46 <usb_read : 107648 >			  ## gpio.c:426:11
  107676:    00 04             	pc = [sp++]			  ## gpio.c:443:1
  107678:    bf ea 88 f5       	call -5360 <gpio2reg : 10618c >			  ## gpio.c:431:6
  10767c:    00 4a             	if (r0 == 0) goto 20 <gpio_read+0x30 : 107692 >
  10767e:    62 f1 0f 20       	r2 = r2 & 0xF  #			  ## gpio.c:436:9
  107682:    01 61             		 r1 = [r0+4] 			  ## gpio.c:439:16
  107684:    40 21             	r0 = 1
  107686:    c8 e1 00 22       	r2 = r0 << r2			  ## gpio.c:436:9
  10768a:    11 ea 00 02       	if ((r1 & r2) == 0) {
  10768e:    40 20             		r0 = 0
                               	}
  107690:    00 04             	pc = [sp++]			  ## gpio.c:443:1
  107692:    10 2a             	r0 = -22
  107694:    00 04             	pc = [sp++]			  ## gpio.c:443:1


spi_te_stat:
  107696:    74 04             	[--sp] = {rets, r4}			  ## lcd_drive.c:102:0
  107698:    c4 ff 00 c8 10 00 	r4 = 1099776 <backlight_status : 10c800 >			  ## lcd_drive.c:102:0
  10769e:    40 61             	r0 = [r4+4] 			  ## lcd_drive.c:103:6
  1076a0:    00 65             	r0 = [r0+20] 			  ## lcd_drive.c:103:15
  1076a2:    30 e8 ff 4f       	if (r0 == -1) {			  ## lcd_drive.c:103:15
  1076a6:    10 3f             		r0 = -1			  ## lcd_drive.c:103:15
  1076a8:    54 04             		{pc, r4} = [sp++]
                               	}			  ## lcd_drive.c:112:1
  1076aa:    41 21             	r1 = 1			  ## lcd_drive.c:106:2
  1076ac:    bf ea 69 ff       	call -302 <gpio_set_pull_up : 107582 >			  ## lcd_drive.c:106:2
  1076b0:    43 61             	r3 = [r4+4] 			  ## lcd_drive.c:107:21
  1076b2:    30 65             	r0 = [r3+20] 			  ## lcd_drive.c:107:30
  1076b4:    41 95             	call -214 <gpio_set_pull_down : 1075e0 >			  ## lcd_drive.c:107:2
  1076b6:    30 65             	r0 = [r3+20] 			  ## lcd_drive.c:108:24
  1076b8:    41 21             	r1 = 1			  ## lcd_drive.c:108:2
  1076ba:    bf ea a8 f5       	call -5296 <gpio_set_die : 10620e >			  ## lcd_drive.c:108:2
  1076be:    43 61             	r3 = [r4+4] 			  ## lcd_drive.c:109:23
  1076c0:    30 65             	r0 = [r3+20] 			  ## lcd_drive.c:109:32
  1076c2:    51 80             	call -192 <gpio_direction_input : 107604 >			  ## lcd_drive.c:109:2
  1076c4:    30 65             	r0 = [r3+20] 			  ## lcd_drive.c:111:28
  1076c6:    61 8d             	call -102 <gpio_read : 107662 >			  ## lcd_drive.c:111:9
  1076c8:    54 04             	{pc, r4} = [sp++]			  ## lcd_drive.c:112:1


lcd_adjust_display_brightness:
  1076ca:    10 04             	[--sp] = rets			  ## lcd_spi_sh8601a_454x454.c:133:0
  1076cc:    e2 9f             	sp += -4			  ## lcd_spi_sh8601a_454x454.c:133:0
  1076ce:    41 e0 ff 03       	r1 = 1023 <_MASK_MEM_SIZE+0x25B : 3ff >			  ## lcd_spi_sh8601a_454x454.c:137:23
  1076d2:    10 1b             	r0 *= r1			  ## lcd_spi_sh8601a_454x454.c:137:23
  1076d4:    59 24             	r1 = 100			  ## lcd_spi_sh8601a_454x454.c:137:31
  1076d6:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## lcd_spi_sh8601a_454x454.c:137:31
  1076da:    de e9 02 00       	b[sp+2] = r0			  ## lcd_spi_sh8601a_454x454.c:139:10
  1076de:    b0 e1 08 04       	r0 = uextra(r0, p:8, l:2)			  ## lcd_spi_sh8601a_454x454.c:140:12
  1076e2:    de e9 03 00       	b[sp+3] = r0			  ## lcd_spi_sh8601a_454x454.c:140:10
  1076e6:    89 82             	r1 = sp + 2			  ## lcd_spi_sh8601a_454x454.c:140:10
  1076e8:    50 31             	r0 = 81			  ## lcd_spi_sh8601a_454x454.c:142:2
  1076ea:    42 22             	r2 = 2			  ## lcd_spi_sh8601a_454x454.c:142:2
  1076ec:    bf ea 9a f9       	call -3276 <lcd_write_cmd : 106a24 >			  ## lcd_spi_sh8601a_454x454.c:142:2
  1076f0:    02 81             	sp += 4
  1076f2:    00 04             	pc = [sp++]			  ## lcd_spi_sh8601a_454x454.c:145:1


lcd_spi_sh8601a_backlight_ctrl:
  1076f4:    74 04             	[--sp] = {rets, r4}			  ## lcd_spi_sh8601a_454x454.c:153:0
  1076f6:    04 16             	r4 = r0			  ## lcd_spi_sh8601a_454x454.c:153:0
  1076f8:    04 49             	if (r4 == 0) goto 18 <lcd_spi_sh8601a_backlight_ctrl+0x18 : 10770c >			  ## lcd_spi_sh8601a_454x454.c:154:6
  1076fa:    48 29             	r0 = 41			  ## lcd_spi_sh8601a_454x454.c:155:3
  1076fc:    41 20             	r1 = 0			  ## lcd_spi_sh8601a_454x454.c:155:3
  1076fe:    42 20             	r2 = 0			  ## lcd_spi_sh8601a_454x454.c:155:3
  107700:    bf ea 90 f9       	call -3296 <lcd_write_cmd : 106a24 >			  ## lcd_spi_sh8601a_454x454.c:155:3
  107704:    04 fc 08 28       	if (r4 > 20) goto 16 <lcd_spi_sh8601a_backlight_ctrl+0x24 : 107718 >			  ## lcd_spi_sh8601a_454x454.c:156:7
  107708:    40 21             	r0 = 1			  ## lcd_spi_sh8601a_454x454.c:157:4
  10770a:    04 95             	goto 42 <lcd_spi_sh8601a_backlight_ctrl+0x42 : 107736 >			  ## lcd_spi_sh8601a_454x454.c:157:4
  10770c:    48 28             	r0 = 40			  ## lcd_spi_sh8601a_454x454.c:169:3
  10770e:    41 20             	r1 = 0			  ## lcd_spi_sh8601a_454x454.c:169:3
  107710:    42 20             	r2 = 0			  ## lcd_spi_sh8601a_454x454.c:169:3
  107712:    bf ea 87 f9       	call -3314 <lcd_write_cmd : 106a24 >			  ## lcd_spi_sh8601a_454x454.c:169:3
  107716:    04 90             	goto 32 <lcd_spi_sh8601a_backlight_ctrl+0x44 : 107738 >			  ## lcd_spi_sh8601a_454x454.c:169:3
  107718:    04 fc 02 50       	if (r4 > 40) goto 4 <lcd_spi_sh8601a_backlight_ctrl+0x2C : 107720 >			  ## lcd_spi_sh8601a_454x454.c:158:14
  10771c:    40 23             	r0 = 3			  ## lcd_spi_sh8601a_454x454.c:159:4
  10771e:    04 8b             	goto 22 <lcd_spi_sh8601a_backlight_ctrl+0x42 : 107736 >			  ## lcd_spi_sh8601a_454x454.c:159:4
  107720:    04 fc 02 78       	if (r4 > 60) goto 4 <lcd_spi_sh8601a_backlight_ctrl+0x34 : 107728 >			  ## lcd_spi_sh8601a_454x454.c:160:14
  107724:    40 26             	r0 = 6			  ## lcd_spi_sh8601a_454x454.c:161:4
  107726:    04 87             	goto 14 <lcd_spi_sh8601a_backlight_ctrl+0x42 : 107736 >			  ## lcd_spi_sh8601a_454x454.c:161:4
  107728:    04 fc 02 a0       	if (r4 > 80) goto 4 <lcd_spi_sh8601a_backlight_ctrl+0x3C : 107730 >			  ## lcd_spi_sh8601a_454x454.c:162:14
  10772c:    40 2a             	r0 = 10			  ## lcd_spi_sh8601a_454x454.c:163:4
  10772e:    04 83             	goto 6 <lcd_spi_sh8601a_backlight_ctrl+0x42 : 107736 >			  ## lcd_spi_sh8601a_454x454.c:163:4
  107730:    04 fc 02 c8       	if (r4 > 100) goto 4 <lcd_spi_sh8601a_backlight_ctrl+0x44 : 107738 >
  107734:    58 24             	r0 = 100			  ## lcd_spi_sh8601a_454x454.c:165:4
  107736:    61 89             	call -110 <lcd_adjust_display_brightness : 1076ca >
  107738:    40 20             	r0 = 0			  ## lcd_spi_sh8601a_454x454.c:172:2
  10773a:    54 04             	{pc, r4} = [sp++]			  ## lcd_spi_sh8601a_454x454.c:172:2


lcd_spi_sh8601a_power_ctrl:
  10773c:    75 04             	[--sp] = {rets, r5, r4}			  ## lcd_spi_sh8601a_454x454.c:180:0
  10773e:    c5 ff 00 c8 10 00 	r5 = 1099776 <backlight_status : 10c800 >			  ## lcd_spi_sh8601a_454x454.c:180:0
  107744:    04 d6             	r4 = r0  #			  ## lcd_spi_sh8601a_454x454.c:180:0
  107746:    51 61             		 r1 = [r5+4] 			  ## lcd_drive.c:61:6
  107748:    12 63             	r2 = [r1+12] 			  ## lcd_drive.c:61:15
  10774a:    72 f8 09 fe       	if (r2 == -1) goto 18 <lcd_spi_sh8601a_power_ctrl+0x24 : 107760 >
  10774e:    41 21             	r1 = 1			  ## lcd_drive.c:64:2
  107750:    20 16             	r0 = r2			  ## lcd_drive.c:64:2
  107752:    bf ea 5c f5       	call -5448 <gpio_set_die : 10620e >			  ## lcd_drive.c:64:2
  107756:    41 d6             	r1 = r4  #			  ## lcd_drive.c:65:2
  107758:    50 61             		 r0 = [r5+4] 			  ## lcd_drive.c:65:24
  10775a:    00 63             	r0 = [r0+12] 			  ## lcd_drive.c:65:33
  10775c:    bf ea 22 f5       	call -5564 <gpio_direction_output : 1061a4 >			  ## lcd_drive.c:65:2
  107760:    40 20             	r0 = 0			  ## lcd_spi_sh8601a_454x454.c:184:2
  107762:    55 04             	{pc, r5, r4} = [sp++]			  ## lcd_spi_sh8601a_454x454.c:184:2


lcd_spi_sh8601a_entersleep:
  107764:    74 04             	[--sp] = {rets, r4}			  ## lcd_spi_sh8601a_454x454.c:194:0
  107766:    e2 9f             	sp += -4			  ## lcd_spi_sh8601a_454x454.c:194:0
  107768:    40 21             	r0 = 1			  ## lcd_spi_sh8601a_454x454.c:194:0
  10776a:    de e9 03 00       	b[sp+3] = r0			  ## lcd_spi_sh8601a_454x454.c:195:5
  10776e:    48 28             	r0 = 40			  ## lcd_spi_sh8601a_454x454.c:197:2
  107770:    41 20             	r1 = 0			  ## lcd_spi_sh8601a_454x454.c:197:2
  107772:    42 20             	r2 = 0			  ## lcd_spi_sh8601a_454x454.c:197:2
  107774:    bf ea 56 f9       	call -3412 <lcd_write_cmd : 106a24 >			  ## lcd_spi_sh8601a_454x454.c:197:2
  107778:    40 30             	r0 = 16			  ## lcd_spi_sh8601a_454x454.c:198:2
  10777a:    41 20             	r1 = 0			  ## lcd_spi_sh8601a_454x454.c:198:2
  10777c:    42 20             	r2 = 0			  ## lcd_spi_sh8601a_454x454.c:198:2
  10777e:    bf ea 51 f9       	call -3422 <lcd_write_cmd : 106a24 >			  ## lcd_spi_sh8601a_454x454.c:198:2
  107782:    48 3c             	r0 = 60			  ## lcd_spi_sh8601a_454x454.c:199:2
  107784:    bf ea d3 f8       	call -3674 <delay_2ms : 10692e >			  ## lcd_spi_sh8601a_454x454.c:199:2
  107788:    89 83             	r1 = sp + 3			  ## lcd_spi_sh8601a_454x454.c:199:2
  10778a:    50 2f             	r0 = 79			  ## lcd_spi_sh8601a_454x454.c:201:2
  10778c:    42 21             	r2 = 1			  ## lcd_spi_sh8601a_454x454.c:201:2
  10778e:    bf ea 49 f9       	call -3438 <lcd_write_cmd : 106a24 >			  ## lcd_spi_sh8601a_454x454.c:201:2
  107792:    48 33             	r0 = 51			  ## lcd_spi_sh8601a_454x454.c:202:2
  107794:    bf ea cb f8       	call -3690 <delay_2ms : 10692e >			  ## lcd_spi_sh8601a_454x454.c:202:2
  107798:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## lcd_drive.c:254:9
  10779e:    04 61             	r4 = [r0+4] 			  ## lcd_drive.c:254:9
  1077a0:    40 65             	r0 = [r4+20] 			  ## lcd_spi_sh8601a_454x454.c:204:15
  1077a2:    70 f8 0d fe       	if (r0 == -1) goto 26 <lcd_spi_sh8601a_entersleep+0x5C : 1077c0 >			  ## lcd_spi_sh8601a_454x454.c:204:15
  1077a6:    41 20             	r1 = 0			  ## lcd_spi_sh8601a_454x454.c:205:3
  1077a8:    bf ea eb fe       	call -554 <gpio_set_pull_up : 107582 >			  ## lcd_spi_sh8601a_454x454.c:205:3
  1077ac:    40 65             	r0 = [r4+20] 			  ## lcd_spi_sh8601a_454x454.c:206:31
  1077ae:    bf ea 17 ff       	call -466 <gpio_set_pull_down : 1075e0 >			  ## lcd_spi_sh8601a_454x454.c:206:3
  1077b2:    40 65             	r0 = [r4+20] 			  ## lcd_spi_sh8601a_454x454.c:207:33
  1077b4:    bf ea 26 ff       	call -436 <gpio_direction_input : 107604 >			  ## lcd_spi_sh8601a_454x454.c:207:3
  1077b8:    40 65             	r0 = [r4+20] 			  ## lcd_spi_sh8601a_454x454.c:208:25
  1077ba:    41 20             	r1 = 0			  ## lcd_spi_sh8601a_454x454.c:208:3
  1077bc:    bf ea 27 f5       	call -5554 <gpio_set_die : 10620e >			  ## lcd_spi_sh8601a_454x454.c:208:3
  1077c0:    02 81             	sp += 4
  1077c2:    54 04             	{pc, r4} = [sp++]			  ## lcd_spi_sh8601a_454x454.c:212:1


lcd_spi_sh8601a_exitsleep:
  1077c4:    74 04             	[--sp] = {rets, r4}			  ## lcd_spi_sh8601a_454x454.c:220:0
  1077c6:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## lcd_drive.c:254:9
  1077cc:    04 61             	r4 = [r0+4] 			  ## lcd_drive.c:254:9
  1077ce:    04 4f             	if (r4 == 0) goto 30 <lcd_spi_sh8601a_exitsleep+0x2A : 1077ee >			  ## lcd_drive.c:254:9
  1077d0:    40 60             	r0 = [r4+0] 			  ## lcd_spi_sh8601a_454x454.c:223:26
  1077d2:    00 4d             	if (r0 == 0) goto 26 <lcd_spi_sh8601a_exitsleep+0x2A : 1077ee >			  ## lcd_spi_sh8601a_454x454.c:223:26
  1077d4:    41 20             	r1 = 0			  ## lcd_spi_sh8601a_454x454.c:224:3
  1077d6:    bf ea e5 f4       	call -5686 <gpio_direction_output : 1061a4 >			  ## lcd_spi_sh8601a_454x454.c:224:3
  1077da:    40 24             	r0 = 4			  ## lcd_spi_sh8601a_454x454.c:225:3
  1077dc:    bf ea a7 f8       	call -3762 <delay_2ms : 10692e >			  ## lcd_spi_sh8601a_454x454.c:225:3
  1077e0:    40 60             	r0 = [r4+0] 			  ## lcd_spi_sh8601a_454x454.c:226:34
  1077e2:    41 21             	r1 = 1			  ## lcd_spi_sh8601a_454x454.c:226:3
  1077e4:    bf ea de f4       	call -5700 <gpio_direction_output : 1061a4 >			  ## lcd_spi_sh8601a_454x454.c:226:3
  1077e8:    40 24             	r0 = 4			  ## lcd_spi_sh8601a_454x454.c:227:3
  1077ea:    bf ea a0 f8       	call -3776 <delay_2ms : 10692e >			  ## lcd_spi_sh8601a_454x454.c:227:3
  1077ee:    40 31             	r0 = 17			  ## lcd_spi_sh8601a_454x454.c:230:2
  1077f0:    41 20             	r1 = 0			  ## lcd_spi_sh8601a_454x454.c:230:2
  1077f2:    42 20             	r2 = 0			  ## lcd_spi_sh8601a_454x454.c:230:2
  1077f4:    bf ea 16 f9       	call -3540 <lcd_write_cmd : 106a24 >			  ## lcd_spi_sh8601a_454x454.c:230:2
  1077f8:    40 25             	r0 = 5			  ## lcd_spi_sh8601a_454x454.c:231:2
  1077fa:    bf ea 98 f8       	call -3792 <delay_2ms : 10692e >			  ## lcd_spi_sh8601a_454x454.c:231:2
  1077fe:    48 29             	r0 = 41			  ## lcd_spi_sh8601a_454x454.c:232:2
  107800:    41 20             	r1 = 0			  ## lcd_spi_sh8601a_454x454.c:232:2
  107802:    42 20             	r2 = 0			  ## lcd_spi_sh8601a_454x454.c:232:2
  107804:    bf ea 0e f9       	call -3556 <lcd_write_cmd : 106a24 >			  ## lcd_spi_sh8601a_454x454.c:232:2
  107808:    40 25             	r0 = 5			  ## lcd_spi_sh8601a_454x454.c:233:2
  10780a:    bf ea 90 f8       	call -3808 <delay_2ms : 10692e >			  ## lcd_spi_sh8601a_454x454.c:233:2
  10780e:    c0 ff 50 c3 10 00 	r0 = 1098576 <lcd_spi_sh8601a_param : 10c350 >			  ## lcd_spi_sh8601a_454x454.c:236:2
  107814:    bf ea 80 f6       	call -4864 <lcd_init : 106518 >			  ## lcd_spi_sh8601a_454x454.c:236:2
  107818:    c0 ff 40 9d 10 00 	r0 = 1088832 <lcd_cmd_list_sleepout : 109d40 >			  ## lcd_spi_sh8601a_454x454.c:237:2
  10781e:    61 25             	r1 = 133			  ## lcd_spi_sh8601a_454x454.c:237:2
  107820:    bf ea 82 f9       	call -3324 <lcd_drv_cmd_list : 106b28 >			  ## lcd_spi_sh8601a_454x454.c:237:2
  107824:    54 04             	{pc, r4} = [sp++]			  ## lcd_spi_sh8601a_454x454.c:243:1


lcd_get_hdl:
  107826:    74 04             	[--sp] = {rets, r4}			  ## lcd_drive.c:1167:0
  107828:    c0 ff 84 61 10 00 	r0 = 1073540 <lcd_interface_end : 106184 >			  ## lcd_drive.c:1170:2
  10782e:    c1 ff 5c 61 10 00 	r1 = 1073500 <lcd_interface_begin : 10615c >			  ## lcd_drive.c:1170:2
  107834:    91 e8 00 00       	if (r1 != r0) {			  ## lcd_drive.c:1170:2
  107838:    54 04             		{pc, r4} = [sp++]
                               	}			  ## lcd_drive.c:1170:2
  10783a:    c4 ff 5e ba 10 00 	r4 = 1096286 <imd_clock_init.div+0x9E : 10ba5e >			  ## lcd_drive.c:1170:2
  107840:    02 e1 4c 47       	r2 = r4 + 1868			  ## lcd_drive.c:1170:2
  107844:    41 20             	r1 = 0			  ## lcd_drive.c:1170:2
  107846:    43 e0 92 04       	r3 = 1170 <WOLASynthesisFilter_Float_M64_m4_r1+0x8E : 492 >			  ## lcd_drive.c:1170:2
  10784a:    40 16             	r0 = r4			  ## lcd_drive.c:1170:2
  10784c:    80 ff b2 85 f1 ff 	call -948814 <printf : 1fe04 >			  ## lcd_drive.c:1170:2
  107852:    00 e1 23 45       	r0 = r4 + 1315			  ## lcd_drive.c:1170:2
  107856:    80 ff a8 85 f1 ff 	call -948824 <printf : 1fe04 >			  ## lcd_drive.c:1170:2
  10785c:    f7 9f             	goto -2 <lcd_get_hdl+0x36 : 10785c >			  ## lcd_drive.c:1170:2


ex_api_register:
  10785e:    7a 04             	[--sp] = {rets, r10-r4}			  ## ui_entry.c:234:0
  107860:    e2 94             	sp += -48			  ## ui_entry.c:234:0
  107862:    05 16             	r5 = r0			  ## ui_entry.c:234:0
  107864:    c9 ff 4c b8 10 00 	r9 = 1095756 <ui_cfg_data : 10b84c >			  ## ui_entry.c:234:0
  10786a:    00 e1 d4 92       	r0 = r9 + 724			  ## ui_entry.c:237:2
  10786e:    c6 ff b8 c4 10 00 	r6 = 1098936 <bss_begin : 10c4b8 >			  ## ui_entry.c:237:2
  107874:    c7 ff d4 08 00 00 	r7 = 2260 <bss_size : 8d4 >			  ## ui_entry.c:237:2
  10787a:    61 16             	r1 = r6			  ## ui_entry.c:237:2
  10787c:    72 16             	r2 = r7			  ## ui_entry.c:237:2
  10787e:    80 ff 80 85 f1 ff 	call -948864 <printf : 1fe04 >			  ## ui_entry.c:237:2
  107884:    41 20             	r1 = 0			  ## ui_entry.c:238:2
  107886:    60 16             	r0 = r6			  ## ui_entry.c:238:2
  107888:    72 16             	r2 = r7			  ## ui_entry.c:238:2
  10788a:    80 ff f0 84 f1 ff 	call -949008 <memset : 1fd80 >			  ## ui_entry.c:238:2
  107890:    c0 ff 00 c0 f2 00 	r0 = 15908864 <_HEAP_END+0xCB1000 : f2c000 >			  ## ui_entry.c:240:17
  107896:    40 ea 57 00       	[r0+0] = 0x57			  ## ui_entry.c:240:17
  10789a:    50 ec 50 20       	r3_r2 = d[r5+0]			  ## ui_entry.c:241:104
  10789e:    d0 ec 58 80       	r8 = [r5+8]			  ## ui_entry.c:241:118
  1078a2:    d0 ec 5c a0       	r10 = [r5+12]			  ## ui_entry.c:241:138
  1078a6:    51 64             	r1 = [r5+16] 			  ## ui_entry.c:241:160
  1078a8:    57 65             	r7 = [r5+20] 			  ## ui_entry.c:241:180
  1078aa:    54 66             	r4 = [r5+24] 			  ## ui_entry.c:241:198
  1078ac:    56 67             	r6 = [r5+28] 			  ## ui_entry.c:241:215
  1078ae:    50 68             	r0 = [r5+32] 			  ## ui_entry.c:241:228
  1078b0:    00 f1 73 95       	r0 = r9 + 1395  #			  ## ui_entry.c:241:2
  1078b4:    80 26             		 [sp+24] = r0			  ## ui_entry.c:241:2
  1078b6:    86 25             	[sp+20] = r6			  ## ui_entry.c:241:2
  1078b8:    84 24             	[sp+16] = r4			  ## ui_entry.c:241:2
  1078ba:    87 23             	[sp+12] = r7			  ## ui_entry.c:241:2
  1078bc:    01 f1 53 91       	r1 = r9 + 339  #			  ## ui_entry.c:241:2
  1078c0:    81 22             		 [sp+8] = r1			  ## ui_entry.c:241:2
  1078c2:    d4 e9 05 a0       	[sp+4] = r10			  ## ui_entry.c:241:2
  1078c6:    d4 e9 01 80       	[sp] = r8			  ## ui_entry.c:241:2
  1078ca:    80 ff 34 85 f1 ff 	call -948940 <printf : 1fe04 >			  ## ui_entry.c:241:2
  1078d0:    50 65             	r0 = [r5+20] 			  ## ui_entry.c:242:11
  1078d2:    c6 ff 00 c8 10 00 	r6 = 1099776 <backlight_status : 10c800 >			  ## ui_entry.c:242:11
  1078d8:    00 41             	if (r0 == 0) goto 2 <ex_api_register+0x7E : 1078dc >			  ## ui_entry.c:242:11
  1078da:    e0 62             	[r6+8] = r0			  ## ui_entry.c:243:24
  1078dc:    50 66             	r0 = [r5+24] 			  ## ui_entry.c:246:11
  1078de:    00 41             	if (r0 == 0) goto 2 <ex_api_register+0x84 : 1078e2 >			  ## ui_entry.c:246:11
  1078e0:    e0 63             	[r6+12] = r0			  ## ui_entry.c:247:23
  1078e2:    50 67             	r0 = [r5+28] 			  ## ui_entry.c:250:11
  1078e4:    00 41             	if (r0 == 0) goto 2 <ex_api_register+0x8A : 1078e8 >			  ## ui_entry.c:250:11
  1078e6:    e0 64             	[r6+16] = r0			  ## ui_entry.c:251:19
  1078e8:    50 68             	r0 = [r5+32] 			  ## ui_entry.c:254:10
  1078ea:    00 41             	if (r0 == 0) goto 2 <ex_api_register+0x90 : 1078ee >			  ## ui_entry.c:254:10
  1078ec:    e0 65             	[r6+20] = r0			  ## ui_entry.c:255:16
  1078ee:    40 20             	r0 = 0			  ## ui_entry.c:143:18
  1078f0:    41 20             	r1 = 0			  ## ui_entry.c:143:18
  1078f2:    d0 e9 25 00       	d[sp+36] = r1_r0			  ## ui_entry.c:143:18
  1078f6:    c8 ff 84 61 10 00 	r8 = 1073540 <lcd_interface_end : 106184 >			  ## ui_entry.c:143:18
  1078fc:    c7 ff 5c 61 10 00 	r7 = 1073500 <lcd_interface_begin : 10615c >			  ## ui_entry.c:143:18
  107902:    75 d6             	r5 = r7  #			  ## ui_entry.c:144:14
  107904:    80 2b             		 [sp+44] = r0			  ## ui_entry.c:143:18
  107906:    17 e9 00 08       	if (r7 >= r8) {			  ## ui_entry.c:143:18
  10790a:    45 20             		r5 = 0
                               	}			  ## ui_entry.c:144:14
  10790c:    41 8c             	call -232 <lcd_get_hdl : 107826 >			  ## ui_entry.c:144:16
  10790e:    e5 66             	[r6+24] = r5			  ## ui_entry.c:144:14
  107910:    15 5c             	if (r5 == 0) goto 120 <ex_api_register+0x12C : 10798a >			  ## ui_entry.c:144:14
  107912:    70 16             	r0 = r7			  ## ui_entry.c:147:19
  107914:    17 e9 00 08       	if (r7 >= r8) {			  ## ui_entry.c:147:19
  107918:    40 20             		r0 = 0
                               	}			  ## ui_entry.c:147:19
  10791a:    01 68             	r1 = [r0+32] 			  ## ui_entry.c:147:19
  10791c:    01 43             	if (r1 == 0) goto 6 <ex_api_register+0xC6 : 107924 >			  ## ui_entry.c:147:19
  10791e:    40 21             	r0 = 1			  ## ui_entry.c:149:3
  107920:    c1 00             	call r1			  ## ui_entry.c:149:3
  107922:    60 66             	r0 = [r6+24] 			  ## ui_entry.c:149:3
  107924:    01 60             	r1 = [r0+0] 			  ## ui_entry.c:151:19
  107926:    01 43             	if (r1 == 0) goto 6 <ex_api_register+0xD0 : 10792e >			  ## ui_entry.c:151:19
  107928:    90 16             	r0 = r9			  ## ui_entry.c:152:3
  10792a:    c1 00             	call r1			  ## ui_entry.c:152:3
  10792c:    60 66             	r0 = [r6+24] 			  ## ui_entry.c:152:3
  10792e:    01 66             	r1 = [r0+24] 			  ## ui_entry.c:156:19
  107930:    01 43             	if (r1 == 0) goto 6 <ex_api_register+0xDA : 107938 >			  ## ui_entry.c:156:19
  107932:    40 20             	r0 = 0			  ## ui_entry.c:157:3
  107934:    c1 00             	call r1			  ## ui_entry.c:157:3
  107936:    60 66             	r0 = [r6+24] 			  ## ui_entry.c:157:3
  107938:    01 67             	r1 = [r0+28] 			  ## ui_entry.c:160:19
  10793a:    01 43             	if (r1 == 0) goto 6 <ex_api_register+0xE4 : 107942 >			  ## ui_entry.c:160:19
  10793c:    58 24             	r0 = 100			  ## ui_entry.c:161:3
  10793e:    c1 00             	call r1			  ## ui_entry.c:161:3
  107940:    60 66             	r0 = [r6+24] 			  ## ui_entry.c:161:3
  107942:    01 61             	r1 = [r0+4] 			  ## ui_entry.c:164:19
  107944:    01 43             	if (r1 == 0) goto 6 <ex_api_register+0xEE : 10794c >			  ## ui_entry.c:164:19
  107946:    a8 84             	r0 = sp + 36
  107948:    c1 00             	call r1			  ## ui_entry.c:165:3
  10794a:    60 66             	r0 = [r6+24] 
  10794c:    02 62             	r2 = [r0+8] 			  ## ui_entry.c:168:19
  10794e:    02 5b             	if (r2 == 0) goto 54 <ex_api_register+0x128 : 107986 >			  ## ui_entry.c:168:19
  107950:    40 20             	r0 = 0
  107952:    80 28             	[sp+32] = r0			  ## ui_entry.c:169:7
  107954:    a8 80             	r0 = sp + 32			  ## ui_entry.c:169:7
  107956:    89 9c             	r1 = sp + 28
  107958:    c2 00             	call r2			  ## ui_entry.c:171:3
  10795a:    17 e9 00 08       	if (r7 >= r8) {
  10795e:    47 20             		r7 = 0
                               	}			  ## ui_draw_arc.c:73:14
  107960:    d0 e9 1c 40       	r5_r4 = d[sp+28]			  ## ui_entry.c:176:23
  107964:    bf ea 5f ff       	call -322 <lcd_get_hdl : 107826 >			  ## ui_draw_arc.c:73:16
  107968:    d0 ec 63 7b       	[++r6=176] = r7			  ## ui_draw_arc.c:73:14
  10796c:    e5 65             	[r6+20] = r5			  ## ui_draw_arc.c:75:14
  10796e:    e4 66             	[r6+24] = r4			  ## ui_draw_arc.c:76:14
  107970:    e5 61             	[r6+4] = r5			  ## ui_draw_arc.c:77:22
  107972:    c0 a2             	r0 = r4 >> 2			  ## ui_draw_arc.c:78:62
  107974:    e8 68             	h[r6+16] = r0			  ## ui_draw_arc.c:78:20
  107976:    c0 a1             	r0 = r4 >> 1			  ## ui_draw_arc.c:78:62
  107978:    c1 ff fe ff 01 00 	r1 = 131070 <silk_ana_filt_bank_1+0x2 : 1fffe >			  ## ui_draw_arc.c:80:27
  10797e:    90 d9             	r0 &= r1  #			  ## ui_draw_arc.c:80:27
  107980:    e5 62             		 [r6+8] = r5			  ## ui_draw_arc.c:79:24
  107982:    50 18             	r0 += r5			  ## ui_draw_arc.c:80:27
  107984:    e0 63             	[r6+12] = r0			  ## ui_draw_arc.c:80:24
  107986:    02 8c             	sp += 48
  107988:    5a 04             	{pc, r10-r4} = [sp++]			  ## ui_entry.c:261:1
  10798a:    00 e1 12 92       	r0 = r9 + 530			  ## ui_entry.c:145:2
  10798e:    02 e1 36 98       	r2 = r9 + 2102			  ## ui_entry.c:145:2
  107992:    41 20             	r1 = 0			  ## ui_entry.c:145:2
  107994:    63 31             	r3 = 145			  ## ui_entry.c:145:2
  107996:    80 ff 68 84 f1 ff 	call -949144 <printf : 1fe04 >			  ## ui_entry.c:145:2
  10799c:    00 e1 44 92       	r0 = r9 + 580			  ## ui_entry.c:145:2
  1079a0:    80 ff 5e 84 f1 ff 	call -949154 <printf : 1fe04 >			  ## ui_entry.c:145:2
  1079a6:    f7 9f             	goto -2 <ex_api_register+0x148 : 1079a6 >			  ## ui_entry.c:145:2


_memcpy_small:
  1079a8:    04 83             	goto 6 <_memcpy_small+0x8 : 1079b0 >			  ## ui_mask.h:113:0
  1079aa:    13 07             	r3 = b[r1++=1] (u)			  ## ui_mask.h:118:9
  1079ac:    83 07             	b[r0++=1] = r3			  ## ui_mask.h:118:7
  1079ae:    fa 3f             	r2 += -1			  ## ui_mask.h:121:6
  1079b0:    f2 5c             	if (r2 != 0) goto -8 <_memcpy_small+0x2 : 1079aa >
  1079b2:    80 00             	rts


area_copy:
  1079b4:    10 04             	[--sp] = rets			  ## ui_mask.h:128:0
  1079b6:    42 30             	r2 = 16			  ## ui_mask.h:129:2
  1079b8:    71 97             	call -18 <_memcpy_small : 1079a8 >			  ## ui_mask.h:129:2
  1079ba:    00 04             	pc = [sp++]			  ## ui_mask.h:130:1


area_get_width.55:
  1079bc:    c1 21             	r1 += 1			  ## ui_mask.h:133:0
  1079be:    10 1e             	r0 = r1 - r0			  ## ui_mask.h:134:39
  1079c0:    80 00             	rts			  ## ui_mask.h:134:2


area_get_height.56:
  1079c2:    c1 21             	r1 += 1			  ## ui_mask.h:138:0
  1079c4:    10 1e             	r0 = r1 - r0			  ## ui_mask.h:139:39
  1079c6:    80 00             	rts			  ## ui_mask.h:139:2


area_copy.57:
  1079c8:    42 20             	r2 = 0			  ## ui_mask.h:128:0
  1079ca:    04 85             	goto 10 <area_copy.57+0xE : 1079d6 >			  ## ui_mask.h:128:0
  1079cc:    d8 ee 10 32       	r3 = b[r1+r2] (u)			  ## ui_mask.h:118:9
  1079d0:    d8 ee 01 32       	b[r0+r2] = r3			  ## ui_mask.h:118:7
  1079d4:    c2 21             	r2 += 1			  ## ui_mask.h:117:2
  1079d6:    82 f8 f9 21       	if (r2 != 16) goto -14 <area_copy.57+0x4 : 1079cc >
  1079da:    80 00             	rts			  ## ui_mask.h:130:1


area_get_width:
  1079dc:    c1 21             	r1 += 1			  ## ui_mask.h:133:0
  1079de:    10 1e             	r0 = r1 - r0			  ## ui_mask.h:134:39
  1079e0:    80 00             	rts			  ## ui_mask.h:134:2


area_get_height:
  1079e2:    c1 21             	r1 += 1			  ## ui_mask.h:138:0
  1079e4:    10 1e             	r0 = r1 - r0			  ## ui_mask.h:139:39
  1079e6:    80 00             	rts			  ## ui_mask.h:139:2


get_text_rect:
  1079e8:    7b 04             	[--sp] = {rets, r11-r4}			  ## ui_draw_arc.c:1140:0
  1079ea:    38 16             	r8 = r3			  ## ui_draw_arc.c:1140:0
  1079ec:    29 16             	r9 = r2			  ## ui_draw_arc.c:1140:0
  1079ee:    1a 16             	r10 = r1			  ## ui_draw_arc.c:1140:0
  1079f0:    0b 16             	r11 = r0			  ## ui_draw_arc.c:1140:0
  1079f2:    45 20             	r5 = 0			  ## ui_draw_arc.c:1140:0
  1079f4:    86 14             	r7_r6 = 0			  ## ui_draw_arc.c:1140:0
  1079f6:    04 97             	goto 46 <get_text_rect+0x3E : 107a26 >			  ## ui_draw_arc.c:1140:0
  1079f8:    d8 ee b2 05       	r0 = b[r11+r5] (s)			  ## ui_draw_arc.c:1152:7
  1079fc:    04 17             	r4 = r0.b0 (u)			  ## ui_draw_arc.c:1152:7
  1079fe:    70 fe 06 fe       	ifs (r0 > -1) goto 12 <get_text_rect+0x26 : 107a0e >			  ## ui_draw_arc.c:1152:7
  107a02:    c5 21             	r5 += 1			  ## ui_draw_arc.c:1153:31
  107a04:    d8 ee b0 05       	r0 = b[r11+r5] (u)			  ## ui_draw_arc.c:1153:25
  107a08:    a0 e1 20 44       	r0 <= insert(r4, p:8, l:8)			  ## ui_draw_arc.c:1153:23
  107a0c:    04 16             	r4 = r0			  ## ui_draw_arc.c:1153:23
  107a0e:    40 16             	r0 = r4			  ## ui_draw_arc.c:1158:7
  107a10:    80 ff 46 d5 ff ff 	call -10938 <get_text_matrix_width : 104f5c >			  ## ui_draw_arc.c:1158:7
  107a16:    06 18             	r6 += r0			  ## ui_draw_arc.c:1160:12
  107a18:    40 16             	r0 = r4			  ## ui_draw_arc.c:1159:7
  107a1a:    80 ff 5c d5 ff ff 	call -10916 <get_text_matrix_height : 104f7c >			  ## ui_draw_arc.c:1159:7
  107a20:    34 e4 71 70       	r7 = smax(r7, r0)			  ## ui_draw_arc.c:1161:7
  107a24:    c5 21             	r5 += 1			  ## ui_draw_arc.c:1151:24
  107a26:    8a ed e7 51       	ifs (r5 < r10) goto -50 <get_text_rect+0x10 : 1079f8 >
  107a2a:    d0 ec 91 60       	[r9+0] = r6			  ## ui_draw_arc.c:1167:9
  107a2e:    d0 ec 81 70       	[r8+0] = r7			  ## ui_draw_arc.c:1168:10
  107a32:    5b 04             	{pc, r11-r4} = [sp++]			  ## ui_draw_arc.c:1169:1


bt_addr_to_str:
  107a34:    78 04             	[--sp] = {rets, r8-r4}			  ## ui_draw_text.c:22:0
  107a36:    14 16             	r4 = r1			  ## ui_draw_text.c:22:0
  107a38:    05 16             	r5 = r0			  ## ui_draw_text.c:22:0
  107a3a:    86 14             	r7_r6 = 0			  ## ui_draw_text.c:22:0
  107a3c:    c8 ff 22 b8 10 00 	r8 = 1095714 <gpio_regs+0x22 : 10b822 >			  ## ui_draw_text.c:22:0
  107a42:    04 95             	goto 42 <bt_addr_to_str+0x3A : 107a6e >			  ## ui_draw_text.c:22:0
  107a44:    d8 ee 40 27       	r2 = b[r4+r7] (u)			  ## ui_draw_text.c:25:43
  107a48:    d0 1d             	r0 = r5 + r6			  ## ui_draw_text.c:25:18
  107a4a:    01 e1 0f 80       	r1 = r8 + 15			  ## ui_draw_text.c:25:9
  107a4e:    80 ff ac 83 f1 ff 	call -949332 <sprintf : 1fe00 >			  ## ui_draw_text.c:25:9
  107a54:    68 82             	r0 = r6 + 2			  ## ui_draw_text.c:26:16
  107a56:    07 f8 08 0a       	if (r7 == 5) goto 16 <bt_addr_to_str+0x36 : 107a6a >
  107a5a:    d8 ee 40 27       	r2 = b[r4+r7] (u)			  ## ui_draw_text.c:28:44
  107a5e:    50 18             	r0 += r5			  ## ui_draw_text.c:28:22
  107a60:    81 16             	r1 = r8			  ## ui_draw_text.c:28:13
  107a62:    80 ff 98 83 f1 ff 	call -949352 <sprintf : 1fe00 >			  ## ui_draw_text.c:28:13
  107a68:    68 83             	r0 = r6 + 3			  ## ui_draw_text.c:29:20
  107a6a:    c7 21             	r7 += 1			  ## ui_draw_text.c:24:23
  107a6c:    06 16             	r6 = r0
  107a6e:    87 f8 e9 0d       	if (r7 != 6) goto -46 <bt_addr_to_str+0x10 : 107a44 >
  107a72:    58 04             	{pc, r8-r4} = [sp++]			  ## ui_draw_text.c:32:1


ui_disp:
  107a74:    7f 04             	[--sp] = {rets, r15-r4}			  ## ui_entry.c:265:0
  107a76:    e2 93             	sp += -52			  ## ui_entry.c:265:0
  107a78:    16 16             	r6 = r1			  ## ui_entry.c:265:0
  107a7a:    0b 16             	r11 = r0			  ## ui_entry.c:265:0
  107a7c:    cf ff 20 b8 10 00 	r15 = 1095712 <gpio_regs+0x20 : 10b820 >			  ## ui_entry.c:265:0
  107a82:    00 e1 56 f2       	r0 = r15 + 598			  ## ui_entry.c:267:2
  107a86:    01 e1 23 f0       	r1 = r15 + 35			  ## ui_entry.c:267:2
  107a8a:    b2 16             	r2 = r11			  ## ui_entry.c:267:2
  107a8c:    63 16             	r3 = r6			  ## ui_entry.c:267:2
  107a8e:    80 ff 70 83 f1 ff 	call -949392 <printf : 1fe04 >			  ## ui_entry.c:267:2
  107a94:    88 8c             	r0 = sp + 12			  ## ui_entry.c:267:2
  107a96:    41 20             	r1 = 0
  107a98:    00 9f             	rep 2 32 {			  ## ui_entry.c:270:8
  107a9a:    81 07             		b[r0++=1] = r1
                               	}			  ## ui_entry.c:270:8
  107a9c:    cc ff c8 c4 10 00 	r12 = 1098952 <ui_disp.last_status : 10c4c8 >
  107aa2:    08 ff 05 b0 a5 02 	if (r11 > 5) goto 1354 <.GJTIE81_0_0_+0x532 : 107ff2 >
  107aa8:    c0 e1 b1 00       	r0 = r11 << 1
  107aac:    cd ff c0 c4 10 00 	r13 = 1098944 <user_api_param : 10c4c0 >
  107ab2:    10 01             	tbh [r0]


.GJTIL81_0_0_:
  107ab4:    06 00     < 6 : 0x6 >
  107ab6:    20 00     < 32 : 0x20 >
  107ab8:    2f 00     < 47 : 0x2F >
  107aba:    3b 00     < 59 : 0x3B >
  107abc:    ec 00     < 236 : 0xEC >
  107abe:    89 01     < 393 : 0x189 >
  107ac0:    00 e1 10 f2       	r0 = r15 + 528			  ## ui_entry.c:275:9
  107ac4:    61 16             	r1 = r6			  ## ui_entry.c:275:9
  107ac6:    80 ff 38 83 f1 ff 	call -949448 <printf : 1fe04 >			  ## ui_entry.c:275:9
  107acc:    00 ff 02 60 58 02 	if (r6 == 2) goto 1200 <.GJTIE81_0_0_+0x4C2 : 107f82 >			  ## ui_entry.c:276:12
  107ad2:    00 ff 01 60 61 02 	if (r6 == 1) goto 1218 <.GJTIE81_0_0_+0x4DA : 107f9a >
  107ad8:    01 ff 00 60 8a 02 	if (r6 != 0) goto 1300 <.GJTIE81_0_0_+0x532 : 107ff2 >
  107ade:    44 20             	r4 = 0			  ## ui_entry.c:277:13
  107ae0:    80 d4             	r1_r0 = 0  #			  ## ui_entry.c:277:13
  107ae2:    84 20             		 [sp] = r4			  ## ui_entry.c:277:13
  107ae4:    42 e0 c6 01       	r2 = 454 <_MASK_MEM_SIZE+0x22 : 1c6 >			  ## ui_entry.c:277:13
  107ae8:    23 16             	r3 = r2			  ## ui_entry.c:277:13
  107aea:    80 ff f8 c6 ff ff 	call -14600 <ui_draw_rect : 1041e8 >			  ## ui_entry.c:277:13
  107af0:    40 20             	r0 = 0			  ## ui_entry.c:278:13
  107af2:    04 97             	goto 46 <.GJTIE81_0_0_+0x62 : 107b22 >			  ## ui_entry.c:278:13
  107af4:    00 e1 2a f1       	r0 = r15 + 298			  ## ui_entry.c:299:6
  107af8:    80 ff 0a 83 f1 ff 	call -949494 <puts : 1fe08 >			  ## ui_entry.c:299:6
  107afe:    00 ff 00 60 77 02 	if (r6 == 0) goto 1262 <.GJTIE81_0_0_+0x532 : 107ff2 >			  ## ui_entry.c:299:6
  107b04:    00 e1 b0 f1       	r0 = r15 + 432			  ## ui_entry.c:303:4
  107b08:    61 16             	r1 = r6			  ## ui_entry.c:303:4
  107b0a:    80 ff f4 82 f1 ff 	call -949516 <printf : 1fe04 >			  ## ui_entry.c:303:4
  107b10:    35 90             	goto 1248 <.GJTIE81_0_0_+0x532 : 107ff2 >			  ## ui_entry.c:303:4
  107b12:    00 e1 6f f1       	r0 = r15 + 367			  ## ui_entry.c:294:9
  107b16:    80 ff ec 82 f1 ff 	call -949524 <puts : 1fe08 >			  ## ui_entry.c:294:9
  107b1c:    58 24             	r0 = 100			  ## ui_entry.c:296:42
  107b1e:    f4 e1 60 00       	r0 = r6 / r0 (u)			  ## ui_entry.c:296:42
  107b22:    80 ff f0 d5 ff ff 	call -10768 <draw_ring : 105118 >
  107b28:    35 84             	goto 1224 <.GJTIE81_0_0_+0x532 : 107ff2 >
  107b2a:    50 ee d1 00       	r0 = b[r13+1] (u)			  ## ui_entry.c:307:29
  107b2e:    00 44             	if (r0 == 0) goto 8 <.GJTIE81_0_0_+0x78 : 107b38 >			  ## ui_entry.c:307:29
  107b30:    50 ee c0 00       	r0 = b[r12+0] (u)			  ## ui_entry.c:307:45
  107b34:    00 f8 09 06       	if (r0 == 3) goto 18 <.GJTIE81_0_0_+0x8A : 107b4a >			  ## ui_entry.c:307:45
  107b38:    44 20             	r4 = 0			  ## ui_entry.c:309:13
  107b3a:    40 20             	r0 = 0			  ## ui_entry.c:309:13
  107b3c:    42 f0 c6 01       	r2 = 454  # <_MASK_MEM_SIZE+0x22 : 1c6 >			  ## ui_entry.c:309:13
  107b40:    84 20             		 [sp] = r4			  ## ui_entry.c:309:13
  107b42:    23 16             	r3 = r2			  ## ui_entry.c:309:13
  107b44:    80 ff 9e c6 ff ff 	call -14690 <ui_draw_rect : 1041e8 >			  ## ui_entry.c:309:13
  107b4a:    c0 ff 10 9b 10 00 	r0 = 1088272 <realloc+0x4EE : 109b10 >			  ## ui_entry.c:312:9
  107b50:    80 ff b2 82 f1 ff 	call -949582 <puts : 1fe08 >			  ## ui_entry.c:312:9
  107b56:    50 ee d4 30       	r3 = b[r13+4] (u)			  ## ui_entry.c:313:87
  107b5a:    50 ee d3 20       	r2 = b[r13+3] (u)			  ## ui_entry.c:313:64
  107b5e:    50 ee d2 10       	r1 = b[r13+2] (u)			  ## ui_entry.c:313:41
  107b62:    50 ee d5 40       	r4 = b[r13+5] (u)			  ## ui_entry.c:313:110
  107b66:    50 ee d6 00       	r0 = b[r13+6] (u)			  ## ui_entry.c:313:133
  107b6a:    50 ee d7 50       	r5 = b[r13+7] (u)			  ## ui_entry.c:313:156
  107b6e:    85 22             	[sp+8] = r5			  ## ui_entry.c:313:9
  107b70:    00 f1 27 f2       	r0 = r15 + 551  #			  ## ui_entry.c:313:9
  107b74:    80 21             		 [sp+4] = r0			  ## ui_entry.c:313:9
  107b76:    84 20             	[sp] = r4			  ## ui_entry.c:313:9
  107b78:    80 ff 86 82 f1 ff 	call -949626 <printf : 1fe04 >			  ## ui_entry.c:313:9
  107b7e:    d0 16             	r0 = r13			  ## ui_entry.c:314:9
  107b80:    10 87             	rep 4 8 {			  ## ui_entry.c:314:9
  107b82:    61 07             		r1 = b[r6++=1] (u)			  ## ui_entry.c:314:9
  107b84:    81 07             		b[r0++=1] = r1
                               	}			  ## ui_entry.c:314:9
  107b86:    06 e1 6f fa       	r6 = r15 + 2671			  ## ui_entry.c:316:46
  107b8a:    60 16             	r0 = r6			  ## ui_entry.c:316:46
  107b8c:    80 ff fa 81 f1 ff 	call -949766 <strlen : 1fd8c >			  ## ui_entry.c:316:46
  107b92:    01 16             	r1 = r0			  ## ui_entry.c:316:46
  107b94:    f8 e8 30 80       	r8 = sp + 48			  ## ui_entry.c:316:46
  107b98:    f8 e8 2c 90       	r9 = sp + 44
  107b9c:    60 16             	r0 = r6			  ## ui_entry.c:316:9
  107b9e:    82 15             	r3_r2 = r9_r8			  ## ui_entry.c:316:9
  107ba0:    bf ea 22 ff       	call -444 <get_text_rect : 1079e8 >			  ## ui_entry.c:316:9
  107ba4:    d4 e9 2c a0       	r10 = [sp+44]			  ## ui_entry.c:318:44
  107ba8:    60 d6             	r0 = r6  #			  ## ui_entry.c:318:86
  107baa:    07 2c             		 r7 = [sp+48]			  ## ui_entry.c:317:22
  107bac:    80 ff da 81 f1 ff 	call -949798 <strlen : 1fd8c >			  ## ui_entry.c:318:86
  107bb2:    72 d6             	r2 = r7  #			  ## ui_entry.c:318:9
  107bb4:    80 22             		 [sp+8] = r0			  ## ui_entry.c:318:9
  107bb6:    ce ff ff ff 00 00 	r14 = 65535 <hd_quantize_intervals_LF+0x635B : ffff >			  ## ui_entry.c:318:9
  107bbc:    44 22             	r4 = 2			  ## ui_entry.c:318:9
  107bbe:    f4 f1 71 04       	r0 = r7 / r4 (s)  #			  ## ui_entry.c:317:32
  107bc2:    86 21             		 [sp+4] = r6			  ## ui_entry.c:318:9
  107bc4:    a0 e0 e3 00       	r0 = 0xE3 - r0			  ## ui_entry.c:317:21
  107bc8:    69 34             	r1 = 180			  ## ui_entry.c:318:9
  107bca:    d4 e9 01 e0       	[sp] = r14			  ## ui_entry.c:318:9
  107bce:    a3 16             	r3 = r10			  ## ui_entry.c:318:9
  107bd0:    80 ff 4c d8 ff ff 	call -10164 <ui_draw_text : 105422 >			  ## ui_entry.c:318:9
  107bd6:    07 e1 bf fa       	r7 = r15 + 2751			  ## ui_entry.c:320:48
  107bda:    70 16             	r0 = r7			  ## ui_entry.c:320:48
  107bdc:    80 ff aa 81 f1 ff 	call -949846 <strlen : 1fd8c >			  ## ui_entry.c:320:48
  107be2:    02 16             	r2 = r0			  ## ui_entry.c:320:48
  107be4:    8e 8c             	r6 = sp + 12			  ## ui_entry.c:320:48
  107be6:    60 15             	r1_r0 = r7_r6			  ## ui_entry.c:320:9
  107be8:    80 ff 86 81 f1 ff 	call -949882 <memcpy : 1fd74 >			  ## ui_entry.c:320:9
  107bee:    60 16             	r0 = r6			  ## ui_entry.c:321:33
  107bf0:    80 ff 96 81 f1 ff 	call -949866 <strlen : 1fd8c >			  ## ui_entry.c:321:33
  107bf6:    60 18             	r0 += r6			  ## ui_entry.c:321:25
  107bf8:    01 e1 02 d0       	r1 = r13 + 2			  ## ui_entry.c:313:41
  107bfc:    bf ea 1a ff       	call -460 <bt_addr_to_str : 107a34 >			  ## ui_entry.c:321:9
  107c00:    60 16             	r0 = r6			  ## ui_entry.c:325:31
  107c02:    80 ff 84 81 f1 ff 	call -949884 <strlen : 1fd8c >			  ## ui_entry.c:325:31
  107c08:    01 16             	r1 = r0			  ## ui_entry.c:325:31
  107c0a:    60 16             	r0 = r6			  ## ui_entry.c:325:9
  107c0c:    82 15             	r3_r2 = r9_r8			  ## ui_entry.c:325:9
  107c0e:    bf ea eb fe       	call -554 <get_text_rect : 1079e8 >			  ## ui_entry.c:325:9
  107c12:    d4 e9 2c 80       	r8 = [sp+44]			  ## ui_entry.c:327:44
  107c16:    60 d6             	r0 = r6  #			  ## ui_entry.c:327:71
  107c18:    07 2c             		 r7 = [sp+48]			  ## ui_entry.c:326:22
  107c1a:    80 ff 6c 81 f1 ff 	call -949908 <strlen : 1fd8c >			  ## ui_entry.c:327:71
  107c20:    f4 f1 71 04       	r0 = r7 / r4 (s)  #			  ## ui_entry.c:326:32
  107c24:    80 22             		 [sp+8] = r0			  ## ui_entry.c:327:9
  107c26:    a0 f0 e3 00       	r0 = 0xE3 - r0  #			  ## ui_entry.c:326:21
  107c2a:    86 21             		 [sp+4] = r6			  ## ui_entry.c:327:9
  107c2c:    79 30             	r1 = 240			  ## ui_entry.c:327:9
  107c2e:    d4 e9 01 e0       	[sp] = r14			  ## ui_entry.c:327:9
  107c32:    72 16             	r2 = r7			  ## ui_entry.c:327:9
  107c34:    83 16             	r3 = r8			  ## ui_entry.c:327:9
  107c36:    80 ff e6 d7 ff ff 	call -10266 <ui_draw_text : 105422 >			  ## ui_entry.c:327:9
  107c3c:    45 20             	r5 = 0
  107c3e:    14 81             	goto 66 <.GJTIE81_0_0_+0x1C2 : 107c82 >
  107c40:    06 e1 e7 fa       	r6 = r15 + 2791			  ## ui_entry.c:330:50
  107c44:    60 16             	r0 = r6			  ## ui_entry.c:330:50
  107c46:    80 ff 40 81 f1 ff 	call -949952 <strlen : 1fd8c >			  ## ui_entry.c:330:50
  107c4c:    01 16             	r1 = r0			  ## ui_entry.c:330:50
  107c4e:    aa 90             	r2 = sp + 48			  ## ui_entry.c:330:50
  107c50:    ab 8c             	r3 = sp + 44
  107c52:    60 16             	r0 = r6			  ## ui_entry.c:330:13
  107c54:    bf ea c8 fe       	call -624 <get_text_rect : 1079e8 >			  ## ui_entry.c:330:13
  107c58:    60 d6             	r0 = r6  #			  ## ui_entry.c:331:108
  107c5a:    07 2b             		 r7 = [sp+44]			  ## ui_entry.c:331:66
  107c5c:    04 2c             	r4 = [sp+48]			  ## ui_entry.c:331:33
  107c5e:    80 ff 28 81 f1 ff 	call -949976 <strlen : 1fd8c >			  ## ui_entry.c:331:108
  107c64:    41 f0 2c 01       	r1 = 300  # <UPDATE_SIZE+0xAC : 12c >			  ## ui_entry.c:331:13
  107c68:    80 22             		 [sp+8] = r0			  ## ui_entry.c:331:13
  107c6a:    48 85             	r0 = r4 + 5			  ## ui_entry.c:331:43
  107c6c:    50 db             	r0 *= r5  #			  ## ui_entry.c:331:47
  107c6e:    86 21             		 [sp+4] = r6			  ## ui_entry.c:331:13
  107c70:    d8 24             	r0 += 100			  ## ui_entry.c:331:30
  107c72:    d4 e9 01 e0       	[sp] = r14			  ## ui_entry.c:331:13
  107c76:    42 16             	r2 = r4			  ## ui_entry.c:331:13
  107c78:    73 16             	r3 = r7			  ## ui_entry.c:331:13
  107c7a:    80 ff a2 d7 ff ff 	call -10334 <ui_draw_text : 105422 >			  ## ui_entry.c:331:13
  107c80:    c5 21             	r5 += 1			  ## ui_entry.c:329:52
  107c82:    50 ee d1 00       	r0 = b[r13+1] (u)			  ## ui_entry.c:329:23
  107c86:    80 ed db 51       	ifs (r5 < r0) goto -74 <.GJTIE81_0_0_+0x180 : 107c40 >			  ## ui_entry.c:329:23
  107c8a:    d4 93             	goto 870 <.GJTIE81_0_0_+0x532 : 107ff2 >			  ## ui_entry.c:329:23
  107c8c:    50 ee d1 00       	r0 = b[r13+1] (u)			  ## ui_entry.c:336:29
  107c90:    00 44             	if (r0 == 0) goto 8 <.GJTIE81_0_0_+0x1DA : 107c9a >			  ## ui_entry.c:336:29
  107c92:    50 ee c0 00       	r0 = b[r12+0] (u)			  ## ui_entry.c:336:45
  107c96:    00 f8 09 08       	if (r0 == 4) goto 18 <.GJTIE81_0_0_+0x1EC : 107cac >			  ## ui_entry.c:336:45
  107c9a:    44 20             	r4 = 0			  ## ui_entry.c:338:13
  107c9c:    40 20             	r0 = 0			  ## ui_entry.c:338:13
  107c9e:    42 f0 c6 01       	r2 = 454  # <_MASK_MEM_SIZE+0x22 : 1c6 >			  ## ui_entry.c:338:13
  107ca2:    84 20             		 [sp] = r4			  ## ui_entry.c:338:13
  107ca4:    23 16             	r3 = r2			  ## ui_entry.c:338:13
  107ca6:    80 ff 3c c5 ff ff 	call -15044 <ui_draw_rect : 1041e8 >			  ## ui_entry.c:338:13
  107cac:    c0 ff 30 9b 10 00 	r0 = 1088304 <realloc+0x50E : 109b30 >			  ## ui_entry.c:340:9
  107cb2:    80 ff 50 81 f1 ff 	call -949936 <puts : 1fe08 >			  ## ui_entry.c:340:9
  107cb8:    d0 16             	r0 = r13			  ## ui_entry.c:341:9
  107cba:    10 87             	rep 4 8 {			  ## ui_entry.c:341:9
  107cbc:    61 07             		r1 = b[r6++=1] (u)			  ## ui_entry.c:341:9
  107cbe:    81 07             		b[r0++=1] = r1
                               	}			  ## ui_entry.c:341:9
  107cc0:    04 e1 83 fa       	r4 = r15 + 2691			  ## ui_entry.c:343:46
  107cc4:    40 16             	r0 = r4			  ## ui_entry.c:343:46
  107cc6:    80 ff c0 80 f1 ff 	call -950080 <strlen : 1fd8c >			  ## ui_entry.c:343:46
  107ccc:    01 16             	r1 = r0			  ## ui_entry.c:343:46
  107cce:    f8 e8 30 80       	r8 = sp + 48			  ## ui_entry.c:343:46
  107cd2:    f8 e8 2c 90       	r9 = sp + 44
  107cd6:    40 16             	r0 = r4			  ## ui_entry.c:343:9
  107cd8:    82 15             	r3_r2 = r9_r8			  ## ui_entry.c:343:9
  107cda:    bf ea 85 fe       	call -758 <get_text_rect : 1079e8 >			  ## ui_entry.c:343:9
  107cde:    d0 e9 2c 60       	r7_r6 = d[sp+44]			  ## ui_entry.c:345:44
  107ce2:    40 16             	r0 = r4			  ## ui_entry.c:345:86
  107ce4:    80 ff a2 80 f1 ff 	call -950110 <strlen : 1fd8c >			  ## ui_entry.c:345:86
  107cea:    4e f0 02 00       	r14 = 2  # <moveable_slot_size+0x2 : 2 >			  ## ui_entry.c:345:86
  107cee:    80 22             		 [sp+8] = r0			  ## ui_entry.c:345:9
  107cf0:    f4 f1 71 0e       	r0 = r7 / r14 (s)  #			  ## ui_entry.c:344:32
  107cf4:    84 21             		 [sp+4] = r4			  ## ui_entry.c:345:9
  107cf6:    ca ff ff ff 00 00 	r10 = 65535 <hd_quantize_intervals_LF+0x635B : ffff >			  ## ui_entry.c:345:9
  107cfc:    a0 e0 e3 00       	r0 = 0xE3 - r0			  ## ui_entry.c:344:21
  107d00:    69 34             	r1 = 180			  ## ui_entry.c:345:9
  107d02:    d4 e9 01 a0       	[sp] = r10			  ## ui_entry.c:345:9
  107d06:    72 16             	r2 = r7			  ## ui_entry.c:345:9
  107d08:    63 16             	r3 = r6			  ## ui_entry.c:345:9
  107d0a:    80 ff 12 d7 ff ff 	call -10478 <ui_draw_text : 105422 >			  ## ui_entry.c:345:9
  107d10:    04 e1 bf fa       	r4 = r15 + 2751			  ## ui_entry.c:347:48
  107d14:    40 16             	r0 = r4			  ## ui_entry.c:347:48
  107d16:    80 ff 70 80 f1 ff 	call -950160 <strlen : 1fd8c >			  ## ui_entry.c:347:48
  107d1c:    02 16             	r2 = r0			  ## ui_entry.c:347:48
  107d1e:    8e 8c             	r6 = sp + 12			  ## ui_entry.c:347:48
  107d20:    60 16             	r0 = r6			  ## ui_entry.c:347:9
  107d22:    41 16             	r1 = r4			  ## ui_entry.c:347:9
  107d24:    80 ff 4a 80 f1 ff 	call -950198 <memcpy : 1fd74 >			  ## ui_entry.c:347:9
  107d2a:    60 16             	r0 = r6			  ## ui_entry.c:348:33
  107d2c:    80 ff 5a 80 f1 ff 	call -950182 <strlen : 1fd8c >			  ## ui_entry.c:348:33
  107d32:    60 18             	r0 += r6			  ## ui_entry.c:348:25
  107d34:    01 e1 02 d0       	r1 = r13 + 2			  ## ui_entry.c:348:25
  107d38:    bf ea 7c fe       	call -776 <bt_addr_to_str : 107a34 >			  ## ui_entry.c:348:9
  107d3c:    60 16             	r0 = r6			  ## ui_entry.c:352:31
  107d3e:    80 ff 48 80 f1 ff 	call -950200 <strlen : 1fd8c >			  ## ui_entry.c:352:31
  107d44:    01 16             	r1 = r0			  ## ui_entry.c:352:31
  107d46:    60 16             	r0 = r6			  ## ui_entry.c:352:9
  107d48:    82 15             	r3_r2 = r9_r8			  ## ui_entry.c:352:9
  107d4a:    bf ea 4d fe       	call -870 <get_text_rect : 1079e8 >			  ## ui_entry.c:352:9
  107d4e:    60 d6             	r0 = r6  #			  ## ui_entry.c:354:71
  107d50:    04 2b             		 r4 = [sp+44]			  ## ui_entry.c:354:44
  107d52:    07 2c             	r7 = [sp+48]			  ## ui_entry.c:353:22
  107d54:    80 ff 32 80 f1 ff 	call -950222 <strlen : 1fd8c >			  ## ui_entry.c:354:71
  107d5a:    f4 f1 71 0e       	r0 = r7 / r14 (s)  #			  ## ui_entry.c:353:32
  107d5e:    80 22             		 [sp+8] = r0			  ## ui_entry.c:354:9
  107d60:    a0 f0 e3 00       	r0 = 0xE3 - r0  #			  ## ui_entry.c:353:21
  107d64:    86 21             		 [sp+4] = r6			  ## ui_entry.c:354:9
  107d66:    79 30             	r1 = 240			  ## ui_entry.c:354:9
  107d68:    d4 e9 01 a0       	[sp] = r10			  ## ui_entry.c:354:9
  107d6c:    72 16             	r2 = r7			  ## ui_entry.c:354:9
  107d6e:    43 16             	r3 = r4			  ## ui_entry.c:354:9
  107d70:    80 ff ac d6 ff ff 	call -10580 <ui_draw_text : 105422 >			  ## ui_entry.c:354:9
  107d76:    45 20             	r5 = 0
  107d78:    14 81             	goto 66 <.GJTIE81_0_0_+0x2FC : 107dbc >
  107d7a:    04 e1 e7 fa       	r4 = r15 + 2791			  ## ui_entry.c:356:50
  107d7e:    40 16             	r0 = r4			  ## ui_entry.c:356:50
  107d80:    80 ff 06 80 f1 ff 	call -950266 <strlen : 1fd8c >			  ## ui_entry.c:356:50
  107d86:    01 16             	r1 = r0			  ## ui_entry.c:356:50
  107d88:    aa 90             	r2 = sp + 48			  ## ui_entry.c:356:50
  107d8a:    ab 8c             	r3 = sp + 44
  107d8c:    40 16             	r0 = r4			  ## ui_entry.c:356:13
  107d8e:    bf ea 2b fe       	call -938 <get_text_rect : 1079e8 >			  ## ui_entry.c:356:13
  107d92:    d0 e9 2c 60       	r7_r6 = d[sp+44]			  ## ui_entry.c:357:66
  107d96:    40 16             	r0 = r4			  ## ui_entry.c:357:108
  107d98:    80 ff ee 7f f1 ff 	call -950290 <strlen : 1fd8c >			  ## ui_entry.c:357:108
  107d9e:    41 f0 2c 01       	r1 = 300  # <UPDATE_SIZE+0xAC : 12c >			  ## ui_entry.c:357:13
  107da2:    80 22             		 [sp+8] = r0			  ## ui_entry.c:357:13
  107da4:    78 85             	r0 = r7 + 5			  ## ui_entry.c:357:43
  107da6:    50 db             	r0 *= r5  #			  ## ui_entry.c:357:47
  107da8:    84 21             		 [sp+4] = r4			  ## ui_entry.c:357:13
  107daa:    d8 24             	r0 += 100			  ## ui_entry.c:357:30
  107dac:    d4 e9 01 a0       	[sp] = r10			  ## ui_entry.c:357:13
  107db0:    72 16             	r2 = r7			  ## ui_entry.c:357:13
  107db2:    63 16             	r3 = r6			  ## ui_entry.c:357:13
  107db4:    80 ff 68 d6 ff ff 	call -10648 <ui_draw_text : 105422 >			  ## ui_entry.c:357:13
  107dba:    c5 21             	r5 += 1			  ## ui_entry.c:355:46
  107dbc:    50 ee d1 00       	r0 = b[r13+1] (u)			  ## ui_entry.c:355:17
  107dc0:    80 ed db 51       	ifs (r5 < r0) goto -74 <.GJTIE81_0_0_+0x2BA : 107d7a >			  ## ui_entry.c:355:17
  107dc4:    84 96             	goto 556 <.GJTIE81_0_0_+0x532 : 107ff2 >			  ## ui_entry.c:355:17
  107dc6:    50 ee d1 00       	r0 = b[r13+1] (u)			  ## ui_entry.c:361:29
  107dca:    00 44             	if (r0 == 0) goto 8 <.GJTIE81_0_0_+0x314 : 107dd4 >			  ## ui_entry.c:361:29
  107dcc:    50 ee c0 00       	r0 = b[r12+0] (u)			  ## ui_entry.c:361:45
  107dd0:    00 f8 09 0a       	if (r0 == 5) goto 18 <.GJTIE81_0_0_+0x326 : 107de6 >			  ## ui_entry.c:361:45
  107dd4:    44 20             	r4 = 0			  ## ui_entry.c:363:13
  107dd6:    40 20             	r0 = 0			  ## ui_entry.c:363:13
  107dd8:    42 f0 c6 01       	r2 = 454  # <_MASK_MEM_SIZE+0x22 : 1c6 >			  ## ui_entry.c:363:13
  107ddc:    84 20             		 [sp] = r4			  ## ui_entry.c:363:13
  107dde:    23 16             	r3 = r2			  ## ui_entry.c:363:13
  107de0:    80 ff 02 c4 ff ff 	call -15358 <ui_draw_rect : 1041e8 >			  ## ui_entry.c:363:13
  107de6:    c0 ff 50 9b 10 00 	r0 = 1088336 <realloc+0x52E : 109b50 >			  ## ui_entry.c:365:9
  107dec:    80 ff 16 80 f1 ff 	call -950250 <puts : 1fe08 >			  ## ui_entry.c:365:9
  107df2:    d0 16             	r0 = r13			  ## ui_entry.c:366:9
  107df4:    10 87             	rep 4 8 {			  ## ui_entry.c:366:9
  107df6:    61 07             		r1 = b[r6++=1] (u)			  ## ui_entry.c:366:9
  107df8:    81 07             		b[r0++=1] = r1
                               	}			  ## ui_entry.c:366:9
  107dfa:    06 e1 97 fa       	r6 = r15 + 2711
  107dfe:    60 16             	r0 = r6			  ## ui_entry.c:368:46
  107e00:    80 ff 86 7f f1 ff 	call -950394 <strlen : 1fd8c >			  ## ui_entry.c:368:46
  107e06:    01 16             	r1 = r0			  ## ui_entry.c:368:46
  107e08:    af 90             	r7 = sp + 48			  ## ui_entry.c:368:46
  107e0a:    f8 e8 2c 80       	r8 = sp + 44
  107e0e:    60 16             	r0 = r6			  ## ui_entry.c:368:9
  107e10:    72 16             	r2 = r7			  ## ui_entry.c:368:9
  107e12:    83 16             	r3 = r8			  ## ui_entry.c:368:9
  107e14:    bf ea e8 fd       	call -1072 <get_text_rect : 1079e8 >			  ## ui_entry.c:368:9
  107e18:    d4 e9 2c 90       	r9 = [sp+44]			  ## ui_entry.c:370:44
  107e1c:    60 d6             	r0 = r6  #			  ## ui_entry.c:370:86
  107e1e:    04 2c             		 r4 = [sp+48]			  ## ui_entry.c:369:22
  107e20:    80 ff 66 7f f1 ff 	call -950426 <strlen : 1fd8c >			  ## ui_entry.c:370:86
  107e26:    42 d6             	r2 = r4  #			  ## ui_entry.c:370:9
  107e28:    80 22             		 [sp+8] = r0			  ## ui_entry.c:370:9
  107e2a:    ca ff ff ff 00 00 	r10 = 65535 <hd_quantize_intervals_LF+0x635B : ffff >			  ## ui_entry.c:370:9
  107e30:    45 22             	r5 = 2			  ## ui_entry.c:370:9
  107e32:    f4 f1 41 05       	r0 = r4 / r5 (s)  #			  ## ui_entry.c:369:32
  107e36:    86 21             		 [sp+4] = r6			  ## ui_entry.c:370:9
  107e38:    a0 e0 e3 00       	r0 = 0xE3 - r0			  ## ui_entry.c:369:21
  107e3c:    61 2c             	r1 = 140			  ## ui_entry.c:370:9
  107e3e:    d4 e9 01 a0       	[sp] = r10			  ## ui_entry.c:370:9
  107e42:    93 16             	r3 = r9			  ## ui_entry.c:370:9
  107e44:    80 ff d8 d5 ff ff 	call -10792 <ui_draw_text : 105422 >			  ## ui_entry.c:370:9
  107e4a:    6c 94             	r4 = r6 + 20			  ## ui_entry.c:372:46
  107e4c:    40 16             	r0 = r4			  ## ui_entry.c:372:46
  107e4e:    80 ff 38 7f f1 ff 	call -950472 <strlen : 1fd8c >			  ## ui_entry.c:372:46
  107e54:    01 16             	r1 = r0			  ## ui_entry.c:372:46
  107e56:    40 16             	r0 = r4			  ## ui_entry.c:372:9
  107e58:    72 16             	r2 = r7			  ## ui_entry.c:372:9
  107e5a:    83 16             	r3 = r8			  ## ui_entry.c:372:9
  107e5c:    bf ea c4 fd       	call -1144 <get_text_rect : 1079e8 >			  ## ui_entry.c:372:9
  107e60:    d4 e9 2c 80       	r8 = [sp+44]			  ## ui_entry.c:374:44
  107e64:    40 d6             	r0 = r4  #			  ## ui_entry.c:374:86
  107e66:    07 2c             		 r7 = [sp+48]			  ## ui_entry.c:373:22
  107e68:    80 ff 1e 7f f1 ff 	call -950498 <strlen : 1fd8c >			  ## ui_entry.c:374:86
  107e6e:    f4 f1 71 05       	r0 = r7 / r5 (s)  #			  ## ui_entry.c:373:32
  107e72:    80 22             		 [sp+8] = r0			  ## ui_entry.c:374:9
  107e74:    a0 f0 e3 00       	r0 = 0xE3 - r0  #			  ## ui_entry.c:373:21
  107e78:    84 21             		 [sp+4] = r4			  ## ui_entry.c:374:9
  107e7a:    71 28             	r1 = 200			  ## ui_entry.c:374:9
  107e7c:    d4 e9 01 a0       	[sp] = r10			  ## ui_entry.c:374:9
  107e80:    72 16             	r2 = r7			  ## ui_entry.c:374:9
  107e82:    83 16             	r3 = r8			  ## ui_entry.c:374:9
  107e84:    80 ff 98 d5 ff ff 	call -10856 <ui_draw_text : 105422 >			  ## ui_entry.c:374:9
  107e8a:    04 e1 28 60       	r4 = r6 + 40			  ## ui_entry.c:375:48
  107e8e:    40 16             	r0 = r4			  ## ui_entry.c:375:48
  107e90:    80 ff f6 7e f1 ff 	call -950538 <strlen : 1fd8c >			  ## ui_entry.c:375:48
  107e96:    02 16             	r2 = r0			  ## ui_entry.c:375:48
  107e98:    8e 8c             	r6 = sp + 12			  ## ui_entry.c:375:48
  107e9a:    60 16             	r0 = r6			  ## ui_entry.c:375:9
  107e9c:    41 16             	r1 = r4			  ## ui_entry.c:375:9
  107e9e:    80 ff d0 7e f1 ff 	call -950576 <memcpy : 1fd74 >			  ## ui_entry.c:375:9
  107ea4:    60 16             	r0 = r6			  ## ui_entry.c:376:33
  107ea6:    80 ff e0 7e f1 ff 	call -950560 <strlen : 1fd8c >			  ## ui_entry.c:376:33
  107eac:    60 18             	r0 += r6			  ## ui_entry.c:376:25
  107eae:    01 e1 02 d0       	r1 = r13 + 2			  ## ui_entry.c:376:25
  107eb2:    bf ea bf fd       	call -1154 <bt_addr_to_str : 107a34 >			  ## ui_entry.c:376:9
  107eb6:    60 16             	r0 = r6			  ## ui_entry.c:379:19
  107eb8:    80 ff ce 7e f1 ff 	call -950578 <strlen : 1fd8c >			  ## ui_entry.c:379:19
  107ebe:    06 16             	r6 = r0			  ## ui_entry.c:379:19
  107ec0:    44 20             	r4 = 0
  107ec2:    04 90             	goto 32 <.GJTIE81_0_0_+0x424 : 107ee4 >
  107ec4:    04 46             	if (r4 == 0) goto 12 <.GJTIE81_0_0_+0x412 : 107ed2 >
  107ec6:    24 ea 0f 40       	if ((r4 & 0xF) == 0) {
  107eca:    f0 16             		r0 = r15			  ## ui_draw_arc.c:1132:4
  107ecc:    80 ff 36 7f f1 ff 		call -950474
                               	} <puts : 1fe08 >			  ## ui_draw_arc.c:1132:4
  107ed2:    88 8c             	r0 = sp + 12
  107ed4:    d8 ee 00 14       	r1 = b[r0+r4] (u)			  ## ui_draw_arc.c:1134:19
  107ed8:    00 e1 16 f0       	r0 = r15 + 22			  ## ui_draw_arc.c:1134:3
  107edc:    80 ff 22 7f f1 ff 	call -950494 <printf : 1fe04 >			  ## ui_draw_arc.c:1134:3
  107ee2:    c4 21             	r4 += 1			  ## ui_draw_arc.c:1130:24
  107ee4:    86 ed ee 41       	ifs (r4 < r6) goto -36 <.GJTIE81_0_0_+0x404 : 107ec4 >
  107ee8:    f0 16             	r0 = r15			  ## ui_draw_arc.c:1136:2
  107eea:    80 ff 18 7f f1 ff 	call -950504 <puts : 1fe08 >			  ## ui_draw_arc.c:1136:2
  107ef0:    8c 8c             	r4 = sp + 12			  ## ui_draw_arc.c:1136:2
  107ef2:    40 16             	r0 = r4			  ## ui_entry.c:380:31
  107ef4:    80 ff 92 7e f1 ff 	call -950638 <strlen : 1fd8c >			  ## ui_entry.c:380:31
  107efa:    01 16             	r1 = r0			  ## ui_entry.c:380:31
  107efc:    aa 90             	r2 = sp + 48			  ## ui_entry.c:380:31
  107efe:    ab 8c             	r3 = sp + 44
  107f00:    40 16             	r0 = r4			  ## ui_entry.c:380:9
  107f02:    bf ea 71 fd       	call -1310 <get_text_rect : 1079e8 >			  ## ui_entry.c:380:9
  107f06:    d0 e9 2c 60       	r7_r6 = d[sp+44]			  ## ui_entry.c:382:44
  107f0a:    40 16             	r0 = r4			  ## ui_entry.c:382:71
  107f0c:    80 ff 7a 7e f1 ff 	call -950662 <strlen : 1fd8c >			  ## ui_entry.c:382:71
  107f12:    41 f0 04 01       	r1 = 260  # <UPDATE_SIZE+0x84 : 104 >			  ## ui_entry.c:382:9
  107f16:    80 22             		 [sp+8] = r0			  ## ui_entry.c:382:9
  107f18:    40 22             	r0 = 2			  ## ui_entry.c:381:32
  107f1a:    f4 f1 71 00       	r0 = r7 / r0 (s)  #			  ## ui_entry.c:381:32
  107f1e:    84 21             		 [sp+4] = r4			  ## ui_entry.c:382:9
  107f20:    a0 e0 e3 00       	r0 = 0xE3 - r0			  ## ui_entry.c:381:21
  107f24:    d4 e9 01 a0       	[sp] = r10			  ## ui_entry.c:382:9
  107f28:    72 16             	r2 = r7			  ## ui_entry.c:382:9
  107f2a:    63 16             	r3 = r6			  ## ui_entry.c:382:9
  107f2c:    80 ff f0 d4 ff ff 	call -11024 <ui_draw_text : 105422 >			  ## ui_entry.c:382:9
  107f32:    45 20             	r5 = 0
  107f34:    14 81             	goto 66 <.GJTIE81_0_0_+0x4B8 : 107f78 >
  107f36:    04 e1 e7 fa       	r4 = r15 + 2791			  ## ui_entry.c:385:50
  107f3a:    40 16             	r0 = r4			  ## ui_entry.c:385:50
  107f3c:    80 ff 4a 7e f1 ff 	call -950710 <strlen : 1fd8c >			  ## ui_entry.c:385:50
  107f42:    01 16             	r1 = r0			  ## ui_entry.c:385:50
  107f44:    aa 90             	r2 = sp + 48			  ## ui_entry.c:385:50
  107f46:    ab 8c             	r3 = sp + 44
  107f48:    40 16             	r0 = r4			  ## ui_entry.c:385:13
  107f4a:    bf ea 4d fd       	call -1382 <get_text_rect : 1079e8 >			  ## ui_entry.c:385:13
  107f4e:    d0 e9 2c 60       	r7_r6 = d[sp+44]			  ## ui_entry.c:386:66
  107f52:    40 16             	r0 = r4			  ## ui_entry.c:386:108
  107f54:    80 ff 32 7e f1 ff 	call -950734 <strlen : 1fd8c >			  ## ui_entry.c:386:108
  107f5a:    41 f0 40 01       	r1 = 320  # <UPDATE_SIZE+0xC0 : 140 >			  ## ui_entry.c:386:13
  107f5e:    80 22             		 [sp+8] = r0			  ## ui_entry.c:386:13
  107f60:    78 85             	r0 = r7 + 5			  ## ui_entry.c:386:43
  107f62:    50 db             	r0 *= r5  #			  ## ui_entry.c:386:47
  107f64:    84 21             		 [sp+4] = r4			  ## ui_entry.c:386:13
  107f66:    d8 24             	r0 += 100			  ## ui_entry.c:386:30
  107f68:    d4 e9 01 a0       	[sp] = r10			  ## ui_entry.c:386:13
  107f6c:    72 16             	r2 = r7			  ## ui_entry.c:386:13
  107f6e:    63 16             	r3 = r6			  ## ui_entry.c:386:13
  107f70:    80 ff ac d4 ff ff 	call -11092 <ui_draw_text : 105422 >			  ## ui_entry.c:386:13
  107f76:    c5 21             	r5 += 1			  ## ui_entry.c:384:46
  107f78:    50 ee d1 00       	r0 = b[r13+1] (u)			  ## ui_entry.c:384:17
  107f7c:    80 ed db 51       	ifs (r5 < r0) goto -74 <.GJTIE81_0_0_+0x476 : 107f36 >			  ## ui_entry.c:384:17
  107f80:    14 98             	goto 112 <.GJTIE81_0_0_+0x532 : 107ff2 >			  ## ui_entry.c:384:17
  107f82:    44 20             	r4 = 0
  107f84:    80 d4             	r1_r0 = 0  #			  ## ui_entry.c:286:13
  107f86:    84 20             		 [sp] = r4			  ## ui_entry.c:286:13
  107f88:    42 e0 c6 01       	r2 = 454 <_MASK_MEM_SIZE+0x22 : 1c6 >			  ## ui_entry.c:286:13
  107f8c:    23 16             	r3 = r2			  ## ui_entry.c:286:13
  107f8e:    80 ff 54 c2 ff ff 	call -15788 <ui_draw_rect : 1041e8 >			  ## ui_entry.c:286:13
  107f94:    05 e1 0f fb       	r5 = r15 + 2831			  ## ui_entry.c:287:50
  107f98:    04 8b             	goto 22 <.GJTIE81_0_0_+0x4F0 : 107fb0 >			  ## ui_entry.c:287:50
  107f9a:    44 20             	r4 = 0
  107f9c:    80 d4             	r1_r0 = 0  #			  ## ui_entry.c:280:13
  107f9e:    84 20             		 [sp] = r4			  ## ui_entry.c:280:13
  107fa0:    42 e0 c6 01       	r2 = 454 <_MASK_MEM_SIZE+0x22 : 1c6 >			  ## ui_entry.c:280:13
  107fa4:    23 16             	r3 = r2			  ## ui_entry.c:280:13
  107fa6:    80 ff 3c c2 ff ff 	call -15812 <ui_draw_rect : 1041e8 >			  ## ui_entry.c:280:13
  107fac:    05 e1 fb fa       	r5 = r15 + 2811			  ## ui_entry.c:281:50
  107fb0:    50 16             	r0 = r5
  107fb2:    80 ff d4 7d f1 ff 	call -950828 <strlen : 1fd8c >
  107fb8:    01 16             	r1 = r0
  107fba:    aa 90             	r2 = sp + 48
  107fbc:    ab 8c             	r3 = sp + 44
  107fbe:    50 16             	r0 = r5
  107fc0:    bf ea 12 fd       	call -1500 <get_text_rect : 1079e8 >
  107fc4:    d0 e9 2c 60       	r7_r6 = d[sp+44]
  107fc8:    50 16             	r0 = r5
  107fca:    80 ff bc 7d f1 ff 	call -950852 <strlen : 1fd8c >
  107fd0:    63 d6             	r3 = r6  #
  107fd2:    80 22             		 [sp+8] = r0
  107fd4:    c2 ff ff ff 00 00 	r2 = 65535 <hd_quantize_intervals_LF+0x635B : ffff >
  107fda:    40 22             	r0 = 2
  107fdc:    f4 f1 71 00       	r0 = r7 / r0 (s)  #
  107fe0:    85 21             		 [sp+4] = r5
  107fe2:    a0 f0 e3 00       	r0 = 0xE3 - r0  #
  107fe6:    82 20             		 [sp] = r2
  107fe8:    71 32             	r1 = 210
  107fea:    72 16             	r2 = r7
  107fec:    80 ff 30 d4 ff ff 	call -11216 <ui_draw_text : 105422 >
  107ff2:    52 ee c0 b0       	b[r12+0] = r11			  ## ui_entry.c:393:14
  107ff6:    02 8d             	sp += 52			  ## ui_entry.c:393:14
  107ff8:    5f 04             	{pc, r15-r4} = [sp++]			  ## ui_entry.c:394:1


mask_mix:
  107ffa:    02 16             	r2 = r0			  ## ui_mask.h:101:0
  107ffc:    11 fc 09 f8       	if (r1 > 252) goto 18 <mask_mix+0x18 : 108012 >			  ## ui_mask.h:101:0
  108000:    42 20             	r2 = 0			  ## ui_mask.h:101:0
  108002:    31 e9 03 c0       	if (r1 >= 3) {			  ## ui_mask.h:101:0
  108006:    10 1b             		r0 *= r1			  ## ui_mask.h:109:9
  108008:    c1 ff 81 80 00 00 		r1 = 32897 <STFT_Win_FixHalf_M128_D80+0x407D : 8081 >			  ## ui_mask.h:109:9
  10800e:    10 1b             		r0 *= r1			  ## ui_mask.h:109:9
  108010:    82 b7             		r2 = r0 >> 23
                               	}			  ## ui_mask.h:109:9
  108012:    20 17             	r0 = r2.b0 (u)			  ## ui_mask.h:110:1
  108014:    80 00             	rts			  ## ui_mask.h:110:1


clock_critical_enter:
  108016:    80 00             	rts			  ## imd.c:1366:0


clock_critical_exit:
  108018:    10 04             	[--sp] = rets			  ## imd.c:1371:0
  10801a:    bf ea a0 f4       	call -5824 <imd_sfr_pop : 10695e >			  ## imd.c:1372:2
  10801e:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd.c:1374:13
  108024:    50 ee 0f 0e       	r0 = b[r0+239] (u)			  ## imd.c:1374:13
  108028:    00 42             	if (r0 == 0) goto 4 <clock_critical_exit+0x16 : 10802e >			  ## imd.c:1374:13
  10802a:    bf ea 7a f1       	call -7436 <imd_clock_init : 106322 >			  ## imd.c:1375:3
  10802e:    00 04             	pc = [sp++]			  ## imd.c:1377:1


lcd_cs:
  108030:    10 04             	[--sp] = rets			  ## imd.c:338:0
  108032:    c1 ff 00 c8 10 00 	r1 = 1099776 <backlight_status : 10c800 >			  ## imd.c:338:0
  108038:    d1 ec 1c 23       	r2 = [r1+316]			  ## imd.c:339:13
  10803c:    02 43             	if (r2 == 0) goto 6 <lcd_cs+0x14 : 108044 >			  ## imd.c:339:13
  10803e:    d1 ec 1c 13       	r1 = [r1+316]			  ## imd.c:340:10
  108042:    c1 00             	call r1			  ## imd.c:340:3
  108044:    00 04             	pc = [sp++]			  ## imd.c:342:1


lcd_dc:
  108046:    10 04             	[--sp] = rets			  ## imd.c:346:0
  108048:    c1 ff 00 c8 10 00 	r1 = 1099776 <backlight_status : 10c800 >			  ## imd.c:346:0
  10804e:    d1 ec 18 23       	r2 = [r1+312]			  ## imd.c:347:13
  108052:    02 43             	if (r2 == 0) goto 6 <lcd_dc+0x14 : 10805a >			  ## imd.c:347:13
  108054:    d1 ec 18 13       	r1 = [r1+312]			  ## imd.c:348:10
  108058:    c1 00             	call r1			  ## imd.c:348:3
  10805a:    00 04             	pc = [sp++]			  ## imd.c:350:1


lcd_dat_dir:
  10805c:    c1 ff 08 50 fd 00 	r1 = 16601096 <_HEAP_END+0xD5A008 : fd5008 >			  ## imd.c:355:0
  108062:    00 46             	if (r0 == 0) goto 12 <lcd_dat_dir+0x14 : 108070 >			  ## imd.c:356:6
  108064:    01 ef 7f 1c       	[r1+4] |= 0xFF00			  ## imd.c:357:3
  108068:    10 60             	r0 = [r1+0] 			  ## imd.c:358:3
  10806a:    40 e1 7f 0c       	r0 = r0 | 0xFF00			  ## imd.c:358:3
  10806e:    04 87             	goto 14 <lcd_dat_dir+0x22 : 10807e >			  ## imd.c:358:3
  108070:    05 ef 7f 1c       	[r1+20] |= 0xFF00			  ## imd.c:360:3
  108074:    01 ef 7f 1c       	[r1+4] |= 0xFF00			  ## imd.c:361:3
  108078:    10 60             	r0 = [r1+0] 			  ## imd.c:362:3
  10807a:    70 e1 7f 0c       	r0 = r0 & 0xFFFF00FF			  ## imd.c:362:3
  10807e:    90 60             	[r1+0] = r0
  108080:    80 00             	rts			  ## imd.c:364:1


imd_isr:
  108082:    e9 04             	[--sp] = {psr, rets, reti}			  ## imd.c:155:0
  108084:    d8 e8 3f 00       	[--sp] = {r5-r0}			  ## imd.c:155:0
  108088:    c0 ff 00 2d fe 00 	r0 = 16657664 <_HEAP_END+0xD67D00 : fe2d00 >			  ## imd.c:155:0
  10808e:    01 60             	r1 = [r0+0] 			  ## imd.c:143:10
  108090:    51 e8 05 e8       	if ((r1 & 536870912) == 0) goto 10 <imd_isr+0x1C : 10809e >			  ## imd.c:143:10
  108094:    01 60             	r1 = [r0+0] 			  ## imd.c:146:14
  108096:    b1 ee ff 0f       	ifs (r1 <= -1) {			  ## imd.c:146:14
  10809a:    00 ef 80 04       		[r0+0] |= 0x40000000
                               	}			  ## imd.c:147:20
  10809e:    c5 ff 00 c8 10 00 	r5 = 1099776 <backlight_status : 10c800 >
  1080a4:    50 6f             	r0 = [r5+60] 			  ## imd.c:45:9
  1080a6:    c4 ff 70 c4 10 00 	r4 = 1098864 <imd_pap_io : 10c470 >
  1080ac:    00 44             	if (r0 == 0) goto 8 <imd_isr+0x34 : 1080b6 >
  1080ae:    d0 ec 44 04       	r0 = [r4+68]			  ## imd.c:165:18
  1080b2:    00 41             	if (r0 == 0) goto 2 <imd_isr+0x34 : 1080b6 >
  1080b4:    c0 00             	call r0			  ## imd.c:166:3
  1080b6:    d0 ec 50 04       	r0 = [r5+64]			  ## imd.c:45:9
  1080ba:    00 43             	if (r0 == 0) goto 6 <imd_isr+0x40 : 1080c2 >
  1080bc:    40 65             	r0 = [r4+20] 			  ## imd.c:169:18
  1080be:    00 41             	if (r0 == 0) goto 2 <imd_isr+0x40 : 1080c2 >
  1080c0:    c0 00             	call r0			  ## imd.c:170:3
  1080c2:    d0 ec 54 04       	r0 = [r5+68]			  ## imd.c:45:9
  1080c6:    00 43             	if (r0 == 0) goto 6 <imd_isr+0x4C : 1080ce >
  1080c8:    40 6b             	r0 = [r4+44] 			  ## imd.c:173:18
  1080ca:    00 41             	if (r0 == 0) goto 2 <imd_isr+0x4C : 1080ce >
  1080cc:    c0 00             	call r0			  ## imd.c:174:3
  1080ce:    d4 e8 3f 00       	{r5-r0} = [sp++]			  ## imd.c:176:1
  1080d2:    a9 04             	{psr, rets, reti} = [sp++]			  ## imd.c:176:1
  1080d4:    81 00             	rti			  ## imd.c:176:1


imd_pap_init:
  1080d6:    7a 04             	[--sp] = {rets, r10-r4}			  ## imd_mcu.c:48:0
  1080d8:    04 16             	r4 = r0			  ## imd_mcu.c:48:0
  1080da:    c5 ff 88 b8 10 00 	r5 = 1095816 <ui_cfg_data+0x3C : 10b888 >			  ## imd_mcu.c:48:0
  1080e0:    00 e1 dc 50       	r0 = r5 + 220			  ## imd_mcu.c:50:2
  1080e4:    80 ff 1e 7d f1 ff 	call -951010 <puts : 1fe08 >			  ## imd_mcu.c:50:2
  1080ea:    14 51             	if (r4 == 0) goto 98 <imd_pap_init+0x78 : 10814e >			  ## imd_mcu.c:50:2
  1080ec:    d0 ec 48 15       	r1 = [r4+88]
  1080f0:    11 5d             	if (r1 == 0) goto 122 <imd_pap_init+0x96 : 10816c >
  1080f2:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd_mcu.c:55:9
  1080f8:    84 68             	[r0+32] = r4			  ## imd_mcu.c:54:8
  1080fa:    81 69             	[r0+36] = r1			  ## imd_mcu.c:55:9
  1080fc:    c0 ff 18 2d fe 00 	r0 = 16657688 <_HEAP_END+0xD67D18 : fe2d18 >
  108102:    c0 ef c0 0a       	[r0+0] &= 0xFFF9FFFF			  ## imd_mcu.c:60:2
  108106:    c0 ef c0 09       	[r0+0] &= 0xFFE7FFFF			  ## imd_mcu.c:61:2
  10810a:    c0 ef c0 08       	[r0+0] &= 0xFF9FFFFF			  ## imd_mcu.c:62:2
  10810e:    d9 24             	r1 += 100			  ## imd_mcu.c:62:2
  108110:    43 f0 f0 0f       	r3 = 4080  # <bss_size+0x71C : ff0 >			  ## imd_mcu.c:62:2
  108114:    16 63             		 r6 = [r1+12] 			  ## imd_mcu.c:64:18
  108116:    14 64             	r4 = [r1+16] 			  ## imd_mcu.c:64:18
  108118:    ca ff 08 50 fd 00 	r10 = 16601096 <_HEAP_END+0xD5A008 : fd5008 >
  10811e:    26 56             	if (r6 == 0) goto 172 <imd_pap_init+0xF6 : 1081cc >
  108120:    14 54             	if (r4 == 0) goto 104 <imd_pap_init+0xB4 : 10818a >
  108122:    84 e8 32 60       	if (r6 != r4) goto 100 <imd_pap_init+0xB4 : 10818a >
  108126:    00 e1 6a 53       	r0 = r5 + 874			  ## imd_mcu.c:65:3
  10812a:    80 ff d4 7c f1 ff 	call -951084 <printf : 1fe04 >			  ## imd_mcu.c:65:3
  108130:    00 e1 d6 51       	r0 = r5 + 470			  ## imd_mcu.c:66:3
  108134:    02 e1 30 56       	r2 = r5 + 1584			  ## imd_mcu.c:66:3
  108138:    41 20             	r1 = 0			  ## imd_mcu.c:66:3
  10813a:    53 22             	r3 = 66			  ## imd_mcu.c:66:3
  10813c:    80 ff c2 7c f1 ff 	call -951102 <printf : 1fe04 >			  ## imd_mcu.c:66:3
  108142:    00 e1 59 51       	r0 = r5 + 345			  ## imd_mcu.c:66:3
  108146:    80 ff b8 7c f1 ff 	call -951112 <printf : 1fe04 >			  ## imd_mcu.c:66:3
  10814c:    f7 9f             	goto -2 <imd_pap_init+0x76 : 10814c >			  ## imd_mcu.c:66:3
  10814e:    00 e1 d6 51       	r0 = r5 + 470			  ## imd_mcu.c:52:2
  108152:    02 e1 30 56       	r2 = r5 + 1584			  ## imd_mcu.c:52:2
  108156:    41 20             	r1 = 0			  ## imd_mcu.c:52:2
  108158:    4b 34             	r3 = 52			  ## imd_mcu.c:52:2
  10815a:    80 ff a4 7c f1 ff 	call -951132 <printf : 1fe04 >			  ## imd_mcu.c:52:2
  108160:    00 e1 7e 51       	r0 = r5 + 382			  ## imd_mcu.c:52:2
  108164:    80 ff 9a 7c f1 ff 	call -951142 <printf : 1fe04 >			  ## imd_mcu.c:52:2
  10816a:    f7 9f             	goto -2 <imd_pap_init+0x94 : 10816a >			  ## imd_mcu.c:52:2
  10816c:    00 e1 d6 51       	r0 = r5 + 470			  ## imd_mcu.c:53:2
  108170:    02 e1 30 56       	r2 = r5 + 1584			  ## imd_mcu.c:53:2
  108174:    41 20             	r1 = 0			  ## imd_mcu.c:53:2
  108176:    4b 35             	r3 = 53			  ## imd_mcu.c:53:2
  108178:    80 ff 86 7c f1 ff 	call -951162 <printf : 1fe04 >			  ## imd_mcu.c:53:2
  10817e:    00 e1 23 52       	r0 = r5 + 547			  ## imd_mcu.c:53:2
  108182:    80 ff 7c 7c f1 ff 	call -951172 <printf : 1fe04 >			  ## imd_mcu.c:53:2
  108188:    f7 9f             	goto -2 <imd_pap_init+0xB2 : 108188 >			  ## imd_mcu.c:53:2
  10818a:    fe 3f             	r6 += -1			  ## imd_mcu.c:69:2
  10818c:    06 fc 1e 04       	if (r6 > 2) goto 60 <imd_pap_init+0xF6 : 1081cc >			  ## imd_mcu.c:69:2
  108190:    08 e1 0c 50       	r8 = r5 + 12			  ## imd_mcu.c:69:2
  108194:    07 e1 48 50       	r7 = r5 + 72			  ## imd_mcu.c:69:2
  108198:    d8 ec 7a 96       	r9 = [r7+r6<<2]			  ## imd_mcu.c:69:2
  10819c:    03 60             	r3 = [r0+0] 			  ## imd_mcu.c:69:2
  10819e:    d8 ec 8a 76       	r7 = [r8+r6<<2]			  ## imd_mcu.c:69:2
  1081a2:    90 e1 32 39       	r3 = r3 & r9			  ## imd_mcu.c:69:2
  1081a6:    90 e1 30 87       	r8 = r3 | r7			  ## imd_mcu.c:69:2
  1081aa:    5f 98             	r7 = r5 + 24			  ## imd_mcu.c:69:2
  1081ac:    d8 ec 7a 76       	r7 = [r7+r6<<2]			  ## imd_mcu.c:69:2
  1081b0:    03 e1 78 50       	r3 = r5 + 120			  ## imd_mcu.c:69:2
  1081b4:    d8 ec 3a 36       	r3 = [r3+r6<<2]			  ## imd_mcu.c:69:2
  1081b8:    d0 ec 01 80       	[r0+0] = r8			  ## imd_mcu.c:69:2
  1081bc:    64 e8 14 a7       	[r10+20] |= r7			  ## imd_mcu.c:69:2
  1081c0:    64 e8 04 a7       	[r10+4] |= r7			  ## imd_mcu.c:69:2
  1081c4:    64 e8 02 a3       	[r10+0] &= r3			  ## imd_mcu.c:69:2
  1081c8:    d8 ec 5a 36       	r3 = [r5+r6<<2]			  ## imd_mcu.c:69:2
  1081cc:    fc 3f             	r4 += -1			  ## imd_mcu.c:93:2
  1081ce:    04 fc 1f 04       	if (r4 > 2) goto 62 <imd_pap_init+0x13A : 108210 >			  ## imd_mcu.c:93:2
  1081d2:    06 e1 24 50       	r6 = r5 + 36			  ## imd_mcu.c:93:2
  1081d6:    07 e1 48 50       	r7 = r5 + 72			  ## imd_mcu.c:93:2
  1081da:    d8 ec 7a 84       	r8 = [r7+r4<<2]			  ## imd_mcu.c:93:2
  1081de:    02 60             	r2 = [r0+0] 			  ## imd_mcu.c:93:2
  1081e0:    d8 ec 6a 64       	r6 = [r6+r4<<2]			  ## imd_mcu.c:93:2
  1081e4:    5f 98             	r7 = r5 + 24			  ## imd_mcu.c:93:2
  1081e6:    d8 ec 7a 74       	r7 = [r7+r4<<2]			  ## imd_mcu.c:93:2
  1081ea:    90 e1 22 28       	r2 = r2 & r8			  ## imd_mcu.c:93:2
  1081ee:    62 19             	r2 |= r6			  ## imd_mcu.c:93:2
  1081f0:    82 60             	[r0+0] = r2			  ## imd_mcu.c:93:2
  1081f2:    64 e8 14 a7       	[r10+20] |= r7			  ## imd_mcu.c:93:2
  1081f6:    02 e1 78 50       	r2 = r5 + 120			  ## imd_mcu.c:93:2
  1081fa:    d8 ec 2a 24       	r2 = [r2+r4<<2]			  ## imd_mcu.c:93:2
  1081fe:    64 e8 04 a7       	[r10+4] |= r7			  ## imd_mcu.c:93:2
  108202:    05 e1 84 50       	r5 = r5 + 132			  ## imd_mcu.c:93:2
  108206:    d8 ec 5a 44       	r4 = [r5+r4<<2]			  ## imd_mcu.c:93:2
  10820a:    64 e8 02 a2       	[r10+0] &= r2			  ## imd_mcu.c:93:2
  10820e:    43 19             	r3 |= r4			  ## imd_mcu.c:93:2
  108210:    02 60             	r2 = [r0+0] 			  ## imd_mcu.c:117:2
  108212:    a2 ac             	r2 = r2 >> 12			  ## imd_mcu.c:117:2
  108214:    a3 e1 50 26       	r3 <= insert(r2, p:12, l:20)			  ## imd_mcu.c:117:2
  108218:    83 60             	[r0+0] = r3			  ## imd_mcu.c:117:2
  10821a:    12 60             	r2 = [r1+0] 			  ## imd_mcu.c:119:22
  10821c:    02 49             	if (r2 == 0) goto 18 <imd_pap_init+0x15A : 108230 >			  ## imd_mcu.c:119:2
  10821e:    02 f8 0b 04       	if (r2 == 2) goto 22 <imd_pap_init+0x162 : 108238 >
  108222:    82 f8 0e 02       	if (r2 != 1) goto 28 <imd_pap_init+0x16C : 108242 >
  108226:    02 64             	r2 = [r0+16] 			  ## imd_mcu.c:121:3
  108228:    72 e1 c0 20       	r2 = r2 & 0xFFFFFF3F			  ## imd_mcu.c:121:3
  10822c:    32 27             	r2 |= 128			  ## imd_mcu.c:121:3
  10822e:    04 88             	goto 16 <imd_pap_init+0x16A : 108240 >			  ## imd_mcu.c:121:3
  108230:    02 64             	r2 = [r0+16] 			  ## imd_mcu.c:127:3
  108232:    72 e1 c0 20       	r2 = r2 & 0xFFFFFF3F			  ## imd_mcu.c:127:3
  108236:    04 84             	goto 8 <imd_pap_init+0x16A : 108240 >			  ## imd_mcu.c:127:3
  108238:    02 64             	r2 = [r0+16] 			  ## imd_mcu.c:124:3
  10823a:    72 e1 c0 20       	r2 = r2 & 0xFFFFFF3F			  ## imd_mcu.c:124:3
  10823e:    32 26             	r2 |= 64			  ## imd_mcu.c:124:3
  108240:    82 64             	[r0+16] = r2
  108242:    c4 ef 00 0f       	[r0+16] &= 0xFFFFFDFF			  ## imd_mcu.c:131:2
  108246:    c4 ef 80 0e       	[r0+16] &= 0xFFFFFBFF			  ## imd_mcu.c:132:2
  10824a:    c4 ef 00 0e       	[r0+16] &= 0xFFFFF7FF			  ## imd_mcu.c:132:2
  10824e:    14 61             	r4 = [r1+4] 			  ## imd_mcu.c:140:18
  108250:    02 64             	r2 = [r0+16] 			  ## imd_mcu.c:140:18
  108252:    73 e1 80 2d       	r3 = r2 & 0xFFFFEFFF			  ## imd_mcu.c:140:18
  108256:    32 2c             	r2 |= 4096			  ## imd_mcu.c:141:3
  108258:    84 41             	if (r4 != 0) goto 2 <imd_pap_init+0x186 : 10825c >			  ## imd_mcu.c:141:3
  10825a:    32 16             	r2 = r3			  ## imd_mcu.c:140:6
  10825c:    82 64             	[r0+16] = r2
  10825e:    13 62             	r3 = [r1+8] 			  ## imd_mcu.c:146:18
  108260:    01 64             	r1 = [r0+16] 			  ## imd_mcu.c:146:18
  108262:    72 e1 00 1d       	r2 = r1 & 0xFFFFDFFF			  ## imd_mcu.c:146:18
  108266:    31 2d             	r1 |= 8192			  ## imd_mcu.c:147:3
  108268:    83 41             	if (r3 != 0) goto 2 <imd_pap_init+0x196 : 10826c >			  ## imd_mcu.c:147:3
  10826a:    21 16             	r1 = r2			  ## imd_mcu.c:146:6
  10826c:    81 64             	[r0+16] = r1
  10826e:    c5 ef 1f 00       	[r0+20] &= 0xFFFFFFE0			  ## imd_mcu.c:153:2
  108272:    01 65             	r1 = [r0+20] 			  ## imd_mcu.c:154:2
  108274:    71 e1 78 1f       	r1 = r1 & 0xFFFFFC1F			  ## imd_mcu.c:154:2
  108278:    31 25             	r1 |= 32			  ## imd_mcu.c:154:2
  10827a:    81 65             	[r0+20] = r1			  ## imd_mcu.c:154:2
  10827c:    c5 ef f8 0c       	[r0+20] &= 0xFFFF83FF			  ## imd_mcu.c:155:2
  108280:    c5 ef 78 0a       	[r0+20] &= 0xFFF07FFF			  ## imd_mcu.c:156:2
  108284:    01 65             	r1 = [r0+20] 			  ## imd_mcu.c:157:2
  108286:    71 e1 f8 17       	r1 = r1 & 0xFE0FFFFF			  ## imd_mcu.c:157:2
  10828a:    31 34             	r1 |= 1048576			  ## imd_mcu.c:157:2
  10828c:    81 65             	[r0+20] = r1			  ## imd_mcu.c:157:2
  10828e:    c5 ef 78 05       	[r0+20] &= 0xC1FFFFFF			  ## imd_mcu.c:158:2
  108292:    04 ef 01 00       	[r0+16] |= 0x1			  ## imd_mcu.c:168:2
  108296:    5a 04             	{pc, r10-r4} = [sp++]			  ## imd_mcu.c:169:1


imd_pap_tx_cmd:
  108298:    c1 ff 28 2d fe 00 	r1 = 16657704 <_HEAP_END+0xD67D28 : fe2d28 >			  ## imd_mcu.c:173:0
  10829e:    c0 ef 80 1f       	[r1+0] &= 0xFFFFFEFF			  ## imd_mcu.c:174:2
  1082a2:    c0 ef 80 17       	[r1+0] &= 0xFEFFFFFF			  ## imd_mcu.c:175:2
  1082a6:    c0 ef 60 16       	[r1+0] &= 0xF1FFFFFF			  ## imd_mcu.c:176:2
  1082aa:    00 b8             	r0 = r0 << 24			  ## imd_mcu.c:177:27
  1082ac:    90 62             	[r1+8] = r0			  ## imd_mcu.c:177:21
  1082ae:    00 ef 02 10       	[r1+0] |= 0x2			  ## imd_mcu.c:179:22
  1082b2:    10 60             	r0 = [r1+0] 			  ## imd_mcu.c:180:19
  1082b4:    70 fe fd ff       	ifs (r0 > -1) goto -6 <imd_pap_tx_cmd+0x1A : 1082b2 >			  ## imd_mcu.c:180:2
  1082b8:    00 ef 80 14       	[r1+0] |= 0x40000000			  ## imd_mcu.c:181:22
  1082bc:    80 00             	rts			  ## imd_mcu.c:182:1


imd_pap_tx_dat:
  1082be:    74 04             	[--sp] = {rets, r4}			  ## imd_mcu.c:185:0
  1082c0:    c2 ff 28 2d fe 00 	r2 = 16657704 <_HEAP_END+0xD67D28 : fe2d28 >			  ## imd_mcu.c:185:0
  1082c6:    c0 ef 80 2f       	[r2+0] &= 0xFFFFFEFF			  ## imd_mcu.c:186:2
  1082ca:    c0 ef 80 27       	[r2+0] &= 0xFEFFFFFF			  ## imd_mcu.c:187:2
  1082ce:    14 b9             	r4 = r1 << 25			  ## imd_mcu.c:188:2
  1082d0:    e4 f0 60 46       	r4 = r4 + 0xE000000  #			  ## imd_mcu.c:188:2
  1082d4:    23 60             		 r3 = [r2+0] 			  ## imd_mcu.c:188:2
  1082d6:    c4 b9             	r4 = r4 >> 25			  ## imd_mcu.c:188:2
  1082d8:    a3 e1 8c 4c       	r3 <= insert(r4, p:25, l:3)			  ## imd_mcu.c:188:2
  1082dc:    a1 f0 04 10       	r1 = 0x4 - r1  #			  ## imd_mcu.c:189:35
  1082e0:    a3 60             		 [r2+0] = r3			  ## imd_mcu.c:188:2
  1082e2:    11 a3             	r1 = r1 << 3			  ## imd_mcu.c:189:47
  1082e4:    10 1a             	r0 <<= r1			  ## imd_mcu.c:189:28
  1082e6:    a0 62             	[r2+8] = r0			  ## imd_mcu.c:189:21
  1082e8:    00 ef 02 20       	[r2+0] |= 0x2			  ## imd_mcu.c:191:22
  1082ec:    20 60             	r0 = [r2+0] 			  ## imd_mcu.c:192:19
  1082ee:    70 fe fd ff       	ifs (r0 > -1) goto -6 <imd_pap_tx_dat+0x2E : 1082ec >			  ## imd_mcu.c:192:2
  1082f2:    00 ef 80 24       	[r2+0] |= 0x40000000			  ## imd_mcu.c:193:22
  1082f6:    54 04             	{pc, r4} = [sp++]			  ## imd_mcu.c:194:1


lcd_pap_write_cmd:
  1082f8:    77 04             	[--sp] = {rets, r7-r4}			  ## imd_mcu.c:278:0
  1082fa:    24 16             	r4 = r2			  ## imd_mcu.c:278:0
  1082fc:    15 16             	r5 = r1			  ## imd_mcu.c:278:0
  1082fe:    07 16             	r7 = r0			  ## imd_mcu.c:278:0
  108300:    40 20             	r0 = 0			  ## imd_mcu.c:283:2
  108302:    46 20             	r6 = 0			  ## imd_mcu.c:283:2
  108304:    bf ea 94 fe       	call -728 <lcd_cs : 108030 >			  ## imd_mcu.c:283:2
  108308:    40 20             	r0 = 0			  ## imd_mcu.c:284:2
  10830a:    bf ea 9c fe       	call -712 <lcd_dc : 108046 >			  ## imd_mcu.c:284:2
  10830e:    40 20             	r0 = 0			  ## imd_mcu.c:285:2
  108310:    bf ea a4 fe       	call -696 <lcd_dat_dir : 10805c >			  ## imd_mcu.c:285:2
  108314:    70 16             	r0 = r7			  ## imd_mcu.c:286:2
  108316:    61 80             	call -128 <imd_pap_tx_cmd : 108298 >			  ## imd_mcu.c:286:2
  108318:    04 5a             	if (r4 == 0) goto 52 <lcd_pap_write_cmd+0x56 : 10834e >
  10831a:    40 21             	r0 = 1			  ## imd_mcu.c:289:3
  10831c:    bf ea 93 fe       	call -730 <lcd_dc : 108046 >			  ## imd_mcu.c:289:3
  108320:    47 20             	r7 = 0
  108322:    04 93             	goto 38 <lcd_pap_write_cmd+0x52 : 10834a >
  108324:    d8 1d             	r0 = r5 + r7			  ## imd_mcu.c:292:9
  108326:    c9 1f             	r1 = r4 - r7			  ## imd_mcu.c:291:16
  108328:    31 ed 04 00       	ifs (r1 >= 4) {			  ## imd_mcu.c:291:16
  10832c:    41 24             		r1 = 4
                               	}			  ## imd_mcu.c:291:10
  10832e:    11 17             	r1 = r1.b0 (u)
  108330:    42 20             	r2 = 0
  108332:    04 86             	goto 12 <lcd_pap_write_cmd+0x48 : 108340 >
  108334:    d8 ee 00 32       	r3 = b[r0+r2] (u)			  ## imd_mcu.c:294:15
  108338:    a3 e1 60 64       	r3 <= insert(r6, p:8, l:24)			  ## imd_mcu.c:294:12
  10833c:    c2 21             	r2 += 1			  ## imd_mcu.c:292:26
  10833e:    36 16             	r6 = r3
  108340:    81 ed f8 21       	ifs (r2 < r1) goto -16 <lcd_pap_write_cmd+0x3C : 108334 >
  108344:    60 16             	r0 = r6			  ## imd_mcu.c:296:4
  108346:    51 9b             	call -138 <imd_pap_tx_dat : 1082be >			  ## imd_mcu.c:296:4
  108348:    c7 24             	r7 += 4			  ## imd_mcu.c:290:26
  10834a:    07 ee eb 41       	ifs (r4 > r7) goto -42 <lcd_pap_write_cmd+0x2C : 108324 >
  10834e:    40 21             	r0 = 1			  ## imd_mcu.c:300:2
  108350:    bf ea 6e fe       	call -804 <lcd_cs : 108030 >			  ## imd_mcu.c:300:2
  108354:    57 04             	{pc, r7-r4} = [sp++]			  ## imd_mcu.c:301:1


lcd_pap_read_cmd:
  108356:    79 04             	[--sp] = {rets, r9-r4}			  ## imd_mcu.c:305:0
  108358:    28 16             	r8 = r2			  ## imd_mcu.c:305:0
  10835a:    14 16             	r4 = r1			  ## imd_mcu.c:305:0
  10835c:    06 16             	r6 = r0			  ## imd_mcu.c:305:0
  10835e:    40 20             	r0 = 0			  ## imd_mcu.c:310:2
  108360:    47 20             	r7 = 0			  ## imd_mcu.c:310:2
  108362:    bf ea 65 fe       	call -822 <lcd_cs : 108030 >			  ## imd_mcu.c:310:2
  108366:    40 20             	r0 = 0			  ## imd_mcu.c:311:2
  108368:    bf ea 6d fe       	call -806 <lcd_dc : 108046 >			  ## imd_mcu.c:311:2
  10836c:    40 20             	r0 = 0			  ## imd_mcu.c:312:2
  10836e:    bf ea 75 fe       	call -790 <lcd_dat_dir : 10805c >			  ## imd_mcu.c:312:2
  108372:    60 16             	r0 = r6			  ## imd_mcu.c:313:2
  108374:    41 91             	call -222 <imd_pap_tx_cmd : 108298 >			  ## imd_mcu.c:313:2
  108376:    08 f8 3f 00       	if (r8 == 0) goto 126 <lcd_pap_read_cmd+0xA2 : 1083f8 >
  10837a:    40 21             	r0 = 1			  ## imd_mcu.c:316:3
  10837c:    bf ea 63 fe       	call -826 <lcd_dc : 108046 >			  ## imd_mcu.c:316:3
  108380:    40 21             	r0 = 1			  ## imd_mcu.c:317:3
  108382:    bf ea 6b fe       	call -810 <lcd_dat_dir : 10805c >			  ## imd_mcu.c:317:3
  108386:    50 e1 ff 83       	r0 = r8 ^ 0xFFFFFFFF			  ## imd_mcu.c:318:8
  10838a:    49 e0 ff 00       	r9 = 255 <UPDATE_SIZE+0x7F : ff >			  ## imd_mcu.c:318:8
  10838e:    c2 ff 28 2d fe 00 	r2 = 16657704 <_HEAP_END+0xD67D28 : fe2d28 >			  ## imd_mcu.c:318:8
  108394:    14 8b             	goto 86 <lcd_pap_read_cmd+0x96 : 1083ec >			  ## imd_mcu.c:318:8
  108396:    00 ef 80 2f       	[r2+0] |= 0x100			  ## imd_mcu.c:200:2
  10839a:    c0 ef 80 27       	[r2+0] &= 0xFEFFFFFF			  ## imd_mcu.c:201:2
  10839e:    90 e1 93 33       	r3 = r9 & ~r3			  ## imd_mcu.c:318:17
  1083a2:    b4 e0 82 67       	r6 = r8 - r7			  ## imd_mcu.c:319:16
  1083a6:    36 ed 04 00       	ifs (r6 >= 4) {			  ## imd_mcu.c:319:16
  1083aa:    46 24             		r6 = 4
                               	}			  ## imd_mcu.c:319:10
  1083ac:    61 b9             	r1 = r6 << 25			  ## imd_mcu.c:202:2
  1083ae:    e1 f0 60 16       	r1 = r1 + 0xE000000  #			  ## imd_mcu.c:202:2
  1083b2:    25 60             		 r5 = [r2+0] 			  ## imd_mcu.c:202:2
  1083b4:    91 b9             	r1 = r1 >> 25			  ## imd_mcu.c:202:2
  1083b6:    a5 e1 8c 1c       	r5 <= insert(r1, p:25, l:3)			  ## imd_mcu.c:202:2
  1083ba:    a5 60             	[r2+0] = r5			  ## imd_mcu.c:202:2
  1083bc:    00 ef 02 20       	[r2+0] |= 0x2			  ## imd_mcu.c:204:22
  1083c0:    21 60             	r1 = [r2+0] 			  ## imd_mcu.c:205:19
  1083c2:    71 fe fd ff       	ifs (r1 > -1) goto -6 <lcd_pap_read_cmd+0x6A : 1083c0 >			  ## imd_mcu.c:205:2
  1083c6:    00 ef 80 24       	[r2+0] |= 0x40000000			  ## imd_mcu.c:206:22
  1083ca:    65 d7             	r5 = r6.b0 (u)  #			  ## imd_mcu.c:202:2
  1083cc:    21 62             		 r1 = [r2+8] 			  ## imd_mcu.c:208:20
  1083ce:    a5 e0 04 50       	r5 = 0x4 - r5			  ## imd_mcu.c:208:38
  1083d2:    55 a3             	r5 = r5 << 3			  ## imd_mcu.c:208:50
  1083d4:    c8 e1 10 65       	r6 = r1 << r5			  ## imd_mcu.c:208:31
  1083d8:    45 16             	r5 = r4
  1083da:    04 84             	goto 8 <lcd_pap_read_cmd+0x8E : 1083e4 >
  1083dc:    e1 b8             	r1 = r6 >> 24			  ## imd_mcu.c:211:16
  1083de:    d1 07             	b[r5++=1] = r1			  ## imd_mcu.c:211:10
  1083e0:    fb 3f             	r3 += -1			  ## imd_mcu.c:210:2
  1083e2:    66 a8             	r6 = r6 << 8			  ## imd_mcu.c:212:7
  1083e4:    f3 5b             	if (r3 != 0) goto -10 <lcd_pap_read_cmd+0x86 : 1083dc >
  1083e6:    c0 24             	r0 += 4			  ## imd_mcu.c:318:3
  1083e8:    c4 24             	r4 += 4			  ## imd_mcu.c:318:3
  1083ea:    c7 24             	r7 += 4			  ## imd_mcu.c:318:26
  1083ec:    03 16             	r3 = r0			  ## imd_mcu.c:318:17
  1083ee:    b0 ee fb 0f       	ifs (r0 <= -5) {			  ## imd_mcu.c:318:17
  1083f2:    13 3b             		r3 = -5
                               	}			  ## imd_mcu.c:318:17
  1083f4:    07 ee cf 81       	ifs (r8 > r7) goto -98 <lcd_pap_read_cmd+0x40 : 108396 >			  ## imd_mcu.c:318:17
  1083f8:    40 21             	r0 = 1			  ## imd_mcu.c:324:2
  1083fa:    bf ea 19 fe       	call -974 <lcd_cs : 108030 >			  ## imd_mcu.c:324:2
  1083fe:    59 04             	{pc, r9-r4} = [sp++]			  ## imd_mcu.c:325:1


lcd_pap_tx_cmd:
  108400:    74 04             	[--sp] = {rets, r4}			  ## imd_mcu.c:217:0
  108402:    04 16             	r4 = r0			  ## imd_mcu.c:217:0
  108404:    40 20             	r0 = 0			  ## imd_mcu.c:218:2
  108406:    bf ea 13 fe       	call -986 <lcd_cs : 108030 >			  ## imd_mcu.c:218:2
  10840a:    40 20             	r0 = 0			  ## imd_mcu.c:219:2
  10840c:    bf ea 1b fe       	call -970 <lcd_dc : 108046 >			  ## imd_mcu.c:219:2
  108410:    40 20             	r0 = 0			  ## imd_mcu.c:220:2
  108412:    bf ea 23 fe       	call -954 <lcd_dat_dir : 10805c >			  ## imd_mcu.c:220:2
  108416:    40 16             	r0 = r4			  ## imd_mcu.c:221:2
  108418:    bf ea 3e ff       	call -388 <imd_pap_tx_cmd : 108298 >			  ## imd_mcu.c:221:2
  10841c:    40 21             	r0 = 1			  ## imd_mcu.c:222:2
  10841e:    bf ea 07 fe       	call -1010 <lcd_cs : 108030 >			  ## imd_mcu.c:222:2
  108422:    54 04             	{pc, r4} = [sp++]			  ## imd_mcu.c:223:1


lcd_pap_tx_dat:
  108424:    74 04             	[--sp] = {rets, r4}			  ## imd_mcu.c:226:0
  108426:    04 16             	r4 = r0			  ## imd_mcu.c:226:0
  108428:    40 20             	r0 = 0			  ## imd_mcu.c:227:2
  10842a:    bf ea 01 fe       	call -1022 <lcd_cs : 108030 >			  ## imd_mcu.c:227:2
  10842e:    40 21             	r0 = 1			  ## imd_mcu.c:228:2
  108430:    bf ea 09 fe       	call -1006 <lcd_dc : 108046 >			  ## imd_mcu.c:228:2
  108434:    40 20             	r0 = 0			  ## imd_mcu.c:229:2
  108436:    bf ea 11 fe       	call -990 <lcd_dat_dir : 10805c >			  ## imd_mcu.c:229:2
  10843a:    41 24             	r1 = 4			  ## imd_mcu.c:230:2
  10843c:    40 16             	r0 = r4			  ## imd_mcu.c:230:2
  10843e:    bf ea 3e ff       	call -388 <imd_pap_tx_dat : 1082be >			  ## imd_mcu.c:230:2
  108442:    40 21             	r0 = 1			  ## imd_mcu.c:231:2
  108444:    bf ea f4 fd       	call -1048 <lcd_cs : 108030 >			  ## imd_mcu.c:231:2
  108448:    54 04             	{pc, r4} = [sp++]			  ## imd_mcu.c:232:1


lcd_pap_set_draw_area:
  10844a:    77 04             	[--sp] = {rets, r7-r4}			  ## imd_mcu.c:263:0
  10844c:    e2 9f             	sp += -4			  ## imd_mcu.c:263:0
  10844e:    34 16             	r4 = r3			  ## imd_mcu.c:263:0
  108450:    25 d6             	r5 = r2  #			  ## imd_mcu.c:263:0
  108452:    84 20             		 [sp] = r4			  ## imd_mcu.c:264:2
  108454:    16 16             	r6 = r1
  108456:    07 16             	r7 = r0
  108458:    c0 ff 48 9a 10 00 	r0 = 1088072 <realloc+0x426 : 109a48 >			  ## imd_mcu.c:264:2
  10845e:    71 16             	r1 = r7			  ## imd_mcu.c:264:2
  108460:    62 16             	r2 = r6			  ## imd_mcu.c:264:2
  108462:    53 16             	r3 = r5			  ## imd_mcu.c:264:2
  108464:    80 ff 9a 79 f1 ff 	call -951910 <printf : 1fe04 >			  ## imd_mcu.c:264:2
  10846a:    48 2a             	r0 = 42			  ## imd_mcu.c:266:2
  10846c:    61 89             	call -110 <lcd_pap_tx_cmd : 108400 >			  ## imd_mcu.c:266:2
  10846e:    70 b0             	r0 = r7 << 16			  ## imd_mcu.c:267:24
  108470:    60 19             	r0 |= r6			  ## imd_mcu.c:267:30
  108472:    61 98             	call -80 <lcd_pap_tx_dat : 108424 >			  ## imd_mcu.c:267:2
  108474:    48 2b             	r0 = 43			  ## imd_mcu.c:268:2
  108476:    61 84             	call -120 <lcd_pap_tx_cmd : 108400 >			  ## imd_mcu.c:268:2
  108478:    50 b0             	r0 = r5 << 16			  ## imd_mcu.c:269:24
  10847a:    40 19             	r0 |= r4			  ## imd_mcu.c:269:30
  10847c:    61 93             	call -90 <lcd_pap_tx_dat : 108424 >			  ## imd_mcu.c:269:2
  10847e:    48 2c             	r0 = 44			  ## imd_mcu.c:270:2
  108480:    51 9f             	call -130 <lcd_pap_tx_cmd : 108400 >			  ## imd_mcu.c:270:2
  108482:    40 20             	r0 = 0			  ## imd_mcu.c:272:2
  108484:    bf ea d4 fd       	call -1112 <lcd_cs : 108030 >			  ## imd_mcu.c:272:2
  108488:    40 21             	r0 = 1			  ## imd_mcu.c:273:2
  10848a:    bf ea dc fd       	call -1096 <lcd_dc : 108046 >			  ## imd_mcu.c:273:2
  10848e:    02 81             	sp += 4			  ## imd_mcu.c:273:2
  108490:    57 04             	{pc, r7-r4} = [sp++]			  ## imd_mcu.c:274:1


lcd_pap_draw:
  108492:    74 04             	[--sp] = {rets, r4}			  ## imd_mcu.c:328:0
  108494:    c0 ff 80 9b 10 00 	r0 = 1088384 <realloc+0x55E : 109b80 >			  ## imd_mcu.c:329:2
  10849a:    80 ff 68 79 f1 ff 	call -951960 <puts : 1fe08 >			  ## imd_mcu.c:329:2
  1084a0:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd_mcu.c:331:6
  1084a6:    00 69             	r0 = [r0+36] 			  ## imd_mcu.c:331:6
  1084a8:    d0 ec 04 06       	r0 = [r0+100]			  ## imd_mcu.c:331:18
  1084ac:    c4 ff 00 2d fe 00 	r4 = 16657664 <_HEAP_END+0xD67D00 : fe2d00 >			  ## imd_mcu.c:331:18
  1084b2:    00 4b             	if (r0 == 0) goto 22 <lcd_pap_draw+0x38 : 1084ca >			  ## imd_mcu.c:331:18
  1084b4:    41 6a             	r1 = [r4+40] 
  1084b6:    71 e1 c0 10       	r1 = r1 & 0xFFFFFF3F
  1084ba:    b0 e8 02 60       	if (r0 != 2) {
  1084be:    40 30             		r0 = 16
  1084c0:    62 20             		r2 = 128
                               	} else {
  1084c2:    40 38             		r0 = 24
  1084c4:    52 20             		r2 = 64
                               	}
  1084c6:    21 19             	r1 |= r2
  1084c8:    04 84             	goto 8 <lcd_pap_draw+0x40 : 1084d2 >
  1084ca:    40 6a             	r0 = [r4+40] 			  ## imd_mcu.c:332:3
  1084cc:    71 e1 c0 00       	r1 = r0 & 0xFFFFFF3F			  ## imd_mcu.c:332:3
  1084d0:    40 38             	r0 = 24			  ## imd_mcu.c:332:3
  1084d2:    c1 6a             	[r4+40] = r1
  1084d4:    41 6a             	r1 = [r4+40] 
  1084d6:    71 e1 38 10       	r1 = r1 & 0xFFFFFFC7
  1084da:    10 19             	r0 |= r1
  1084dc:    c0 6a             	[r4+40] = r0
  1084de:    ca ef 80 4f       	[r4+40] &= 0xFFFFFEFF			  ## imd_mcu.c:342:2
  1084e2:    0a ef 80 47       	[r4+40] |= 0x1000000			  ## imd_mcu.c:343:2
  1084e6:    40 20             	r0 = 0			  ## imd_mcu.c:345:2
  1084e8:    bf ea a2 fd       	call -1212 <lcd_cs : 108030 >			  ## imd_mcu.c:345:2
  1084ec:    40 21             	r0 = 1			  ## imd_mcu.c:346:2
  1084ee:    bf ea aa fd       	call -1196 <lcd_dc : 108046 >			  ## imd_mcu.c:346:2
  1084f2:    40 20             	r0 = 0			  ## imd_mcu.c:347:2
  1084f4:    bf ea b2 fd       	call -1180 <lcd_dat_dir : 10805c >			  ## imd_mcu.c:347:2
  1084f8:    40 60             	r0 = [r4+0] 			  ## imd_mcu.c:349:16
  1084fa:    20 ea 00 8d       	if ((r0 & 0x2000) == 0) {			  ## imd_mcu.c:349:16
  1084fe:    00 ef 02 40       		[r4+0] |= 0x2			  ## imd_mcu.c:350:3
  108502:    58 24             		r0 = 100			  ## imd_mcu.c:351:3
  108504:    80 ff 06 bb ff ff 		call -17658
                               	} <delay : 104010 >			  ## imd_mcu.c:351:3
  10850a:    0a ef 02 40       	[r4+40] |= 0x2			  ## imd_mcu.c:353:22
  10850e:    c0 ff a0 9b 10 00 	r0 = 1088416 <realloc+0x57E : 109ba0 >			  ## imd_mcu.c:356:2
  108514:    80 ff ee 78 f1 ff 	call -952082 <puts : 1fe08 >			  ## imd_mcu.c:356:2
  10851a:    54 04             	{pc, r4} = [sp++]			  ## imd_mcu.c:357:1


imd_pap_isr:
  10851c:    74 04             	[--sp] = {rets, r4}			  ## imd_mcu.c:361:0
  10851e:    c0 ff 28 2d fe 00 	r0 = 16657704 <_HEAP_END+0xD67D28 : fe2d28 >			  ## imd_mcu.c:361:0
  108524:    01 60             	r1 = [r0+0] 			  ## imd_mcu.c:365:10
  108526:    51 e8 1b e8       	if ((r1 & 536870912) == 0) goto 54 <imd_pap_isr+0x44 : 108560 >			  ## imd_mcu.c:365:10
  10852a:    01 60             	r1 = [r0+0] 			  ## imd_mcu.c:369:14
  10852c:    71 fe 18 fe       	ifs (r1 > -1) goto 48 <imd_pap_isr+0x44 : 108560 >			  ## imd_mcu.c:369:14
  108530:    00 ef 80 04       	[r0+0] |= 0x40000000			  ## imd_mcu.c:370:23
  108534:    c0 ff 3c 9a 10 00 	r0 = 1088060 <realloc+0x41A : 109a3c >			  ## imd_mcu.c:371:3
  10853a:    80 ff c8 78 f1 ff 	call -952120 <puts : 1fe08 >			  ## imd_mcu.c:371:3
  108540:    40 21             	r0 = 1			  ## imd_mcu.c:372:3
  108542:    44 21             	r4 = 1			  ## imd_mcu.c:372:3
  108544:    bf ea 74 fd       	call -1304 <lcd_cs : 108030 >			  ## imd_mcu.c:372:3
  108548:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd_mcu.c:383:3
  10854e:    00 68             	r0 = [r0+32] 			  ## imd_mcu.c:383:3
  108550:    8c 40             	b[r0+0] = r4			  ## imd_mcu.c:383:18
  108552:    41 20             	r1 = 0			  ## imd_mcu.c:383:18
  108554:    89 41             	b[r0+1] = r1			  ## imd_mcu.c:384:19
  108556:    d0 ec 0c 15       	r1 = [r0+92]			  ## imd_mcu.c:385:14
  10855a:    01 42             	if (r1 == 0) goto 4 <imd_pap_isr+0x44 : 108560 >			  ## imd_mcu.c:385:14
  10855c:    40 20             	r0 = 0			  ## imd_mcu.c:386:4
  10855e:    c1 00             	call r1			  ## imd_mcu.c:386:4
  108560:    54 04             	{pc, r4} = [sp++]			  ## imd_mcu.c:389:1


imd_rgb_init:
  108562:    78 04             	[--sp] = {rets, r8-r4}			  ## imd_rgb.c:39:0
  108564:    c4 ff c4 b8 10 00 	r4 = 1095876 <ui_cfg_data+0x78 : 10b8c4 >			  ## imd_rgb.c:39:0
  10856a:    00 f8 9d 00       	if (r0 == 0) goto 314 <imd_rgb_init+0x146 : 1086a8 >			  ## imd_rgb.c:39:0
  10856e:    d0 ec 08 15       	r1 = [r0+88]			  ## imd_rgb.c:39:0
  108572:    01 f8 a8 00       	if (r1 == 0) goto 336 <imd_rgb_init+0x164 : 1086c6 >			  ## imd_rgb.c:39:0
  108576:    c3 ff 00 c8 10 00 	r3 = 1099776 <backlight_status : 10c800 >			  ## imd_rgb.c:45:9
  10857c:    50 ec 39 02       	d[r3+40] = r1_r0			  ## imd_rgb.c:44:8
  108580:    c8 ff 08 50 fd 00 	r8 = 16601096 <_HEAP_END+0xD5A008 : fd5008 >			  ## imd_rgb.c:44:8
  108586:    c0 ef 80 80       	[r8+0] &= 0xFFFFFF7F			  ## imd_rgb.c:47:16
  10858a:    40 20             	r0 = 0			  ## imd_rgb.c:48:2
  10858c:    bf ea 66 fd       	call -1332 <lcd_dat_dir : 10805c >			  ## imd_rgb.c:48:2
  108590:    c0 ff 00 2d fe 00 	r0 = 16657664 <_HEAP_END+0xD67D00 : fe2d00 >
  108596:    c6 ef c0 0a       	[r0+24] &= 0xFFF9FFFF			  ## imd_rgb.c:54:2
  10859a:    c6 ef c0 09       	[r0+24] &= 0xFFE7FFFF			  ## imd_rgb.c:55:2
  10859e:    c6 ef c0 08       	[r0+24] &= 0xFF9FFFFF			  ## imd_rgb.c:56:2
  1085a2:    31 6b             	r1 = [r3+44] 			  ## imd_rgb.c:58:10
  1085a4:    d9 38             	r1 += 120			  ## imd_rgb.c:58:10
  1085a6:    13 66             	r3 = [r1+24] 			  ## imd_rgb.c:58:22
  1085a8:    35 e1 ff 3f       	r5 = r3 + -1			  ## imd_rgb.c:58:2
  1085ac:    43 e0 f8 0f       	r3 = 4088 <bss_size+0x724 : ff8 >			  ## imd_rgb.c:58:2
  1085b0:    05 fc 1e 04       	if (r5 > 2) goto 60 <imd_rgb_init+0x8E : 1085f0 >			  ## imd_rgb.c:58:2
  1085b4:    4b 98             	r3 = r4 + 24			  ## imd_rgb.c:58:2
  1085b6:    4e 8c             	r6 = r4 + 12			  ## imd_rgb.c:58:2
  1085b8:    d8 ec 6a 65       	r6 = [r6+r5<<2]			  ## imd_rgb.c:58:2
  1085bc:    07 66             	r7 = [r0+24] 			  ## imd_rgb.c:58:2
  1085be:    d8 ec 3a 35       	r3 = [r3+r5<<2]			  ## imd_rgb.c:58:2
  1085c2:    f6 19             	r6 &= r7			  ## imd_rgb.c:58:2
  1085c4:    63 19             	r3 |= r6			  ## imd_rgb.c:58:2
  1085c6:    03 f1 30 40       	r3 = r4 + 48  #			  ## imd_rgb.c:58:2
  1085ca:    83 66             		 [r0+24] = r3			  ## imd_rgb.c:58:2
  1085cc:    06 e1 24 40       	r6 = r4 + 36			  ## imd_rgb.c:58:2
  1085d0:    d8 ec 6a 65       	r6 = [r6+r5<<2]			  ## imd_rgb.c:58:2
  1085d4:    02 f1 3c 40       	r2 = r4 + 60  #			  ## imd_rgb.c:58:2
  1085d8:    07 6d             		 r7 = [r0+52] 			  ## imd_rgb.c:58:2
  1085da:    d8 ec 3a 35       	r3 = [r3+r5<<2]			  ## imd_rgb.c:58:2
  1085de:    d8 ec 2a 25       	r2 = [r2+r5<<2]			  ## imd_rgb.c:58:2
  1085e2:    f6 19             	r6 &= r7			  ## imd_rgb.c:58:2
  1085e4:    63 19             	r3 |= r6			  ## imd_rgb.c:58:2
  1085e6:    83 6d             	[r0+52] = r3			  ## imd_rgb.c:58:2
  1085e8:    64 e8 02 82       	[r8+0] &= r2			  ## imd_rgb.c:58:2
  1085ec:    d8 ec 4a 35       	r3 = [r4+r5<<2]			  ## imd_rgb.c:58:2
  1085f0:    12 67             	r2 = [r1+28] 			  ## imd_rgb.c:79:22
  1085f2:    35 e1 ff 2f       	r5 = r2 + -1			  ## imd_rgb.c:79:2
  1085f6:    05 fc 21 04       	if (r5 > 2) goto 66 <imd_rgb_init+0xDA : 10863c >			  ## imd_rgb.c:79:2
  1085fa:    4a 98             	r2 = r4 + 24			  ## imd_rgb.c:79:2
  1085fc:    4e 8c             	r6 = r4 + 12			  ## imd_rgb.c:79:2
  1085fe:    d8 ec 6a 65       	r6 = [r6+r5<<2]			  ## imd_rgb.c:79:2
  108602:    07 66             	r7 = [r0+24] 			  ## imd_rgb.c:79:2
  108604:    d8 ec 2a 25       	r2 = [r2+r5<<2]			  ## imd_rgb.c:79:2
  108608:    f6 19             	r6 &= r7			  ## imd_rgb.c:79:2
  10860a:    62 19             	r2 |= r6			  ## imd_rgb.c:79:2
  10860c:    02 f1 54 40       	r2 = r4 + 84  #			  ## imd_rgb.c:79:2
  108610:    82 66             		 [r0+24] = r2			  ## imd_rgb.c:79:2
  108612:    06 e1 24 40       	r6 = r4 + 36			  ## imd_rgb.c:79:2
  108616:    d8 ec 6a 65       	r6 = [r6+r5<<2]			  ## imd_rgb.c:79:2
  10861a:    07 6d             	r7 = [r0+52] 			  ## imd_rgb.c:79:2
  10861c:    d8 ec 2a 25       	r2 = [r2+r5<<2]			  ## imd_rgb.c:79:2
  108620:    f6 19             	r6 &= r7			  ## imd_rgb.c:79:2
  108622:    62 19             	r2 |= r6			  ## imd_rgb.c:79:2
  108624:    06 e1 3c 40       	r6 = r4 + 60			  ## imd_rgb.c:79:2
  108628:    d8 ec 6a 65       	r6 = [r6+r5<<2]			  ## imd_rgb.c:79:2
  10862c:    02 f1 48 40       	r2 = r4 + 72  #			  ## imd_rgb.c:79:2
  108630:    82 6d             		 [r0+52] = r2			  ## imd_rgb.c:79:2
  108632:    d8 ec 2a 25       	r2 = [r2+r5<<2]			  ## imd_rgb.c:79:2
  108636:    64 e8 02 86       	[r8+0] &= r6			  ## imd_rgb.c:79:2
  10863a:    23 19             	r3 |= r2			  ## imd_rgb.c:79:2
  10863c:    12 68             	r2 = [r1+32] 			  ## imd_rgb.c:100:22
  10863e:    35 e1 ff 2f       	r5 = r2 + -1			  ## imd_rgb.c:100:2
  108642:    05 fc 21 04       	if (r5 > 2) goto 66 <imd_rgb_init+0x126 : 108688 >			  ## imd_rgb.c:100:2
  108646:    4a 98             	r2 = r4 + 24			  ## imd_rgb.c:100:2
  108648:    4e 8c             	r6 = r4 + 12			  ## imd_rgb.c:100:2
  10864a:    d8 ec 6a 65       	r6 = [r6+r5<<2]			  ## imd_rgb.c:100:2
  10864e:    07 66             	r7 = [r0+24] 			  ## imd_rgb.c:100:2
  108650:    d8 ec 2a 25       	r2 = [r2+r5<<2]			  ## imd_rgb.c:100:2
  108654:    f6 19             	r6 &= r7			  ## imd_rgb.c:100:2
  108656:    62 19             	r2 |= r6			  ## imd_rgb.c:100:2
  108658:    02 f1 60 40       	r2 = r4 + 96  #			  ## imd_rgb.c:100:2
  10865c:    82 66             		 [r0+24] = r2			  ## imd_rgb.c:100:2
  10865e:    06 e1 24 40       	r6 = r4 + 36			  ## imd_rgb.c:100:2
  108662:    d8 ec 6a 65       	r6 = [r6+r5<<2]			  ## imd_rgb.c:100:2
  108666:    07 6d             	r7 = [r0+52] 			  ## imd_rgb.c:100:2
  108668:    d8 ec 2a 25       	r2 = [r2+r5<<2]			  ## imd_rgb.c:100:2
  10866c:    f6 19             	r6 &= r7			  ## imd_rgb.c:100:2
  10866e:    62 19             	r2 |= r6			  ## imd_rgb.c:100:2
  108670:    06 e1 3c 40       	r6 = r4 + 60			  ## imd_rgb.c:100:2
  108674:    d8 ec 6a 65       	r6 = [r6+r5<<2]			  ## imd_rgb.c:100:2
  108678:    02 f1 48 40       	r2 = r4 + 72  #			  ## imd_rgb.c:100:2
  10867c:    82 6d             		 [r0+52] = r2			  ## imd_rgb.c:100:2
  10867e:    d8 ec 2a 25       	r2 = [r2+r5<<2]			  ## imd_rgb.c:100:2
  108682:    64 e8 02 86       	[r8+0] &= r6			  ## imd_rgb.c:100:2
  108686:    23 19             	r3 |= r2			  ## imd_rgb.c:100:2
  108688:    02 66             	r2 = [r0+24] 			  ## imd_rgb.c:121:2
  10868a:    a2 ac             	r2 = r2 >> 12			  ## imd_rgb.c:121:2
  10868c:    a3 e1 50 26       	r3 <= insert(r2, p:12, l:20)			  ## imd_rgb.c:121:2
  108690:    83 66             	[r0+24] = r3			  ## imd_rgb.c:121:2
  108692:    13 64             	r3 = [r1+16] 			  ## imd_rgb.c:123:18
  108694:    13 47             	if (r3 == 0) goto 78 <imd_rgb_init+0x182 : 1086e4 >			  ## imd_rgb.c:123:18
  108696:    42 24             	r2 = 4			  ## imd_rgb.c:125:13
  108698:    b3 e8 02 00       	if (r3 != 2) {			  ## imd_rgb.c:125:13
  10869c:    42 28             		r2 = 8
                               	}			  ## imd_rgb.c:125:13
  10869e:    03 6d             	r3 = [r0+52] 			  ## imd_rgb.c:125:13
  1086a0:    73 e1 0c 30       	r3 = r3 & 0xFFFFFFF3			  ## imd_rgb.c:125:13
  1086a4:    32 19             	r2 |= r3			  ## imd_rgb.c:125:13
  1086a6:    14 81             	goto 66 <imd_rgb_init+0x188 : 1086ea >			  ## imd_rgb.c:125:13
  1086a8:    00 e1 9a 41       	r0 = r4 + 410			  ## imd_rgb.c:42:2
  1086ac:    02 e1 37 46       	r2 = r4 + 1591			  ## imd_rgb.c:42:2
  1086b0:    41 20             	r1 = 0			  ## imd_rgb.c:42:2
  1086b2:    4b 2a             	r3 = 42			  ## imd_rgb.c:42:2
  1086b4:    80 ff 4a 77 f1 ff 	call -952502 <printf : 1fe04 >			  ## imd_rgb.c:42:2
  1086ba:    00 e1 42 41       	r0 = r4 + 322			  ## imd_rgb.c:42:2
  1086be:    80 ff 40 77 f1 ff 	call -952512 <printf : 1fe04 >			  ## imd_rgb.c:42:2
  1086c4:    f7 9f             	goto -2 <imd_rgb_init+0x162 : 1086c4 >			  ## imd_rgb.c:42:2
  1086c6:    00 e1 9a 41       	r0 = r4 + 410			  ## imd_rgb.c:43:2
  1086ca:    02 e1 37 46       	r2 = r4 + 1591			  ## imd_rgb.c:43:2
  1086ce:    41 20             	r1 = 0			  ## imd_rgb.c:43:2
  1086d0:    4b 2b             	r3 = 43			  ## imd_rgb.c:43:2
  1086d2:    80 ff 2c 77 f1 ff 	call -952532 <printf : 1fe04 >			  ## imd_rgb.c:43:2
  1086d8:    00 e1 e7 41       	r0 = r4 + 487			  ## imd_rgb.c:43:2
  1086dc:    80 ff 22 77 f1 ff 	call -952542 <printf : 1fe04 >			  ## imd_rgb.c:43:2
  1086e2:    f7 9f             	goto -2 <imd_rgb_init+0x180 : 1086e2 >			  ## imd_rgb.c:43:2
  1086e4:    02 6d             	r2 = [r0+52] 			  ## imd_rgb.c:124:3
  1086e6:    72 e1 0c 20       	r2 = r2 & 0xFFFFFFF3			  ## imd_rgb.c:124:3
  1086ea:    82 6d             	[r0+52] = r2
  1086ec:    02 6d             	r2 = [r0+52] 			  ## imd_rgb.c:131:2
  1086ee:    13 60             	r3 = [r1+0] 			  ## imd_rgb.c:131:2
  1086f0:    a2 e1 04 35       	r2 <= insert(r3, p:10, l:1)			  ## imd_rgb.c:131:2
  1086f4:    82 6d             	[r0+52] = r2			  ## imd_rgb.c:131:2
  1086f6:    02 6d             	r2 = [r0+52] 			  ## imd_rgb.c:133:2
  1086f8:    13 61             	r3 = [r1+4] 			  ## imd_rgb.c:133:2
  1086fa:    a2 e1 84 35       	r2 <= insert(r3, p:11, l:1)			  ## imd_rgb.c:133:2
  1086fe:    82 6d             	[r0+52] = r2			  ## imd_rgb.c:133:2
  108700:    02 6d             	r2 = [r0+52] 			  ## imd_rgb.c:135:2
  108702:    13 62             	r3 = [r1+8] 			  ## imd_rgb.c:135:2
  108704:    a2 e1 04 32       	r2 <= insert(r3, p:4, l:1)			  ## imd_rgb.c:135:2
  108708:    82 6d             	[r0+52] = r2			  ## imd_rgb.c:135:2
  10870a:    02 6e             	r2 = [r0+56] 			  ## imd_rgb.c:137:2
  10870c:    13 69             	r3 = [r1+36] 			  ## imd_rgb.c:137:2
  10870e:    a2 e1 28 30       	r2 <= insert(r3, p:0, l:10)			  ## imd_rgb.c:137:2
  108712:    82 6e             	[r0+56] = r2			  ## imd_rgb.c:137:2
  108714:    02 6e             	r2 = [r0+56] 			  ## imd_rgb.c:138:2
  108716:    13 6a             	r3 = [r1+40] 			  ## imd_rgb.c:138:2
  108718:    a2 e1 28 35       	r2 <= insert(r3, p:10, l:10)			  ## imd_rgb.c:138:2
  10871c:    82 6e             	[r0+56] = r2			  ## imd_rgb.c:138:2
  10871e:    02 6e             	r2 = [r0+56] 			  ## imd_rgb.c:139:2
  108720:    13 6b             	r3 = [r1+44] 			  ## imd_rgb.c:139:2
  108722:    a2 e1 28 3a       	r2 <= insert(r3, p:20, l:10)			  ## imd_rgb.c:139:2
  108726:    82 6e             	[r0+56] = r2			  ## imd_rgb.c:139:2
  108728:    02 6f             	r2 = [r0+60] 			  ## imd_rgb.c:140:2
  10872a:    13 6c             	r3 = [r1+48] 			  ## imd_rgb.c:140:2
  10872c:    a2 e1 28 30       	r2 <= insert(r3, p:0, l:10)			  ## imd_rgb.c:140:2
  108730:    82 6f             	[r0+60] = r2			  ## imd_rgb.c:140:2
  108732:    02 6f             	r2 = [r0+60] 			  ## imd_rgb.c:141:2
  108734:    13 6d             	r3 = [r1+52] 			  ## imd_rgb.c:141:2
  108736:    a2 e1 28 35       	r2 <= insert(r3, p:10, l:10)			  ## imd_rgb.c:141:2
  10873a:    82 6f             	[r0+60] = r2			  ## imd_rgb.c:141:2
  10873c:    02 6f             	r2 = [r0+60] 			  ## imd_rgb.c:142:2
  10873e:    13 6e             	r3 = [r1+56] 			  ## imd_rgb.c:142:2
  108740:    a2 e1 28 3a       	r2 <= insert(r3, p:20, l:10)			  ## imd_rgb.c:142:2
  108744:    82 6f             	[r0+60] = r2			  ## imd_rgb.c:142:2
  108746:    13 65             	r3 = [r1+20] 			  ## imd_rgb.c:144:18
  108748:    02 60             	r2 = [r0+0] 			  ## imd_rgb.c:144:18
  10874a:    83 f8 05 02       	if (r3 != 1) goto 10 <imd_rgb_init+0x1F6 : 108758 >			  ## imd_rgb.c:144:6
  10874e:    32 2e             	r2 |= 16384			  ## imd_rgb.c:145:3
  108750:    82 60             	[r0+0] = r2			  ## imd_rgb.c:145:3
  108752:    02 6d             	r2 = [r0+52] 			  ## imd_rgb.c:146:3
  108754:    32 25             	r2 |= 32			  ## imd_rgb.c:146:3
  108756:    04 84             	goto 8 <imd_rgb_init+0x1FE : 108760 >			  ## imd_rgb.c:146:3
  108758:    ba 2e             	r2 &= 4294950911
  10875a:    82 60             	[r0+0] = r2			  ## imd_rgb.c:148:3
  10875c:    02 6d             	r2 = [r0+52] 			  ## imd_rgb.c:149:3
  10875e:    ba 25             	r2 &= 4294967263			  ## imd_rgb.c:149:3
  108760:    82 6d             	[r0+52] = r2
  108762:    12 63             	r2 = [r1+12] 			  ## imd_rgb.c:152:18
  108764:    01 6d             	r1 = [r0+52] 			  ## imd_rgb.c:152:18
  108766:    82 f8 09 02       	if (r2 != 1) goto 18 <imd_rgb_init+0x21A : 10877c >			  ## imd_rgb.c:152:6
  10876a:    31 26             	r1 |= 64			  ## imd_rgb.c:153:3
  10876c:    81 6d             	[r0+52] = r1			  ## imd_rgb.c:153:3
  10876e:    0d ef 80 00       	[r0+52] |= 0x80			  ## imd_rgb.c:154:3
  108772:    0d ef 80 0f       	[r0+52] |= 0x100			  ## imd_rgb.c:155:3
  108776:    01 6d             	r1 = [r0+52] 			  ## imd_rgb.c:156:3
  108778:    31 29             	r1 |= 512			  ## imd_rgb.c:156:3
  10877a:    04 88             	goto 16 <imd_rgb_init+0x22A : 10878c >			  ## imd_rgb.c:156:3
  10877c:    b9 26             	r1 &= 4294967231
  10877e:    81 6d             	[r0+52] = r1			  ## imd_rgb.c:158:3
  108780:    cd ef 80 00       	[r0+52] &= 0xFFFFFF7F			  ## imd_rgb.c:159:3
  108784:    cd ef 80 0f       	[r0+52] &= 0xFFFFFEFF			  ## imd_rgb.c:160:3
  108788:    01 6d             	r1 = [r0+52] 			  ## imd_rgb.c:161:3
  10878a:    b9 29             	r1 &= 4294966783			  ## imd_rgb.c:161:3
  10878c:    81 6d             	[r0+52] = r1
  10878e:    00 ef 00 0a       	[r0+0] |= 0x80000			  ## imd_rgb.c:165:2
  108792:    00 ef 80 09       	[r0+0] |= 0x100000			  ## imd_rgb.c:166:2
  108796:    00 ef 00 08       	[r0+0] |= 0x800000			  ## imd_rgb.c:167:2
  10879a:    0d ef 01 00       	[r0+52] |= 0x1			  ## imd_rgb.c:169:2
  10879e:    c0 ff 20 9c 10 00 	r0 = 1088544 <realloc+0x5FE : 109c20 >			  ## imd_rgb.c:171:2
  1087a4:    80 ff 5e 76 f1 ff 	call -952738 <puts : 1fe08 >			  ## imd_rgb.c:171:2
  1087aa:    58 04             	{pc, r8-r4} = [sp++]			  ## imd_rgb.c:172:1


lcd_rgb_draw:
  1087ac:    10 04             	[--sp] = rets			  ## imd_rgb.c:176:0
  1087ae:    c0 ff e0 9b 10 00 	r0 = 1088480 <realloc+0x5BE : 109be0 >			  ## imd_rgb.c:178:2
  1087b4:    80 ff 4e 76 f1 ff 	call -952754 <puts : 1fe08 >			  ## imd_rgb.c:178:2
  1087ba:    c1 ff 00 2d fe 00 	r1 = 16657664 <_HEAP_END+0xD67D00 : fe2d00 >			  ## imd_rgb.c:178:2
  1087c0:    10 68             	r0 = [r1+32] 			  ## imd_rgb.c:179:14
  1087c2:    30 ea 01 00       	if ((r0 & 0x1) != 0) {			  ## imd_rgb.c:179:14
  1087c6:    c8 ef 01 10       		[r1+32] &= 0xFFFFFFFE
                               	}			  ## imd_rgb.c:180:3
  1087ca:    10 60             	r0 = [r1+0] 			  ## imd_rgb.c:185:16
  1087cc:    20 ea 00 8d       	if ((r0 & 0x2000) == 0) {			  ## imd_rgb.c:185:16
  1087d0:    00 ef 02 10       		[r1+0] |= 0x2			  ## imd_rgb.c:186:3
  1087d4:    58 24             		r0 = 100			  ## imd_rgb.c:187:3
  1087d6:    80 ff 34 b8 ff ff 		call -18380
                               	} <delay : 104010 >			  ## imd_rgb.c:187:3
  1087dc:    0d ef 02 10       	[r1+52] |= 0x2			  ## imd_rgb.c:189:22
  1087e0:    10 60             	r0 = [r1+0] 			  ## imd_rgb.c:191:16
  1087e2:    c0 ff 00 9c 10 00 	r0 = 1088512 <realloc+0x5DE : 109c00 >			  ## imd_rgb.c:199:2
  1087e8:    80 ff 1a 76 f1 ff 	call -952806 <puts : 1fe08 >			  ## imd_rgb.c:199:2
  1087ee:    00 04             	pc = [sp++]			  ## imd_rgb.c:200:1


imd_rgb_isr:
  1087f0:    75 04             	[--sp] = {rets, r5, r4}			  ## imd_rgb.c:204:0
  1087f2:    c5 ff 00 2d fe 00 	r5 = 16657664 <_HEAP_END+0xD67D00 : fe2d00 >			  ## imd_rgb.c:204:0
  1087f8:    50 68             	r0 = [r5+32] 			  ## imd_rgb.c:207:10
  1087fa:    50 e8 2e e8       	if ((r0 & 536870912) == 0) goto 92 <imd_rgb_isr+0x6A : 10885a >			  ## imd_rgb.c:207:10
  1087fe:    50 6d             	r0 = [r5+52] 			  ## imd_rgb.c:211:14
  108800:    c4 ff b8 b8 10 00 	r4 = 1095864 <ui_cfg_data+0x6C : 10b8b8 >			  ## imd_rgb.c:211:14
  108806:    70 fe 13 fe       	ifs (r0 > -1) goto 38 <imd_rgb_isr+0x40 : 108830 >			  ## imd_rgb.c:211:14
  10880a:    0d ef 80 54       	[r5+52] |= 0x40000000			  ## imd_rgb.c:212:23
  10880e:    40 16             	r0 = r4			  ## imd_rgb.c:213:3
  108810:    80 ff f2 75 f1 ff 	call -952846 <puts : 1fe08 >			  ## imd_rgb.c:213:3
  108816:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd_rgb.c:215:3
  10881c:    00 6a             	r0 = [r0+40] 			  ## imd_rgb.c:215:3
  10881e:    41 21             	r1 = 1			  ## imd_rgb.c:215:3
  108820:    89 40             	b[r0+0] = r1			  ## imd_rgb.c:215:18
  108822:    41 20             	r1 = 0			  ## imd_rgb.c:215:18
  108824:    89 41             	b[r0+1] = r1			  ## imd_rgb.c:216:19
  108826:    d0 ec 0c 15       	r1 = [r0+92]			  ## imd_rgb.c:217:14
  10882a:    01 42             	if (r1 == 0) goto 4 <imd_rgb_isr+0x40 : 108830 >			  ## imd_rgb.c:217:14
  10882c:    40 20             	r0 = 0			  ## imd_rgb.c:218:4
  10882e:    c1 00             	call r1			  ## imd_rgb.c:218:4
  108830:    50 60             	r0 = [r5+0] 			  ## imd_rgb.c:222:14
  108832:    30 ea 00 47       	if ((r0 & 0x2000000) != 0) {			  ## imd_rgb.c:222:14
  108836:    00 e1 b9 40       		r0 = r4 + 185			  ## imd_rgb.c:223:3
  10883a:    80 ff c8 75 f1 ff 		call -952888
                               	} <puts : 1fe08 >			  ## imd_rgb.c:223:3
  108840:    50 60             	r0 = [r5+0] 			  ## imd_rgb.c:226:14
  108842:    30 ea 80 c8       	if ((r0 & 0x400000) != 0) {			  ## imd_rgb.c:226:14
  108846:    00 ef 00 59       		[r5+0] |= 0x200000			  ## imd_rgb.c:227:20
  10884a:    00 ef 80 57       		[r5+0] |= 0x1000000			  ## imd_rgb.c:229:20
  10884e:    c0 ff c0 9b 10 00 		r0 = 1088448 <realloc+0x59E : 109bc0 >			  ## imd_rgb.c:230:3
  108854:    80 ff ae 75 f1 ff 		call -952914
                               	} <puts : 1fe08 >			  ## imd_rgb.c:230:3
  10885a:    55 04             	{pc, r5, r4} = [sp++]			  ## imd_rgb.c:232:1


imd_spi_timing_config:
  10885c:    74 04             	[--sp] = {rets, r4}			  ## imd_spi.c:113:0
  10885e:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd_spi.c:114:7
  108864:    02 6c             	r2 = [r0+48] 			  ## imd_spi.c:114:7
  108866:    d0 ec 28 14       	r1 = [r2+72]			  ## imd_spi.c:114:19
  10886a:    63 e1 f0 10       	r3 = r1 & 0xF0			  ## imd_spi.c:114:6
  10886e:    c0 ff 20 2d fe 00 	r0 = 16657696 <_HEAP_END+0xD67D20 : fe2d20 >			  ## imd_spi.c:114:6
  108874:    03 f8 08 20       	if (r3 == 16) goto 16 <imd_spi_timing_config+0x2C : 108888 >			  ## imd_spi.c:114:6
  108878:    83 f8 09 40       	if (r3 != 32) goto 18 <imd_spi_timing_config+0x32 : 10888e >
  10887c:    c0 ef c0 0b       	[r0+0] &= 0xFFFE7FFF			  ## imd_spi.c:115:9
  108880:    01 60             	r1 = [r0+0] 			  ## imd_spi.c:116:9
  108882:    42 e1 00 18       	r2 = r1 | 0x800000			  ## imd_spi.c:116:9
  108886:    04 95             	goto 42 <imd_spi_timing_config+0x56 : 1088b2 >			  ## imd_spi.c:116:9
  108888:    c0 ef c0 0b       	[r0+0] &= 0xFFFE7FFF			  ## imd_spi.c:119:3
  10888c:    04 8b             	goto 22 <imd_spi_timing_config+0x48 : 1088a4 >			  ## imd_spi.c:119:3
  10888e:    d0 ec 28 45       	r4 = [r2+88]			  ## imd_spi.c:127:19
  108892:    02 60             	r2 = [r0+0] 			  ## imd_spi.c:127:19
  108894:    73 e1 c0 2b       	r3 = r2 & 0xFFFE7FFF			  ## imd_spi.c:127:19
  108898:    42 e1 00 3c       	r2 = r3 | 0x8000			  ## imd_spi.c:128:13
  10889c:    b4 e8 01 00       	if (r4 != 1) {			  ## imd_spi.c:128:13
  1088a0:    32 16             		r2 = r3
                               	}			  ## imd_spi.c:127:7
  1088a2:    82 60             	[r0+0] = r2			  ## imd_spi.c:127:7
  1088a4:    02 60             	r2 = [r0+0] 
  1088a6:    43 e1 00 28       	r3 = r2 | 0x800000
  1088aa:    ba 37             	r2 &= 4286578687
  1088ac:    31 ea 0f 00       	if ((r1 & 0xF) != 0) {
  1088b0:    32 16             		r2 = r3
                               	}
  1088b2:    82 60             	[r0+0] = r2
  1088b4:    01 60             	r1 = [r0+0] 
  1088b6:    71 e1 fc 1c       	r1 = r1 & 0xFFFF81FF
  1088ba:    41 e1 9c 1c       	r1 = r1 | 0x4E00
  1088be:    81 60             	[r0+0] = r1
  1088c0:    54 04             	{pc, r4} = [sp++]			  ## imd_spi.c:139:1


imd_spi_init:
  1088c2:    75 04             	[--sp] = {rets, r5, r4}			  ## imd_spi.c:145:0
  1088c4:    c4 ff 80 b9 10 00 	r4 = 1096064 <ui_cfg_data+0x134 : 10b980 >			  ## imd_spi.c:145:0
  1088ca:    10 4b             	if (r0 == 0) goto 86 <imd_spi_init+0x60 : 108922 >			  ## imd_spi.c:145:0
  1088cc:    d0 ec 08 15       	r1 = [r0+88]			  ## imd_spi.c:145:0
  1088d0:    11 57             	if (r1 == 0) goto 110 <imd_spi_init+0x7E : 108940 >			  ## imd_spi.c:145:0
  1088d2:    c5 ff 00 c8 10 00 	r5 = 1099776 <backlight_status : 10c800 >			  ## imd_spi.c:150:9
  1088d8:    40 d6             	r0 = r4  #			  ## imd_spi.c:152:2
  1088da:    d0 6d             		 [r5+52] = r0			  ## imd_spi.c:149:8
  1088dc:    d1 6c             	[r5+48] = r1			  ## imd_spi.c:150:9
  1088de:    50 ec 10 21       	r3_r2 = d[r1+16]			  ## imd_spi.c:152:63
  1088e2:    80 ff 1c 75 f1 ff 	call -953060 <printf : 1fe04 >			  ## imd_spi.c:152:2
  1088e8:    50 6c             	r0 = [r5+48] 			  ## imd_spi.c:52:6
  1088ea:    d0 28             	r0 += 72			  ## imd_spi.c:52:6
  1088ec:    03 63             	r3 = [r0+12] 			  ## imd_spi.c:52:18
  1088ee:    c1 ff 14 60 fd 00 	r1 = 16605204 <_HEAP_END+0xD5B014 : fd6014 >			  ## imd_spi.c:52:18
  1088f4:    12 60             	r2 = [r1+0] 			  ## imd_spi.c:52:18
  1088f6:    13 53             	if (r3 == 0) goto 102 <imd_spi_init+0x9C : 10895e >			  ## imd_spi.c:52:18
  1088f8:    32 3b             	r2 |= 134217728			  ## imd_spi.c:84:9
  1088fa:    92 60             	[r1+0] = r2			  ## imd_spi.c:84:9
  1088fc:    01 60             	r1 = [r0+0] 			  ## imd_spi.c:88:20
  1088fe:    62 e1 f0 10       	r2 = r1 & 0xF0			  ## imd_spi.c:88:7
  108902:    02 f8 44 40       	if (r2 == 32) goto 136 <imd_spi_init+0xCC : 10898e >			  ## imd_spi.c:88:7
  108906:    c1 ff 08 55 fd 00 	r1 = 16602376 <_HEAP_END+0xD5A508 : fd5508 >
  10890c:    82 f8 41 20       	if (r2 != 16) goto 130 <imd_spi_init+0xD0 : 108992 >
  108910:    c0 ef 38 10       	[r1+0] &= 0xFFFFFFC7			  ## imd_spi.c:91:18
  108914:    41 e0 00 70       	r1 = 28672 <STFT_Win_FixHalf_M128_D80+0x2FFC : 7000 >			  ## imd_spi.c:91:18
  108918:    4b 38             	r3 = 56			  ## imd_spi.c:91:18
  10891a:    c2 ff 0c 55 fd 00 	r2 = 16602380 <_HEAP_END+0xD5A50C : fd550c >
  108920:    34 85             	goto 202 <imd_spi_init+0x12A : 1089ec >
  108922:    00 e1 de 40       	r0 = r4 + 222			  ## imd_spi.c:146:2
  108926:    02 e1 be 45       	r2 = r4 + 1470			  ## imd_spi.c:146:2
  10892a:    41 20             	r1 = 0			  ## imd_spi.c:146:2
  10892c:    63 32             	r3 = 146			  ## imd_spi.c:146:2
  10892e:    80 ff d0 74 f1 ff 	call -953136 <printf : 1fe04 >			  ## imd_spi.c:146:2
  108934:    00 e1 86 40       	r0 = r4 + 134			  ## imd_spi.c:146:2
  108938:    80 ff c6 74 f1 ff 	call -953146 <printf : 1fe04 >			  ## imd_spi.c:146:2
  10893e:    f7 9f             	goto -2 <imd_spi_init+0x7C : 10893e >			  ## imd_spi.c:146:2
  108940:    00 e1 de 40       	r0 = r4 + 222			  ## imd_spi.c:147:2
  108944:    02 e1 be 45       	r2 = r4 + 1470			  ## imd_spi.c:147:2
  108948:    41 20             	r1 = 0			  ## imd_spi.c:147:2
  10894a:    63 33             	r3 = 147			  ## imd_spi.c:147:2
  10894c:    80 ff b2 74 f1 ff 	call -953166 <printf : 1fe04 >			  ## imd_spi.c:147:2
  108952:    00 e1 2b 41       	r0 = r4 + 299			  ## imd_spi.c:147:2
  108956:    80 ff a8 74 f1 ff 	call -953176 <printf : 1fe04 >			  ## imd_spi.c:147:2
  10895c:    f7 9f             	goto -2 <imd_spi_init+0x9A : 10895c >			  ## imd_spi.c:147:2
  10895e:    ba 3b             	r2 &= 4160749567
  108960:    92 60             	[r1+0] = r2			  ## imd_spi.c:54:9
  108962:    01 60             	r1 = [r0+0] 			  ## imd_spi.c:57:20
  108964:    62 e1 f0 10       	r2 = r1 & 0xF0			  ## imd_spi.c:57:7
  108968:    c4 ff 08 50 fd 00 	r4 = 16601096 <_HEAP_END+0xD5A008 : fd5008 >			  ## imd_spi.c:57:7
  10896e:    02 f8 1f 20       	if (r2 == 16) goto 62 <imd_spi_init+0xEE : 1089b0 >			  ## imd_spi.c:57:7
  108972:    82 f8 24 40       	if (r2 != 32) goto 72 <imd_spi_init+0xFC : 1089be >
  108976:    42 60             	r2 = [r4+0] 
  108978:    60 ff 0f 10 2f 00 	if ((r1 & 0xF) == 0) goto 94 <imd_spi_init+0x11A : 1089dc >
  10897e:    71 e1 78 2e       	r1 = r2 & 0xFFFFF07F			  ## imd_spi.c:63:19
  108982:    60 f0 f8 1b       	r1 = 0x1F000  #			  ## imd_spi.c:63:19
  108986:    c1 60             		 [r4+0] = r1			  ## imd_spi.c:63:19
  108988:    43 e0 80 0f       	r3 = 3968 <bss_size+0x6AC : f80 >			  ## imd_spi.c:63:19
  10898c:    14 8e             	goto 92 <imd_spi_init+0x128 : 1089ea >			  ## imd_spi.c:63:19
  10898e:    41 20             	r1 = 0
  108990:    14 8f             	goto 94 <imd_spi_init+0x12E : 1089f0 >
  108992:    03 64             	r3 = [r0+16] 			  ## imd_spi.c:95:20
  108994:    c0 ef 18 10       	[r1+0] &= 0xFFFFFFE7			  ## imd_spi.c:95:20
  108998:    1a 84             	r2 = r1 + 4			  ## imd_spi.c:95:20
  10899a:    33 e8 01 a0       	if (r3 == 1) {			  ## imd_spi.c:95:20
  10899e:    00 ef 20 10       		[r1+0] |= 0x20			  ## imd_spi.c:97:19
  1089a2:    41 e0 00 70       		r1 = 28672 <STFT_Win_FixHalf_M128_D80+0x2FFC : 7000 >			  ## imd_spi.c:97:19
  1089a6:    4b 38             		r3 = 56
                               	} else {			  ## imd_spi.c:97:19
  1089a8:    41 e0 00 30       		r1 = 12288 <WOLASynthesisFilter_Float_M256_m4_r1+0x7FC : 3000 >			  ## imd_spi.c:97:19
  1089ac:    43 38             		r3 = 24
                               	}			  ## imd_spi.c:97:19
  1089ae:    04 9e             	goto 60 <imd_spi_init+0x12A : 1089ec >			  ## imd_spi.c:97:19
  1089b0:    c0 ef 60 4f       	[r4+0] &= 0xFFFFFC7F			  ## imd_spi.c:68:18
  1089b4:    41 e0 00 30       	r1 = 12288 <WOLASynthesisFilter_Float_M256_m4_r1+0x7FC : 3000 >			  ## imd_spi.c:68:18
  1089b8:    43 e0 80 03       	r3 = 896 <_MASK_MEM_SIZE+0x1DC : 380 >			  ## imd_spi.c:68:18
  1089bc:    04 96             	goto 44 <imd_spi_init+0x128 : 1089ea >			  ## imd_spi.c:68:18
  1089be:    05 64             	r5 = [r0+16] 			  ## imd_spi.c:72:20
  1089c0:    c0 ef c0 4f       	[r4+0] &= 0xFFFFFE7F			  ## imd_spi.c:72:20
  1089c4:    41 e0 00 30       	r1 = 12288 <WOLASynthesisFilter_Float_M256_m4_r1+0x7FC : 3000 >			  ## imd_spi.c:72:20
  1089c8:    43 e0 80 01       	r3 = 384 <UPDATE_SIZE+0x100 : 180 >			  ## imd_spi.c:72:20
  1089cc:    4a 84             	r2 = r4 + 4			  ## imd_spi.c:72:20
  1089ce:    35 e8 01 40       	if (r5 == 1) {			  ## imd_spi.c:72:20
  1089d2:    00 ef 00 4f       		[r4+0] |= 0x200			  ## imd_spi.c:74:19
  1089d6:    43 e0 80 03       		r3 = 896
                               	} <_MASK_MEM_SIZE+0x1DC : 380 >			  ## imd_spi.c:74:19
  1089da:    04 88             	goto 16 <imd_spi_init+0x12A : 1089ec >
  1089dc:    71 e1 c0 2f       	r1 = r2 & 0xFFFFFE7F			  ## imd_spi.c:59:19
  1089e0:    41 f0 00 30       	r1 = 12288  # <WOLASynthesisFilter_Float_M256_m4_r1+0x7FC : 3000 >			  ## imd_spi.c:59:19
  1089e4:    c1 60             		 [r4+0] = r1			  ## imd_spi.c:59:19
  1089e6:    43 e0 80 01       	r3 = 384 <UPDATE_SIZE+0x100 : 180 >			  ## imd_spi.c:59:19
  1089ea:    4a 84             	r2 = r4 + 4
  1089ec:    64 e8 00 23       	[r2+0] |= r3
  1089f0:    c4 ff 18 2d fe 00 	r4 = 16657688 <_HEAP_END+0xD67D18 : fe2d18 >
  1089f6:    42 60             	r2 = [r4+0] 			  ## imd_spi.c:109:2
  1089f8:    72 e1 f8 2b       	r2 = r2 & 0xFFFE0FFF			  ## imd_spi.c:109:2
  1089fc:    21 19             	r1 |= r2			  ## imd_spi.c:109:2
  1089fe:    c1 60             	[r4+0] = r1			  ## imd_spi.c:109:2
  108a00:    01 61             	r1 = [r0+4] 			  ## imd_spi.c:157:25
  108a02:    b1 e1 8c 12       	r1 = uextra(r1, p:5, l:3)			  ## imd_spi.c:157:5
  108a06:    01 fc 07 06       	if (r1 > 3) goto 14 <imd_spi_init+0x156 : 108a18 >			  ## imd_spi.c:157:5
  108a0a:    42 62             	r2 = [r4+8] 
  108a0c:    11 a3             	r1 = r1 << 3			  ## imd_spi.c:157:5
  108a0e:    c1 28             	r1 += 8			  ## imd_spi.c:157:5
  108a10:    72 e1 38 20       	r2 = r2 & 0xFFFFFFC7			  ## imd_spi.c:157:5
  108a14:    21 19             	r1 |= r2			  ## imd_spi.c:157:5
  108a16:    c1 62             	[r4+8] = r1			  ## imd_spi.c:157:5
  108a18:    00 62             	r0 = [r0+8] 			  ## imd_spi.c:173:22
  108a1a:    00 49             	if (r0 == 0) goto 18 <imd_spi_init+0x16C : 108a2e >			  ## imd_spi.c:173:2
  108a1c:    00 f8 0b 04       	if (r0 == 2) goto 22 <imd_spi_init+0x174 : 108a36 >
  108a20:    80 f8 0e 02       	if (r0 != 1) goto 28 <imd_spi_init+0x17E : 108a40 >
  108a24:    40 62             	r0 = [r4+8] 			  ## imd_spi.c:175:3
  108a26:    70 e1 c0 00       	r0 = r0 & 0xFFFFFF3F			  ## imd_spi.c:175:3
  108a2a:    30 27             	r0 |= 128			  ## imd_spi.c:175:3
  108a2c:    04 88             	goto 16 <imd_spi_init+0x17C : 108a3e >			  ## imd_spi.c:175:3
  108a2e:    40 62             	r0 = [r4+8] 			  ## imd_spi.c:181:3
  108a30:    70 e1 c0 00       	r0 = r0 & 0xFFFFFF3F			  ## imd_spi.c:181:3
  108a34:    04 84             	goto 8 <imd_spi_init+0x17C : 108a3e >			  ## imd_spi.c:181:3
  108a36:    40 62             	r0 = [r4+8] 			  ## imd_spi.c:178:3
  108a38:    70 e1 c0 00       	r0 = r0 & 0xFFFFFF3F			  ## imd_spi.c:178:3
  108a3c:    30 26             	r0 |= 64			  ## imd_spi.c:178:3
  108a3e:    c0 62             	[r4+8] = r0
  108a40:    bf ea 0c ff       	call -488 <imd_spi_timing_config : 10885c >			  ## imd_spi.c:185:2
  108a44:    02 ef 01 40       	[r4+8] |= 0x1			  ## imd_spi.c:187:2
  108a48:    55 04             	{pc, r5, r4} = [sp++]			  ## imd_spi.c:188:1


imd_spi_tx_cmd:
  108a4a:    76 04             	[--sp] = {rets, r6-r4}			  ## imd_spi.c:195:0
  108a4c:    14 16             	r4 = r1			  ## imd_spi.c:195:0
  108a4e:    05 16             	r5 = r0			  ## imd_spi.c:195:0
  108a50:    bf ea 85 ef       	call -8438 <imd_sfr_pop : 10695e >			  ## imd_spi.c:196:2
  108a54:    30 e1 ff 4f       	r0 = r4 + -1			  ## imd_spi.c:196:2
  108a58:    00 17             	r0 = r0.b0 (u)			  ## imd_spi.c:196:2
  108a5a:    00 f9 0f 08       	if (r0 >= 4) goto 30 <imd_spi_tx_cmd+0x32 : 108a7c >			  ## imd_spi.c:196:2
  108a5e:    c6 ff 20 2d fe 00 	r6 = 16657696 <_HEAP_END+0xD67D20 : fe2d20 >
  108a64:    c0 ef 80 6f       	[r6+0] &= 0xFFFFFEFF			  ## imd_spi.c:203:2
  108a68:    a1 f0 04 40       	r1 = 0x4 - r4  #			  ## imd_spi.c:201:23
  108a6c:    60 60             		 r0 = [r6+0] 			  ## imd_spi.c:204:14
  108a6e:    11 a3             	r1 = r1 << 3			  ## imd_spi.c:201:34
  108a70:    15 1a             	r5 <<= r1			  ## imd_spi.c:201:16
  108a72:    50 e8 14 ba       	if ((r0 & 8388608) != 0) goto 40 <imd_spi_tx_cmd+0x54 : 108a9e >
  108a76:    c0 ef 80 68       	[r6+0] &= 0xFFBFFFFF			  ## imd_spi.c:207:3
  108a7a:    04 94             	goto 40 <imd_spi_tx_cmd+0x5A : 108aa4 >			  ## imd_spi.c:207:3
  108a7c:    c4 ff 5e ba 10 00 	r4 = 1096286 <imd_clock_init.div+0x9E : 10ba5e >			  ## imd_spi.c:199:2
  108a82:    02 e1 e0 44       	r2 = r4 + 1248			  ## imd_spi.c:199:2
  108a86:    41 20             	r1 = 0			  ## imd_spi.c:199:2
  108a88:    73 27             	r3 = 199			  ## imd_spi.c:199:2
  108a8a:    40 16             	r0 = r4			  ## imd_spi.c:199:2
  108a8c:    80 ff 72 73 f1 ff 	call -953486 <printf : 1fe04 >			  ## imd_spi.c:199:2
  108a92:    00 e1 9c 43       	r0 = r4 + 924			  ## imd_spi.c:199:2
  108a96:    80 ff 68 73 f1 ff 	call -953496 <printf : 1fe04 >			  ## imd_spi.c:199:2
  108a9c:    f7 9f             	goto -2 <imd_spi_tx_cmd+0x52 : 108a9c >			  ## imd_spi.c:199:2
  108a9e:    40 20             	r0 = 0			  ## imd_spi.c:205:3
  108aa0:    bf ea d1 fa       	call -2654 <lcd_dc : 108046 >			  ## imd_spi.c:205:3
  108aa4:    c0 ef 80 67       	[r6+0] &= 0xFEFFFFFF			  ## imd_spi.c:209:2
  108aa8:    41 b9             	r1 = r4 << 25			  ## imd_spi.c:210:2
  108aaa:    e1 f0 60 16       	r1 = r1 + 0xE000000  #			  ## imd_spi.c:210:2
  108aae:    60 60             		 r0 = [r6+0] 			  ## imd_spi.c:210:2
  108ab0:    91 b9             	r1 = r1 >> 25			  ## imd_spi.c:210:2
  108ab2:    a0 e1 8c 1c       	r0 <= insert(r1, p:25, l:3)			  ## imd_spi.c:210:2
  108ab6:    e0 60             	[r6+0] = r0			  ## imd_spi.c:210:2
  108ab8:    e5 61             	[r6+4] = r5			  ## imd_spi.c:212:21
  108aba:    00 ef 02 60       	[r6+0] |= 0x2			  ## imd_spi.c:214:22
  108abe:    60 60             	r0 = [r6+0] 			  ## imd_spi.c:216:19
  108ac0:    70 fe fd ff       	ifs (r0 > -1) goto -6 <imd_spi_tx_cmd+0x74 : 108abe >			  ## imd_spi.c:216:2
  108ac4:    00 ef 80 64       	[r6+0] |= 0x40000000			  ## imd_spi.c:217:22
  108ac8:    56 04             	{pc, r6-r4} = [sp++]			  ## imd_spi.c:219:1


imd_spi_tx_dat:
  108aca:    76 04             	[--sp] = {rets, r6-r4}			  ## imd_spi.c:226:0
  108acc:    14 16             	r4 = r1			  ## imd_spi.c:226:0
  108ace:    05 16             	r5 = r0			  ## imd_spi.c:226:0
  108ad0:    bf ea 45 ef       	call -8566 <imd_sfr_pop : 10695e >			  ## imd_spi.c:229:2
  108ad4:    30 e1 ff 4f       	r0 = r4 + -1			  ## imd_spi.c:229:2
  108ad8:    00 17             	r0 = r0.b0 (u)			  ## imd_spi.c:229:2
  108ada:    00 f9 0f 08       	if (r0 >= 4) goto 30 <imd_spi_tx_dat+0x32 : 108afc >			  ## imd_spi.c:229:2
  108ade:    c6 ff 20 2d fe 00 	r6 = 16657696 <_HEAP_END+0xD67D20 : fe2d20 >
  108ae4:    c0 ef 80 6f       	[r6+0] &= 0xFFFFFEFF			  ## imd_spi.c:234:2
  108ae8:    a1 f0 04 40       	r1 = 0x4 - r4  #			  ## imd_spi.c:232:25
  108aec:    60 60             		 r0 = [r6+0] 			  ## imd_spi.c:236:14
  108aee:    11 a3             	r1 = r1 << 3			  ## imd_spi.c:232:37
  108af0:    15 1a             	r5 <<= r1			  ## imd_spi.c:232:18
  108af2:    50 e8 14 ba       	if ((r0 & 8388608) != 0) goto 40 <imd_spi_tx_dat+0x54 : 108b1e >
  108af6:    00 ef 80 68       	[r6+0] |= 0x400000			  ## imd_spi.c:239:3
  108afa:    04 94             	goto 40 <imd_spi_tx_dat+0x5A : 108b24 >			  ## imd_spi.c:239:3
  108afc:    c4 ff 5e ba 10 00 	r4 = 1096286 <imd_clock_init.div+0x9E : 10ba5e >			  ## imd_spi.c:231:2
  108b02:    02 e1 e0 44       	r2 = r4 + 1248			  ## imd_spi.c:231:2
  108b06:    41 20             	r1 = 0			  ## imd_spi.c:231:2
  108b08:    7b 27             	r3 = 231			  ## imd_spi.c:231:2
  108b0a:    40 16             	r0 = r4			  ## imd_spi.c:231:2
  108b0c:    80 ff f2 72 f1 ff 	call -953614 <printf : 1fe04 >			  ## imd_spi.c:231:2
  108b12:    00 e1 19 44       	r0 = r4 + 1049			  ## imd_spi.c:231:2
  108b16:    80 ff e8 72 f1 ff 	call -953624 <printf : 1fe04 >			  ## imd_spi.c:231:2
  108b1c:    f7 9f             	goto -2 <imd_spi_tx_dat+0x52 : 108b1c >			  ## imd_spi.c:231:2
  108b1e:    40 21             	r0 = 1			  ## imd_spi.c:237:3
  108b20:    bf ea 91 fa       	call -2782 <lcd_dc : 108046 >			  ## imd_spi.c:237:3
  108b24:    c0 ef 80 67       	[r6+0] &= 0xFEFFFFFF			  ## imd_spi.c:242:2
  108b28:    41 b9             	r1 = r4 << 25			  ## imd_spi.c:243:2
  108b2a:    e1 f0 60 16       	r1 = r1 + 0xE000000  #			  ## imd_spi.c:243:2
  108b2e:    60 60             		 r0 = [r6+0] 			  ## imd_spi.c:243:2
  108b30:    91 b9             	r1 = r1 >> 25			  ## imd_spi.c:243:2
  108b32:    a0 e1 8c 1c       	r0 <= insert(r1, p:25, l:3)			  ## imd_spi.c:243:2
  108b36:    e0 60             	[r6+0] = r0			  ## imd_spi.c:243:2
  108b38:    e5 61             	[r6+4] = r5			  ## imd_spi.c:244:21
  108b3a:    00 ef 02 60       	[r6+0] |= 0x2			  ## imd_spi.c:246:22
  108b3e:    60 60             	r0 = [r6+0] 			  ## imd_spi.c:248:19
  108b40:    70 fe fd ff       	ifs (r0 > -1) goto -6 <imd_spi_tx_dat+0x74 : 108b3e >			  ## imd_spi.c:248:2
  108b44:    00 ef 80 64       	[r6+0] |= 0x40000000			  ## imd_spi.c:249:22
  108b48:    56 04             	{pc, r6-r4} = [sp++]			  ## imd_spi.c:250:1


lcd_spi_write_cmd:
  108b4a:    77 04             	[--sp] = {rets, r7-r4}			  ## imd_spi.c:378:0
  108b4c:    24 16             	r4 = r2			  ## imd_spi.c:378:0
  108b4e:    15 16             	r5 = r1			  ## imd_spi.c:378:0
  108b50:    06 16             	r6 = r0			  ## imd_spi.c:378:0
  108b52:    40 20             	r0 = 0			  ## imd_spi.c:379:5
  108b54:    bf ea 6c fa       	call -2856 <lcd_cs : 108030 >			  ## imd_spi.c:379:5
  108b58:    bf ea 80 fe       	call -768 <imd_spi_timing_config : 10885c >			  ## imd_spi.c:348:2
  108b5c:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd_spi.c:350:7
  108b62:    00 6c             	r0 = [r0+48] 			  ## imd_spi.c:350:7
  108b64:    d0 ec 08 14       	r1 = [r0+72]			  ## imd_spi.c:350:19
  108b68:    61 e1 f0 10       	r1 = r1 & 0xF0			  ## imd_spi.c:350:28
  108b6c:    81 f8 12 40       	if (r1 != 32) goto 36 <lcd_spi_write_cmd+0x4A : 108b94 >			  ## imd_spi.c:350:6
  108b70:    c1 ff 20 2d fe 00 	r1 = 16657696 <_HEAP_END+0xD67D20 : fe2d20 >			  ## imd_spi.c:351:3
  108b76:    c0 ef c0 1b       	[r1+0] &= 0xFFFE7FFF			  ## imd_spi.c:351:3
  108b7a:    50 ee 0c 15       	r1 = b[r0+92] (u)			  ## imd_spi.c:352:34
  108b7e:    31 e8 00 60       	if (r1 == 0) {			  ## imd_spi.c:352:34
  108b82:    60 e0 00 07       		r0 = 0x2000000			  ## imd_spi.c:355:31
  108b86:    a0 e1 20 64       		r0 <= insert(r6, p:8, l:8)
                               	} else {			  ## imd_spi.c:355:31
  108b8a:    60 a8             		r0 = r6 << 8			  ## imd_spi.c:353:74
  108b8c:    a0 e1 20 1c       		r0 <= insert(r1, p:24, l:8)
                               	}			  ## imd_spi.c:353:67
  108b90:    41 24             	r1 = 4			  ## imd_spi.c:353:67
  108b92:    04 82             	goto 4 <lcd_spi_write_cmd+0x4E : 108b98 >			  ## imd_spi.c:353:67
  108b94:    41 21             	r1 = 1			  ## imd_spi.c:358:3
  108b96:    60 16             	r0 = r6			  ## imd_spi.c:358:3
  108b98:    bf ea 57 ff       	call -338 <imd_spi_tx_cmd : 108a4a >
  108b9c:    14 51             	if (r4 == 0) goto 98 <lcd_spi_write_cmd+0xB6 : 108c00 >
  108b9e:    46 20             	r6 = 0
  108ba0:    47 16             	r7 = r4
  108ba2:    14 8c             	goto 88 <lcd_spi_write_cmd+0xB2 : 108bfc >
  108ba4:    71 17             	r1 = r7.b0 (u)			  ## imd_spi.c:364:8
  108ba6:    81 f9 0d 08       	if (r1 < 4) goto 26 <lcd_spi_write_cmd+0x7A : 108bc4 >			  ## imd_spi.c:364:8
  108baa:    d0 1d             	r0 = r5 + r6			  ## imd_spi.c:365:21
  108bac:    09 40             	r1 = b[r0+0] (u)			  ## imd_spi.c:365:21
  108bae:    0a 41             	r2 = b[r0+1] (u)			  ## imd_spi.c:365:38
  108bb0:    0b 42             	r3 = b[r0+2] (u)			  ## imd_spi.c:365:59
  108bb2:    11 b8             	r1 = r1 << 24			  ## imd_spi.c:365:28
  108bb4:    a1 f1 20 28       	r1 <= insert(r2, p:16, l:8)  #			  ## imd_spi.c:365:35
  108bb8:    08 43             		 r0 = b[r0+3] (u)			  ## imd_spi.c:365:78
  108bba:    a1 e1 20 34       	r1 <= insert(r3, p:8, l:8)			  ## imd_spi.c:365:56
  108bbe:    10 19             	r0 |= r1			  ## imd_spi.c:365:76
  108bc0:    41 24             	r1 = 4			  ## imd_spi.c:365:5
  108bc2:    04 98             	goto 48 <lcd_spi_write_cmd+0xAA : 108bf4 >			  ## imd_spi.c:365:5
  108bc4:    81 f8 0a 06       	if (r1 != 3) goto 20 <lcd_spi_write_cmd+0x92 : 108bdc >			  ## imd_spi.c:366:15
  108bc8:    d0 1d             	r0 = r5 + r6			  ## imd_spi.c:367:21
  108bca:    09 40             	r1 = b[r0+0] (u)			  ## imd_spi.c:367:21
  108bcc:    0a 41             	r2 = b[r0+1] (u)			  ## imd_spi.c:367:38
  108bce:    11 b0             	r1 = r1 << 16			  ## imd_spi.c:367:28
  108bd0:    a1 f1 20 24       	r1 <= insert(r2, p:8, l:8)  #			  ## imd_spi.c:367:35
  108bd4:    08 42             		 r0 = b[r0+2] (u)			  ## imd_spi.c:367:57
  108bd6:    10 19             	r0 |= r1			  ## imd_spi.c:367:55
  108bd8:    41 23             	r1 = 3			  ## imd_spi.c:367:5
  108bda:    04 8c             	goto 24 <lcd_spi_write_cmd+0xAA : 108bf4 >			  ## imd_spi.c:367:5
  108bdc:    d8 ee 50 06       	r0 = b[r5+r6] (u)
  108be0:    81 f8 07 04       	if (r1 != 2) goto 14 <lcd_spi_write_cmd+0xA8 : 108bf2 >			  ## imd_spi.c:368:15
  108be4:    d1 1d             	r1 = r5 + r6			  ## imd_spi.c:369:36
  108be6:    1a 41             	r2 = b[r1+1] (u)			  ## imd_spi.c:369:36
  108be8:    a2 e1 20 04       	r2 <= insert(r0, p:8, l:8)			  ## imd_spi.c:369:34
  108bec:    41 22             	r1 = 2			  ## imd_spi.c:369:5
  108bee:    20 16             	r0 = r2			  ## imd_spi.c:369:5
  108bf0:    04 81             	goto 2 <lcd_spi_write_cmd+0xAA : 108bf4 >			  ## imd_spi.c:369:5
  108bf2:    41 21             	r1 = 1			  ## imd_spi.c:371:5
  108bf4:    bf ea 69 ff       	call -302 <imd_spi_tx_dat : 108aca >
  108bf8:    ff 3c             	r7 += -4			  ## imd_spi.c:362:3
  108bfa:    c6 24             	r6 += 4			  ## imd_spi.c:362:26
  108bfc:    06 ee d2 41       	ifs (r4 > r6) goto -92 <lcd_spi_write_cmd+0x5A : 108ba4 >
  108c00:    40 21             	r0 = 1			  ## imd_spi.c:381:2
  108c02:    bf ea 15 fa       	call -3030 <lcd_cs : 108030 >			  ## imd_spi.c:381:2
  108c06:    57 04             	{pc, r7-r4} = [sp++]			  ## imd_spi.c:382:1


spi_clk_l:
  108c08:    c0 ff 00 c8 10 00 	r0 = 1099776 <backlight_status : 10c800 >			  ## imd_spi.c:306:0
  108c0e:    00 6c             	r0 = [r0+48] 			  ## imd_spi.c:307:9
  108c10:    d0 ec 04 05       	r0 = [r0+84]			  ## imd_spi.c:307:21
  108c14:    b0 e8 00 60       	if (r0 != 0) {			  ## imd_spi.c:307:21
  108c18:    10 37             		r0 = -9			  ## imd_spi.c:307:21
  108c1a:    c1 ff 00 55 fd 00 		r1 = 16602368
                               	} else { <_HEAP_END+0xD5A500 : fd5500 >			  ## imd_spi.c:307:21
  108c20:    40 e0 7f ff       		r0 = -129 <_HEAP_END+0x1D84F7F : 1ffff7f >			  ## imd_spi.c:307:21
  108c24:    c1 ff 00 50 fd 00 		r1 = 16601088
                               	} <_HEAP_END+0xD5A000 : fd5000 >			  ## imd_spi.c:307:21
  108c2a:    64 e8 02 10       	[r1+0] &= r0			  ## imd_spi.c:307:21
  108c2e:    80 00             	rts			  ## imd_spi.c:312:1


soft_spi_rx_dat:
  108c30:    7b 04             	[--sp] = {rets, r11-r4}			  ## imd_spi.c:322:0
  108c32:    c9 ff 18 2d fe 00 	r9 = 16657688 <_HEAP_END+0xD67D18 : fe2d18 >			  ## imd_spi.c:322:0
  108c38:    d0 ec 90 80       	r8 = [r9+0]			  ## imd_spi.c:325:24
  108c3c:    02 16             	r2 = r0			  ## imd_spi.c:325:24
  108c3e:    71 84             	call -56 <spi_clk_l : 108c08 >			  ## imd_spi.c:326:5
  108c40:    c0 ef f8 9b       	[r9+0] &= 0xFFFE0FFF			  ## imd_spi.c:327:5
  108c44:    25 a3             	r5 = r2 << 3
  108c46:    42 20             	r2 = 0
  108c48:    c6 ff 00 c8 10 00 	r6 = 1099776 <backlight_status : 10c800 >
  108c4e:    ca ff 00 50 fd 00 	r10 = 16601088 <_HEAP_END+0xD5A000 : fd5000 >
  108c54:    0b e1 04 a5       	r11 = r10 + 1284
  108c58:    03 e1 04 a0       	r3 = r10 + 4
  108c5c:    04 e1 fc 34       	r4 = r3 + 1276
  108c60:    04 9c             	goto 56 <soft_spi_rx_dat+0x6A : 108c9a >
  108c62:    61 92             	call -92 <spi_clk_l : 108c08 >			  ## imd_spi.c:330:9
  108c64:    60 6c             	r0 = [r6+48] 			  ## imd_spi.c:298:9
  108c66:    d0 ec 04 05       	r0 = [r0+84]			  ## imd_spi.c:298:21
  108c6a:    b0 e8 00 60       	if (r0 != 0) {			  ## imd_spi.c:298:21
  108c6e:    41 28             		r1 = 8			  ## imd_spi.c:298:21
  108c70:    47 16             		r7 = r4
                               	} else {			  ## imd_spi.c:298:9
  108c72:    61 20             		r1 = 128			  ## imd_spi.c:298:9
  108c74:    a7 16             		r7 = r10
                               	}			  ## imd_spi.c:298:9
  108c76:    64 e8 00 71       	[r7+0] |= r1			  ## imd_spi.c:298:9
  108c7a:    21 a1             	r1 = r2 << 1			  ## imd_spi.c:329:13
  108c7c:    42 e0 00 01       	r2 = 256 <UPDATE_SIZE+0x80 : 100 >			  ## imd_spi.c:332:13
  108c80:    00 41             	if (r0 == 0) goto 2 <soft_spi_rx_dat+0x54 : 108c84 >			  ## imd_spi.c:332:13
  108c82:    42 30             	r2 = 16			  ## imd_spi.c:332:13
  108c84:    37 16             	r7 = r3			  ## imd_spi.c:315:9
  108c86:    00 41             	if (r0 == 0) goto 2 <soft_spi_rx_dat+0x5A : 108c8a >			  ## imd_spi.c:315:9
  108c88:    b7 16             	r7 = r11			  ## imd_spi.c:315:9
  108c8a:    77 60             	r7 = [r7+0] 
  108c8c:    40 21             	r0 = 1			  ## imd_spi.c:332:13
  108c8e:    12 ea 00 07       	if ((r2 & r7) == 0) {			  ## imd_spi.c:332:13
  108c92:    40 20             		r0 = 0
                               	}			  ## imd_spi.c:332:13
  108c94:    90 e1 00 21       	r2 = r0 | r1			  ## imd_spi.c:332:13
  108c98:    fd 3f             	r5 += -1			  ## imd_spi.c:328:5
  108c9a:    f5 43             	if (r5 != 0) goto -58 <soft_spi_rx_dat+0x32 : 108c62 >
  108c9c:    51 95             	call -150 <spi_clk_l : 108c08 >			  ## imd_spi.c:336:5
  108c9e:    d0 ec 90 00       	r0 = [r9+0]			  ## imd_spi.c:337:5
  108ca2:    c0 e1 8c 18       	r1 = r8 >> 12			  ## imd_spi.c:337:5
  108ca6:    a0 e1 14 16       	r0 <= insert(r1, p:12, l:5)			  ## imd_spi.c:337:5
  108caa:    d0 ec 91 00       	[r9+0] = r0			  ## imd_spi.c:337:5
  108cae:    20 16             	r0 = r2			  ## imd_spi.c:338:5
  108cb0:    5b 04             	{pc, r11-r4} = [sp++]			  ## imd_spi.c:338:5


lcd_spi_read_cmd:
  108cb2:    79 04             	[--sp] = {rets, r9-r4}			  ## imd_spi.c:389:0
  108cb4:    29 16             	r9 = r2			  ## imd_spi.c:389:0
  108cb6:    15 16             	r5 = r1			  ## imd_spi.c:389:0
  108cb8:    06 16             	r6 = r0			  ## imd_spi.c:389:0
  108cba:    bf ea cf fd       	call -1122 <imd_spi_timing_config : 10885c >			  ## imd_spi.c:394:2
  108cbe:    40 20             	r0 = 0			  ## imd_spi.c:396:2
  108cc0:    bf ea b6 f9       	call -3220 <lcd_cs : 108030 >			  ## imd_spi.c:396:2
  108cc4:    c8 ff 00 c8 10 00 	r8 = 1099776 <backlight_status : 10c800 >			  ## imd_spi.c:396:2
  108cca:    d0 ec 80 03       	r0 = [r8+48]			  ## imd_spi.c:398:7
  108cce:    d0 ec 08 14       	r1 = [r0+72]			  ## imd_spi.c:398:19
  108cd2:    61 e1 f0 10       	r1 = r1 & 0xF0			  ## imd_spi.c:398:28
  108cd6:    81 f8 18 40       	if (r1 != 32) goto 48 <lcd_spi_read_cmd+0x58 : 108d0a >			  ## imd_spi.c:398:6
  108cda:    c1 ff 20 2d fe 00 	r1 = 16657696 <_HEAP_END+0xD67D20 : fe2d20 >
  108ce0:    c0 ef c0 1b       	[r1+0] &= 0xFFFE7FFF			  ## imd_spi.c:399:9
  108ce4:    12 60             	r2 = [r1+0] 			  ## imd_spi.c:400:3
  108ce6:    72 e1 fc 2c       	r2 = r2 & 0xFFFF81FF			  ## imd_spi.c:400:3
  108cea:    42 e1 9c 2c       	r2 = r2 | 0x4E00			  ## imd_spi.c:400:3
  108cee:    92 60             	[r1+0] = r2			  ## imd_spi.c:400:3
  108cf0:    50 ee 0d 15       	r1 = b[r0+93] (u)			  ## imd_spi.c:401:34
  108cf4:    31 e8 00 60       	if (r1 == 0) {			  ## imd_spi.c:401:34
  108cf8:    60 e0 40 07       		r0 = 0x3000000			  ## imd_spi.c:404:31
  108cfc:    a0 e1 20 64       		r0 <= insert(r6, p:8, l:8)
                               	} else {			  ## imd_spi.c:404:31
  108d00:    60 a8             		r0 = r6 << 8			  ## imd_spi.c:402:73
  108d02:    a0 e1 20 1c       		r0 <= insert(r1, p:24, l:8)
                               	}			  ## imd_spi.c:402:66
  108d06:    41 24             	r1 = 4			  ## imd_spi.c:402:66
  108d08:    04 82             	goto 4 <lcd_spi_read_cmd+0x5C : 108d0e >			  ## imd_spi.c:402:66
  108d0a:    41 21             	r1 = 1			  ## imd_spi.c:407:3
  108d0c:    60 16             	r0 = r6			  ## imd_spi.c:407:3
  108d0e:    bf ea 9c fe       	call -712 <imd_spi_tx_cmd : 108a4a >
  108d12:    d0 ec 80 03       	r0 = [r8+48]			  ## imd_spi.c:410:9
  108d16:    d0 ec 04 05       	r0 = [r0+84]			  ## imd_spi.c:410:21
  108d1a:    b0 e8 00 60       	if (r0 != 0) {			  ## imd_spi.c:410:21
  108d1e:    41 30             		r1 = 16			  ## imd_spi.c:410:21
  108d20:    c2 ff 08 55 fd 00 		r2 = 16602376
                               	} else { <_HEAP_END+0xD5A508 : fd5508 >			  ## imd_spi.c:410:21
  108d26:    41 e0 00 01       		r1 = 256 <UPDATE_SIZE+0x80 : 100 >			  ## imd_spi.c:410:21
  108d2a:    c2 ff 08 50 fd 00 		r2 = 16601096
                               	} <_HEAP_END+0xD5A008 : fd5008 >			  ## imd_spi.c:410:21
  108d30:    64 e8 00 21       	[r2+0] |= r1			  ## imd_spi.c:410:21
  108d34:    09 f8 3f 00       	if (r9 == 0) goto 126 <lcd_spi_read_cmd+0x104 : 108db6 >			  ## imd_spi.c:410:21
  108d38:    46 20             	r6 = 0
  108d3a:    94 16             	r4 = r9
  108d3c:    97 16             	r7 = r9
  108d3e:    14 95             	goto 106 <lcd_spi_read_cmd+0xF8 : 108daa >
  108d40:    60 e1 fc 40       	r0 = r4 & 0xFC			  ## imd_spi.c:419:8
  108d44:    80 f9 0e 08       	if (r0 < 4) goto 28 <lcd_spi_read_cmd+0xB2 : 108d64 >			  ## imd_spi.c:419:8
  108d48:    40 24             	r0 = 4			  ## imd_spi.c:420:23
  108d4a:    bf ea 71 ff       	call -286 <soft_spi_rx_dat : 108c30 >			  ## imd_spi.c:420:23
  108d4e:    81 b8             	r1 = r0 >> 24			  ## imd_spi.c:421:18
  108d50:    52 16             	r2 = r5			  ## imd_spi.c:421:12
  108d52:    dc ee 21 16       	b[++r2=r6] = r1			  ## imd_spi.c:421:12
  108d56:    81 b0             	r1 = r0 >> 16			  ## imd_spi.c:422:22
  108d58:    a9 41             	b[r2+1] = r1			  ## imd_spi.c:422:16
  108d5a:    81 a8             	r1 = r0 >> 8			  ## imd_spi.c:423:22
  108d5c:    41 f1 03 60       	r1 = r6 | 0x3  #			  ## imd_spi.c:424:11
  108d60:    a9 42             		 b[r2+2] = r1			  ## imd_spi.c:423:16
  108d62:    04 9e             	goto 60 <lcd_spi_read_cmd+0xEE : 108da0 >			  ## imd_spi.c:423:16
  108d64:    70 17             	r0 = r7.b0 (u)
  108d66:    00 f8 0e 04       	if (r0 == 2) goto 28 <lcd_spi_read_cmd+0xD4 : 108d86 >			  ## imd_spi.c:425:15
  108d6a:    80 f8 15 06       	if (r0 != 3) goto 42 <lcd_spi_read_cmd+0xE6 : 108d98 >
  108d6e:    40 23             	r0 = 3			  ## imd_spi.c:426:23
  108d70:    bf ea 5e ff       	call -324 <soft_spi_rx_dat : 108c30 >			  ## imd_spi.c:426:23
  108d74:    81 b0             	r1 = r0 >> 16			  ## imd_spi.c:427:18
  108d76:    52 16             	r2 = r5			  ## imd_spi.c:427:12
  108d78:    dc ee 21 16       	b[++r2=r6] = r1			  ## imd_spi.c:427:12
  108d7c:    81 a8             	r1 = r0 >> 8			  ## imd_spi.c:428:22
  108d7e:    41 f1 02 60       	r1 = r6 | 0x2  #			  ## imd_spi.c:429:11
  108d82:    a9 41             		 b[r2+1] = r1			  ## imd_spi.c:428:16
  108d84:    04 8d             	goto 26 <lcd_spi_read_cmd+0xEE : 108da0 >			  ## imd_spi.c:428:16
  108d86:    40 22             	r0 = 2			  ## imd_spi.c:431:23
  108d88:    bf ea 52 ff       	call -348 <soft_spi_rx_dat : 108c30 >			  ## imd_spi.c:431:23
  108d8c:    81 a8             	r1 = r0 >> 8			  ## imd_spi.c:432:18
  108d8e:    d8 ee 51 16       	b[r5+r6] = r1			  ## imd_spi.c:432:12
  108d92:    41 e1 01 60       	r1 = r6 | 0x1			  ## imd_spi.c:433:11
  108d96:    04 84             	goto 8 <lcd_spi_read_cmd+0xEE : 108da0 >			  ## imd_spi.c:433:11
  108d98:    40 21             	r0 = 1			  ## imd_spi.c:435:23
  108d9a:    bf ea 49 ff       	call -366 <soft_spi_rx_dat : 108c30 >			  ## imd_spi.c:435:23
  108d9e:    61 16             	r1 = r6
  108da0:    d8 ee 51 01       	b[r5+r1] = r0
  108da4:    fc 3c             	r4 += -4			  ## imd_spi.c:417:3
  108da6:    ff 3c             	r7 += -4			  ## imd_spi.c:417:3
  108da8:    c6 24             	r6 += 4			  ## imd_spi.c:417:26
  108daa:    06 ee c9 91       	ifs (r9 > r6) goto -110 <lcd_spi_read_cmd+0x8E : 108d40 >
  108dae:    d0 ec 80 03       	r0 = [r8+48]
  108db2:    d0 ec 04 05       	r0 = [r0+84]
  108db6:    b0 e8 00 60       	if (r0 != 0) {
  108dba:    10 2f             		r0 = -17
  108dbc:    c1 ff 08 55 fd 00 		r1 = 16602376
                               	} else { <_HEAP_END+0xD5A508 : fd5508 >
  108dc2:    40 e0 ff fe       		r0 = -257 <_HEAP_END+0x1D84EFF : 1fffeff >
  108dc6:    c1 ff 08 50 fd 00 		r1 = 16601096
                               	} <_HEAP_END+0xD5A008 : fd5008 >
  108dcc:    64 e8 02 10       	[r1+0] &= r0
  108dd0:    40 21             	r0 = 1			  ## imd_spi.c:448:5
  108dd2:    bf ea 2d f9       	call -3494 <lcd_cs : 108030 >			  ## imd_spi.c:448:5
  108dd6:    59 04             	{pc, r9-r4} = [sp++]			  ## imd_spi.c:449:1


lcd_spi_set_draw_area:
  108dd8:    79 04             	[--sp] = {rets, r9-r4}			  ## imd_spi.c:456:0
  108dda:    38 16             	r8 = r3			  ## imd_spi.c:456:0
  108ddc:    25 16             	r5 = r2			  ## imd_spi.c:456:0
  108dde:    16 16             	r6 = r1			  ## imd_spi.c:456:0
  108de0:    07 16             	r7 = r0			  ## imd_spi.c:456:0
  108de2:    bf ea 62 ef       	call -8508 <lcd_qspi_st77903_mode : 106caa >			  ## imd_spi.c:462:9
  108de6:    00 41             	if (r0 == 0) goto 2 <lcd_spi_set_draw_area+0x12 : 108dea >			  ## imd_spi.c:462:9
  108de8:    59 04             	{pc, r9-r4} = [sp++]			  ## imd_spi.c:567:1
  108dea:    c9 ff 00 c8 10 00 	r9 = 1099776 <backlight_status : 10c800 >
  108df0:    d0 ec 90 03       	r0 = [r9+48]			  ## imd_spi.c:466:6
  108df4:    00 66             	r0 = [r0+24] 			  ## imd_spi.c:466:14
  108df6:    c4 ff 18 2d fe 00 	r4 = 16657688 <_HEAP_END+0xD67D18 : fe2d18 >			  ## imd_spi.c:466:14
  108dfc:    80 f8 05 04       	if (r0 != 2) goto 10 <lcd_spi_set_draw_area+0x32 : 108e0a >			  ## imd_spi.c:466:14
  108e00:    40 62             	r0 = [r4+8] 			  ## imd_spi.c:467:17
  108e02:    20 ea 01 00       	if ((r0 & 0x1) == 0) {			  ## imd_spi.c:467:17
  108e06:    02 ef 01 40       		[r4+8] |= 0x1
                               	}			  ## imd_spi.c:468:4
  108e0a:    40 62             	r0 = [r4+8] 			  ## imd_spi.c:472:2
  108e0c:    70 e1 fc 0c       	r0 = r0 & 0xFFFF81FF			  ## imd_spi.c:472:2
  108e10:    40 e1 9c 0c       	r0 = r0 | 0x4E00			  ## imd_spi.c:472:2
  108e14:    c0 62             	[r4+8] = r0			  ## imd_spi.c:472:2
  108e16:    40 20             	r0 = 0			  ## imd_spi.c:474:2
  108e18:    bf ea 0a f9       	call -3564 <lcd_cs : 108030 >			  ## imd_spi.c:474:2
  108e1c:    d0 ec 90 03       	r0 = [r9+48]			  ## imd_spi.c:475:7
  108e20:    d0 ec 08 14       	r1 = [r0+72]			  ## imd_spi.c:475:19
  108e24:    62 e1 f0 10       	r2 = r1 & 0xF0			  ## imd_spi.c:475:6
  108e28:    02 f8 17 20       	if (r2 == 16) goto 46 <lcd_spi_set_draw_area+0x82 : 108e5a >			  ## imd_spi.c:475:6
  108e2c:    82 f8 28 40       	if (r2 != 32) goto 80 <lcd_spi_set_draw_area+0xA8 : 108e80 >
  108e30:    c2 ef c0 4b       	[r4+8] &= 0xFFFE7FFF			  ## imd_spi.c:476:3
  108e34:    41 62             	r1 = [r4+8] 			  ## imd_spi.c:477:3
  108e36:    71 e1 fc 1c       	r1 = r1 & 0xFFFF81FF			  ## imd_spi.c:477:3
  108e3a:    41 e1 9c 1c       	r1 = r1 | 0x4E00			  ## imd_spi.c:477:3
  108e3e:    c1 62             	[r4+8] = r1			  ## imd_spi.c:477:3
  108e40:    50 ee 0c 15       	r1 = b[r0+92] (u)			  ## imd_spi.c:478:34
  108e44:    31 e8 00 20       	if (r1 == 0) {			  ## imd_spi.c:478:34
  108e48:    c0 ff 00 2a 00 02 		r0 = 33565184
                               	} else { <WOLASynthesisFilter_Float_M256_m4_r1+0x1FC : 2a00 >			  ## imd_spi.c:481:3
  108e4e:    40 e0 00 2a       		r0 = 10752 <WOLASynthesisFilter_Float_M256_m4_r1+0x1FC : 2a00 >			  ## imd_spi.c:479:67
  108e52:    a0 e1 20 1c       		r0 <= insert(r1, p:24, l:8)
                               	}			  ## imd_spi.c:479:67
  108e56:    41 24             	r1 = 4			  ## imd_spi.c:479:67
  108e58:    04 95             	goto 42 <lcd_spi_set_draw_area+0xAC : 108e84 >			  ## imd_spi.c:479:67
  108e5a:    60 ff 0f 10 0b 00 	if ((r1 & 0xF) == 0) goto 22 <lcd_spi_set_draw_area+0x9E : 108e76 >
  108e60:    40 60             	r0 = [r4+0] 			  ## imd_spi.c:489:4
  108e62:    70 e1 f8 0b       	r0 = r0 & 0xFFFE0FFF			  ## imd_spi.c:489:4
  108e66:    40 e1 40 0d       	r0 = r0 | 0x3000			  ## imd_spi.c:489:4
  108e6a:    c0 60             	[r4+0] = r0			  ## imd_spi.c:489:4
  108e6c:    c2 ef c0 4b       	[r4+8] &= 0xFFFE7FFF			  ## imd_spi.c:490:13
  108e70:    40 62             	r0 = [r4+8] 			  ## imd_spi.c:491:13
  108e72:    30 37             	r0 |= 8388608			  ## imd_spi.c:491:13
  108e74:    04 84             	goto 8 <lcd_spi_set_draw_area+0xA6 : 108e7e >			  ## imd_spi.c:491:13
  108e76:    c2 ef c0 4b       	[r4+8] &= 0xFFFE7FFF			  ## imd_spi.c:485:13
  108e7a:    40 62             	r0 = [r4+8] 			  ## imd_spi.c:486:13
  108e7c:    b8 37             	r0 &= 4286578687			  ## imd_spi.c:486:13
  108e7e:    c0 62             	[r4+8] = r0
  108e80:    48 2a             	r0 = 42
  108e82:    41 21             	r1 = 1
  108e84:    bf ea e1 fd       	call -1086 <imd_spi_tx_cmd : 108a4a >
  108e88:    70 b0             	r0 = r7 << 16			  ## imd_spi.c:497:25
  108e8a:    60 19             	r0 |= r6			  ## imd_spi.c:497:32
  108e8c:    41 24             	r1 = 4			  ## imd_spi.c:497:2
  108e8e:    bf ea 1c fe       	call -968 <imd_spi_tx_dat : 108aca >			  ## imd_spi.c:497:2
  108e92:    40 21             	r0 = 1			  ## imd_spi.c:498:2
  108e94:    bf ea cc f8       	call -3688 <lcd_cs : 108030 >			  ## imd_spi.c:498:2
  108e98:    40 20             	r0 = 0			  ## imd_spi.c:500:2
  108e9a:    bf ea c9 f8       	call -3694 <lcd_cs : 108030 >			  ## imd_spi.c:500:2
  108e9e:    d0 ec 90 03       	r0 = [r9+48]			  ## imd_spi.c:501:7
  108ea2:    d0 ec 08 14       	r1 = [r0+72]			  ## imd_spi.c:501:19
  108ea6:    62 e1 f0 10       	r2 = r1 & 0xF0			  ## imd_spi.c:501:6
  108eaa:    02 f8 17 20       	if (r2 == 16) goto 46 <lcd_spi_set_draw_area+0x104 : 108edc >			  ## imd_spi.c:501:6
  108eae:    82 f8 1f 40       	if (r2 != 32) goto 62 <lcd_spi_set_draw_area+0x118 : 108ef0 >
  108eb2:    c2 ef c0 4b       	[r4+8] &= 0xFFFE7FFF			  ## imd_spi.c:502:3
  108eb6:    41 62             	r1 = [r4+8] 			  ## imd_spi.c:503:3
  108eb8:    71 e1 fc 1c       	r1 = r1 & 0xFFFF81FF			  ## imd_spi.c:503:3
  108ebc:    41 e1 9c 1c       	r1 = r1 | 0x4E00			  ## imd_spi.c:503:3
  108ec0:    c1 62             	[r4+8] = r1			  ## imd_spi.c:503:3
  108ec2:    50 ee 0c 15       	r1 = b[r0+92] (u)			  ## imd_spi.c:504:34
  108ec6:    31 e8 00 20       	if (r1 == 0) {			  ## imd_spi.c:504:34
  108eca:    c0 ff 00 2b 00 02 		r0 = 33565440
                               	} else { <WOLASynthesisFilter_Float_M256_m4_r1+0x2FC : 2b00 >			  ## imd_spi.c:507:3
  108ed0:    40 e0 00 2b       		r0 = 11008 <WOLASynthesisFilter_Float_M256_m4_r1+0x2FC : 2b00 >			  ## imd_spi.c:505:67
  108ed4:    a0 e1 20 1c       		r0 <= insert(r1, p:24, l:8)
                               	}			  ## imd_spi.c:505:67
  108ed8:    41 24             	r1 = 4			  ## imd_spi.c:505:67
  108eda:    04 8c             	goto 24 <lcd_spi_set_draw_area+0x11C : 108ef4 >			  ## imd_spi.c:505:67
  108edc:    c2 ef c0 4b       	[r4+8] &= 0xFFFE7FFF
  108ee0:    40 62             	r0 = [r4+8] 
  108ee2:    42 e1 00 08       	r2 = r0 | 0x800000			  ## imd_spi.c:515:13
  108ee6:    b8 37             	r0 &= 4286578687			  ## imd_spi.c:515:13
  108ee8:    31 ea 0f 00       	if ((r1 & 0xF) != 0) {			  ## imd_spi.c:515:13
  108eec:    20 16             		r0 = r2
                               	}			  ## imd_spi.c:510:7
  108eee:    c0 62             	[r4+8] = r0			  ## imd_spi.c:510:7
  108ef0:    48 2b             	r0 = 43
  108ef2:    41 21             	r1 = 1
  108ef4:    bf ea a9 fd       	call -1198 <imd_spi_tx_cmd : 108a4a >
  108ef8:    50 b0             	r0 = r5 << 16			  ## imd_spi.c:521:25
  108efa:    90 e1 00 08       	r0 = r0 | r8			  ## imd_spi.c:521:32
  108efe:    41 24             	r1 = 4			  ## imd_spi.c:521:2
  108f00:    bf ea e3 fd       	call -1082 <imd_spi_tx_dat : 108aca >			  ## imd_spi.c:521:2
  108f04:    40 21             	r0 = 1			  ## imd_spi.c:522:2
  108f06:    bf ea 93 f8       	call -3802 <lcd_cs : 108030 >			  ## imd_spi.c:522:2
  108f0a:    40 20             	r0 = 0			  ## imd_spi.c:524:2
  108f0c:    bf ea 90 f8       	call -3808 <lcd_cs : 108030 >			  ## imd_spi.c:524:2
  108f10:    d0 ec 90 03       	r0 = [r9+48]			  ## imd_spi.c:525:7
  108f14:    d0 ec 08 14       	r1 = [r0+72]			  ## imd_spi.c:525:19
  108f18:    65 e1 f0 10       	r5 = r1 & 0xF0			  ## imd_spi.c:525:28
  108f1c:    85 f8 20 40       	if (r5 != 32) goto 64 <lcd_spi_set_draw_area+0x188 : 108f60 >			  ## imd_spi.c:525:6
  108f20:    d0 3c             	r0 += 92
  108f22:    60 ff 0f 10 30 00 	if ((r1 & 0xF) == 0) goto 96 <lcd_spi_set_draw_area+0x1B0 : 108f88 >			  ## imd_spi.c:526:7
  108f28:    c2 ef c0 4b       	[r4+8] &= 0xFFFE7FFF
  108f2c:    61 e1 0f 10       	r1 = r1 & 0xF			  ## imd_spi.c:526:29
  108f30:    81 f8 40 02       	if (r1 != 1) goto 128 <lcd_spi_set_draw_area+0x1DC : 108fb4 >			  ## imd_spi.c:526:29
  108f34:    09 43             	r1 = b[r0+3] (u)			  ## imd_spi.c:536:38
  108f36:    31 e8 00 20       	if (r1 == 0) {			  ## imd_spi.c:536:38
  108f3a:    c0 ff 00 2c 00 32 		r0 = 838872064
                               	} else { <WOLASynthesisFilter_Float_M256_m4_r1+0x3FC : 2c00 >			  ## imd_spi.c:539:4
  108f40:    40 e0 00 2c       		r0 = 11264 <WOLASynthesisFilter_Float_M256_m4_r1+0x3FC : 2c00 >			  ## imd_spi.c:537:74
  108f44:    a0 e1 20 1c       		r0 <= insert(r1, p:24, l:8)
                               	}			  ## imd_spi.c:537:74
  108f48:    41 24             	r1 = 4			  ## imd_spi.c:537:74
  108f4a:    bf ea 7e fd       	call -1284 <imd_spi_tx_cmd : 108a4a >			  ## imd_spi.c:537:74
  108f4e:    02 ef c0 4b       	[r4+8] |= 0x18000			  ## imd_spi.c:541:13
  108f52:    40 62             	r0 = [r4+8] 			  ## imd_spi.c:542:4
  108f54:    70 e1 fc 0c       	r0 = r0 & 0xFFFF81FF			  ## imd_spi.c:542:4
  108f58:    40 e1 84 0c       	r0 = r0 | 0x4200			  ## imd_spi.c:542:4
  108f5c:    c0 62             	[r4+8] = r0			  ## imd_spi.c:542:4
  108f5e:    59 04             	{pc, r9-r4} = [sp++]			  ## imd_spi.c:567:1
  108f60:    48 2c             	r0 = 44			  ## imd_spi.c:555:3
  108f62:    41 21             	r1 = 1			  ## imd_spi.c:555:3
  108f64:    bf ea 71 fd       	call -1310 <imd_spi_tx_cmd : 108a4a >			  ## imd_spi.c:555:3
  108f68:    85 f8 3e 21       	if (r5 != 16) goto -388 <lcd_spi_set_draw_area+0x10 : 108de8 >			  ## imd_spi.c:555:3
  108f6c:    c2 ef 00 48       	[r4+8] &= 0xFF7FFFFF			  ## imd_spi.c:557:9
  108f70:    40 62             	r0 = [r4+8] 			  ## imd_spi.c:558:9
  108f72:    70 e1 c0 0b       	r0 = r0 & 0xFFFE7FFF			  ## imd_spi.c:558:9
  108f76:    30 30             	r0 |= 65536			  ## imd_spi.c:558:9
  108f78:    c0 62             	[r4+8] = r0			  ## imd_spi.c:558:9
  108f7a:    40 60             	r0 = [r4+0] 			  ## imd_spi.c:560:3
  108f7c:    70 e1 f8 0b       	r0 = r0 & 0xFFFE0FFF			  ## imd_spi.c:560:3
  108f80:    40 e1 e0 0c       	r0 = r0 | 0x7000			  ## imd_spi.c:560:3
  108f84:    c0 60             	[r4+0] = r0			  ## imd_spi.c:560:3
  108f86:    59 04             	{pc, r9-r4} = [sp++]			  ## imd_spi.c:567:1
  108f88:    c2 ef c0 4b       	[r4+8] &= 0xFFFE7FFF			  ## imd_spi.c:527:13
  108f8c:    41 62             	r1 = [r4+8] 			  ## imd_spi.c:528:4
  108f8e:    71 e1 fc 1c       	r1 = r1 & 0xFFFF81FF			  ## imd_spi.c:528:4
  108f92:    41 e1 9c 1c       	r1 = r1 | 0x4E00			  ## imd_spi.c:528:4
  108f96:    c1 62             	[r4+8] = r1			  ## imd_spi.c:528:4
  108f98:    09 42             	r1 = b[r0+2] (u)			  ## imd_spi.c:529:38
  108f9a:    31 e8 00 20       	if (r1 == 0) {			  ## imd_spi.c:529:38
  108f9e:    c0 ff 00 2c 00 02 		r0 = 33565696
                               	} else { <WOLASynthesisFilter_Float_M256_m4_r1+0x3FC : 2c00 >			  ## imd_spi.c:532:17
  108fa4:    40 e0 00 2c       		r0 = 11264 <WOLASynthesisFilter_Float_M256_m4_r1+0x3FC : 2c00 >			  ## imd_spi.c:530:74
  108fa8:    a0 e1 20 1c       		r0 <= insert(r1, p:24, l:8)
                               	}			  ## imd_spi.c:530:74
  108fac:    41 24             	r1 = 4			  ## imd_spi.c:530:74
  108fae:    bf ea 4c fd       	call -1384 <imd_spi_tx_cmd : 108a4a >			  ## imd_spi.c:530:74
  108fb2:    59 04             	{pc, r9-r4} = [sp++]			  ## imd_spi.c:567:1
  108fb4:    08 44             	r0 = b[r0+4] (u)			  ## imd_spi.c:545:38
  108fb6:    80 41             	if (r0 != 0) goto 2 <lcd_spi_set_draw_area+0x1E2 : 108fba >			  ## imd_spi.c:545:38
  108fb8:    40 32             	r0 = 18			  ## imd_spi.c:548:4
  108fba:    41 21             	r1 = 1
  108fbc:    bf ea 45 fd       	call -1398 <imd_spi_tx_cmd : 108a4a >
  108fc0:    40 62             	r0 = [r4+8] 			  ## imd_spi.c:550:4
  108fc2:    70 e1 fc 0c       	r0 = r0 & 0xFFFF81FF			  ## imd_spi.c:550:4
  108fc6:    40 e1 84 0c       	r0 = r0 | 0x4200			  ## imd_spi.c:550:4
  108fca:    c0 62             	[r4+8] = r0			  ## imd_spi.c:550:4
  108fcc:    02 ef c0 4b       	[r4+8] |= 0x18000			  ## imd_spi.c:551:13
  108fd0:    40 e0 00 2c       	r0 = 11264 <WOLASynthesisFilter_Float_M256_m4_r1+0x3FC : 2c00 >			  ## imd_spi.c:552:4
  108fd4:    41 23             	r1 = 3			  ## imd_spi.c:552:4
  108fd6:    bf ea 78 fd       	call -1296 <imd_spi_tx_dat : 108aca >			  ## imd_spi.c:552:4
  108fda:    59 04             	{pc, r9-r4} = [sp++]			  ## imd_spi.c:567:1


lcd_spi_draw:
  108fdc:    74 04             	[--sp] = {rets, r4}			  ## imd_spi.c:574:0
  108fde:    c4 ff 00 2d fe 00 	r4 = 16657664 <_HEAP_END+0xD67D00 : fe2d00 >			  ## imd_spi.c:574:0
  108fe4:    40 68             	r0 = [r4+32] 			  ## imd_spi.c:575:2
  108fe6:    c1 ff 00 c8 10 00 	r1 = 1099776 <backlight_status : 10c800 >			  ## imd_spi.c:575:2
  108fec:    70 f1 fc 0c       	r0 = r0 & 0xFFFF81FF  #			  ## imd_spi.c:575:2
  108ff0:    11 6c             		 r1 = [r1+48] 			  ## imd_spi.c:575:2
  108ff2:    d0 ec 1c 14       	r1 = [r1+76]			  ## imd_spi.c:575:2
  108ff6:    11 a9             	r1 = r1 << 9			  ## imd_spi.c:575:2
  108ff8:    61 e1 78 1d       	r1 = r1 & 0x3E00			  ## imd_spi.c:575:2
  108ffc:    10 19             	r0 |= r1			  ## imd_spi.c:575:2
  108ffe:    30 2e             	r0 |= 16384			  ## imd_spi.c:575:2
  109000:    c0 68             	[r4+32] = r0			  ## imd_spi.c:575:2
  109002:    40 60             	r0 = [r4+0] 			  ## imd_spi.c:576:16
  109004:    20 ea 00 0d       	if ((r0 & 0x2000) == 0) {			  ## imd_spi.c:576:16
  109008:    00 ef 02 40       		[r4+0] |= 0x2
                               	}			  ## imd_spi.c:577:3
  10900c:    c8 ef 80 4f       	[r4+32] &= 0xFFFFFEFF			  ## imd_spi.c:579:2
  109010:    40 68             	r0 = [r4+32] 			  ## imd_spi.c:580:14
  109012:    50 e8 03 ba       	if ((r0 & 8388608) != 0) goto 6 <lcd_spi_draw+0x40 : 10901c >			  ## imd_spi.c:580:14
  109016:    08 ef 80 48       	[r4+32] |= 0x400000			  ## imd_spi.c:583:3
  10901a:    04 83             	goto 6 <lcd_spi_draw+0x46 : 109022 >			  ## imd_spi.c:583:3
  10901c:    40 21             	r0 = 1			  ## imd_spi.c:581:3
  10901e:    bf ea 12 f8       	call -4060 <lcd_dc : 108046 >			  ## imd_spi.c:581:3
  109022:    08 ef 80 47       	[r4+32] |= 0x1000000			  ## imd_spi.c:585:2
  109026:    08 ef 02 40       	[r4+32] |= 0x2			  ## imd_spi.c:587:22
  10902a:    54 04             	{pc, r4} = [sp++]			  ## imd_spi.c:588:1


imd_spi_io_disable:
  10902c:    c0 ff 00 50 fd 00 	r0 = 16601088 <_HEAP_END+0xD5A000 : fd5000 >			  ## imd_spi.c:33:0
  109032:    c2 ef 78 0e       	[r0+8] &= 0xFFFFF07F			  ## imd_spi.c:36:19
  109036:    c0 ef 78 0e       	[r0+0] &= 0xFFFFF07F			  ## imd_spi.c:37:19
  10903a:    c0 ff 18 2d fe 00 	r0 = 16657688 <_HEAP_END+0xD67D18 : fe2d18 >			  ## imd_spi.c:38:5
  109040:    c0 ef f8 0b       	[r0+0] &= 0xFFFE0FFF			  ## imd_spi.c:38:5
  109044:    80 00             	rts			  ## imd_spi.c:39:1


imd_spi_isr:
  109046:    76 04             	[--sp] = {rets, r6-r4}			  ## imd_spi.c:756:0
  109048:    e2 9e             	sp += -8			  ## imd_spi.c:756:0
  10904a:    c0 ff 20 2d fe 00 	r0 = 16657696 <_HEAP_END+0xD67D20 : fe2d20 >			  ## imd_spi.c:756:0
  109050:    01 60             	r1 = [r0+0] 			  ## imd_spi.c:760:10
  109052:    51 e8 03 e8       	if ((r1 & 536870912) == 0) goto 6 <imd_spi_isr+0x16 : 10905c >			  ## imd_spi.c:760:10
  109056:    01 60             	r1 = [r0+0] 			  ## imd_spi.c:763:14
  109058:    f1 fe 02 fe       	ifs (r1 <= -1) goto 4 <imd_spi_isr+0x1A : 109060 >			  ## imd_spi.c:763:14
  10905c:    02 82             	sp += 8
  10905e:    56 04             	{pc, r6-r4} = [sp++]			  ## imd_spi.c:972:1
  109060:    00 ef 80 04       	[r0+0] |= 0x40000000			  ## imd_spi.c:764:23
  109064:    bf ea 21 ee       	call -9150 <lcd_qspi_st77903_mode : 106caa >			  ## imd_spi.c:767:13
  109068:    c6 ff 00 c8 10 00 	r6 = 1099776 <backlight_status : 10c800 >			  ## imd_spi.c:767:13
  10906e:    00 5c             	if (r0 == 0) goto 56 <imd_spi_isr+0x62 : 1090a8 >			  ## imd_spi.c:767:13
  109070:    d0 ec 68 14       	r1 = [r6+72]			  ## imd_spi.c:712:25
  109074:    d0 ec 6c 04       	r0 = [r6+76]			  ## imd_spi.c:712:25
  109078:    c4 ff 44 c4 10 00 	r4 = 1098820 <line_begin_cmd.157 : 10c444 >			  ## imd_spi.c:712:25
  10907e:    c5 ff 5e ba 10 00 	r5 = 1096286 <imd_clock_init.div+0x9E : 10ba5e >			  ## imd_spi.c:712:25
  109084:    81 f8 1e 04       	if (r1 != 2) goto 60 <imd_spi_isr+0x7E : 1090c4 >			  ## imd_spi.c:768:17
  109088:    80 f8 35 02       	if (r0 != 1) goto 106 <imd_spi_isr+0xB0 : 1090f6 >			  ## imd_spi.c:769:21
  10908c:    61 8f             	call -98 <imd_spi_io_disable : 10902c >			  ## imd_spi.c:770:21
  10908e:    64 16             	r4 = r6			  ## imd_spi.c:771:51
  109090:    d0 ec 42 05       	r0 = [++r4=80]			  ## imd_spi.c:771:51
  109094:    42 62             	r2 = [r4+8] 			  ## imd_spi.c:771:74
  109096:    41 21             	r1 = 1			  ## imd_spi.c:771:21
  109098:    bf ea 4c ee       	call -9064 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:771:21
  10909c:    80 14             	r1_r0 = 0			  ## imd_spi.c:772:21
  10909e:    45 20             	r5 = 0			  ## imd_spi.c:772:21
  1090a0:    bf ea a4 ee       	call -8888 <lcd_draw : 106dec >			  ## imd_spi.c:772:21
  1090a4:    c5 65             	[r4+20] = r5			  ## imd_spi.c:774:49
  1090a6:    25 80             	goto 1152 <imd_spi_isr+0x4E2 : 109528 >			  ## imd_spi.c:774:49
  1090a8:    40 21             	r0 = 1			  ## imd_spi.c:954:13
  1090aa:    44 21             	r4 = 1			  ## imd_spi.c:954:13
  1090ac:    bf ea c0 f7       	call -4224 <lcd_cs : 108030 >			  ## imd_spi.c:954:13
  1090b0:    60 6d             	r0 = [r6+52] 			  ## imd_spi.c:965:13
  1090b2:    8c 40             	b[r0+0] = r4			  ## imd_spi.c:965:28
  1090b4:    41 20             	r1 = 0			  ## imd_spi.c:965:28
  1090b6:    89 41             	b[r0+1] = r1			  ## imd_spi.c:966:29
  1090b8:    d0 ec 0c 15       	r1 = [r0+92]			  ## imd_spi.c:967:24
  1090bc:    61 4f             	if (r1 == 0) goto -98 <imd_spi_isr+0x16 : 10905c >			  ## imd_spi.c:967:24
  1090be:    40 20             	r0 = 0			  ## imd_spi.c:968:17
  1090c0:    c1 00             	call r1			  ## imd_spi.c:968:17
  1090c2:    e7 8c             	goto -104 <imd_spi_isr+0x16 : 10905c >			  ## imd_spi.c:968:17
  1090c4:    80 f8 46 02       	if (r0 != 1) goto 140 <imd_spi_isr+0x10E : 109154 >			  ## imd_spi.c:855:21
  1090c8:    51 91             	call -158 <imd_spi_io_disable : 10902c >			  ## imd_spi.c:856:21
  1090ca:    64 16             	r4 = r6			  ## imd_spi.c:857:51
  1090cc:    d0 ec 42 05       	r0 = [++r4=80]			  ## imd_spi.c:857:51
  1090d0:    42 62             	r2 = [r4+8] 			  ## imd_spi.c:857:74
  1090d2:    41 21             	r1 = 1			  ## imd_spi.c:857:21
  1090d4:    bf ea 2e ee       	call -9124 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:857:21
  1090d8:    80 14             	r1_r0 = 0			  ## imd_spi.c:858:21
  1090da:    45 20             	r5 = 0			  ## imd_spi.c:858:21
  1090dc:    bf ea 86 ee       	call -8948 <lcd_draw : 106dec >			  ## imd_spi.c:858:21
  1090e0:    c5 65             	[r4+20] = r5			  ## imd_spi.c:860:49
  1090e2:    60 16             	r0 = r6			  ## imd_spi.c:945:34
  1090e4:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:945:34
  1090e8:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:945:69
  1090ea:    03 62             	r3 = [r0+8] 			  ## imd_spi.c:945:99
  1090ec:    00 65             	r0 = [r0+20] 			  ## imd_spi.c:945:120
  1090ee:    20 18             	r0 += r2			  ## imd_spi.c:945:120
  1090f0:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:945:120
  1090f2:    30 18             	r0 += r3			  ## imd_spi.c:945:84
  1090f4:    15 82             	goto 1092 <imd_spi_isr+0x4F4 : 10953a >			  ## imd_spi.c:945:84
  1090f6:    d0 ec 6c 04       	r0 = [r6+76]			  ## imd_spi.c:775:42
  1090fa:    d0 ec 64 16       	r1 = [r6+100]			  ## imd_spi.c:775:78
  1090fe:    11 a1             	r1 = r1 << 1			  ## imd_spi.c:775:93
  109100:    c1 22             	r1 += 2			  ## imd_spi.c:775:63
  109102:    81 e8 56 00       	if (r0 != r1) goto 172 <imd_spi_isr+0x16C : 1091b2 >			  ## imd_spi.c:775:63
  109106:    d0 ec 6c 04       	r0 = [r6+76]			  ## imd_spi.c:775:116
  10910a:    d0 ec 6c 15       	r1 = [r6+92]			  ## imd_spi.c:775:151
  10910e:    11 a1             	r1 = r1 << 1			  ## imd_spi.c:775:162
  109110:    c1 22             	r1 += 2			  ## imd_spi.c:775:136
  109112:    01 ed 4e 00       	ifs (r0 >= r1) goto 156 <imd_spi_isr+0x16C : 1091b2 >			  ## imd_spi.c:775:136
  109116:    bf ea 00 ee       	call -9216 <imd_spi_io_enable : 106d1a >			  ## imd_spi.c:776:21
  10911a:    40 21             	r0 = 1			  ## imd_spi.c:777:21
  10911c:    bf ea 88 f7       	call -4336 <lcd_cs : 108030 >			  ## imd_spi.c:777:21
  109120:    40 20             	r0 = 0			  ## imd_spi.c:779:21
  109122:    bf ea 85 f7       	call -4342 <lcd_cs : 108030 >			  ## imd_spi.c:779:21
  109126:    40 28             	r0 = 8			  ## imd_spi.c:780:21
  109128:    41 21             	r1 = 1			  ## imd_spi.c:780:21
  10912a:    42 30             	r2 = 16			  ## imd_spi.c:780:21
  10912c:    bf ea 02 ee       	call -9212 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:780:21
  109130:    60 ff 03 40 77 01 	if ((r4 & 0x3) == 0) goto 750 <imd_spi_isr+0x3DE : 109424 >			  ## imd_spi.c:780:21
  109136:    02 e1 e0 54       	r2 = r5 + 1248			  ## imd_spi.c:781:21
  10913a:    41 20             	r1 = 0			  ## imd_spi.c:781:21
  10913c:    43 e0 0d 03       	r3 = 781 <_MASK_MEM_SIZE+0x169 : 30d >			  ## imd_spi.c:781:21
  109140:    50 16             	r0 = r5			  ## imd_spi.c:781:21
  109142:    80 ff bc 6c f1 ff 	call -955204 <printf : 1fe04 >			  ## imd_spi.c:781:21
  109148:    00 e1 06 52       	r0 = r5 + 518			  ## imd_spi.c:781:21
  10914c:    80 ff b2 6c f1 ff 	call -955214 <printf : 1fe04 >			  ## imd_spi.c:781:21
  109152:    f7 9f             	goto -2 <imd_spi_isr+0x10C : 109152 >			  ## imd_spi.c:781:21
  109154:    d0 ec 6c 04       	r0 = [r6+76]			  ## imd_spi.c:861:42
  109158:    d0 ec 64 16       	r1 = [r6+100]			  ## imd_spi.c:861:78
  10915c:    11 a1             	r1 = r1 << 1			  ## imd_spi.c:861:93
  10915e:    c1 22             	r1 += 2			  ## imd_spi.c:861:63
  109160:    81 e8 52 00       	if (r0 != r1) goto 164 <imd_spi_isr+0x1C2 : 109208 >			  ## imd_spi.c:861:63
  109164:    d0 ec 6c 04       	r0 = [r6+76]			  ## imd_spi.c:861:116
  109168:    d0 ec 6c 15       	r1 = [r6+92]			  ## imd_spi.c:861:151
  10916c:    11 a1             	r1 = r1 << 1			  ## imd_spi.c:861:162
  10916e:    c1 22             	r1 += 2			  ## imd_spi.c:861:136
  109170:    01 ed 4a 00       	ifs (r0 >= r1) goto 148 <imd_spi_isr+0x1C2 : 109208 >			  ## imd_spi.c:861:136
  109174:    bf ea d1 ed       	call -9310 <imd_spi_io_enable : 106d1a >			  ## imd_spi.c:862:21
  109178:    40 21             	r0 = 1			  ## imd_spi.c:863:21
  10917a:    bf ea 59 f7       	call -4430 <lcd_cs : 108030 >			  ## imd_spi.c:863:21
  10917e:    40 20             	r0 = 0			  ## imd_spi.c:865:21
  109180:    bf ea 56 f7       	call -4436 <lcd_cs : 108030 >			  ## imd_spi.c:865:21
  109184:    40 28             	r0 = 8			  ## imd_spi.c:866:21
  109186:    41 21             	r1 = 1			  ## imd_spi.c:866:21
  109188:    42 30             	r2 = 16			  ## imd_spi.c:866:21
  10918a:    bf ea d3 ed       	call -9306 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:866:21
  10918e:    60 ff 03 40 1e 01 	if ((r4 & 0x3) == 0) goto 572 <imd_spi_isr+0x38A : 1093d0 >			  ## imd_spi.c:866:21
  109194:    02 e1 e0 54       	r2 = r5 + 1248			  ## imd_spi.c:867:21
  109198:    41 20             	r1 = 0			  ## imd_spi.c:867:21
  10919a:    43 e0 63 03       	r3 = 867 <_MASK_MEM_SIZE+0x1BF : 363 >			  ## imd_spi.c:867:21
  10919e:    50 16             	r0 = r5			  ## imd_spi.c:867:21
  1091a0:    80 ff 5e 6c f1 ff 	call -955298 <printf : 1fe04 >			  ## imd_spi.c:867:21
  1091a6:    00 e1 06 52       	r0 = r5 + 518			  ## imd_spi.c:867:21
  1091aa:    80 ff 54 6c f1 ff 	call -955308 <printf : 1fe04 >			  ## imd_spi.c:867:21
  1091b0:    f7 9f             	goto -2 <imd_spi_isr+0x16A : 1091b0 >			  ## imd_spi.c:867:21
  1091b2:    d0 ec 6c 04       	r0 = [r6+76]			  ## imd_spi.c:784:42
  1091b6:    d0 ec 64 16       	r1 = [r6+100]			  ## imd_spi.c:784:78
  1091ba:    11 a1             	r1 = r1 << 1			  ## imd_spi.c:784:93
  1091bc:    c1 23             	r1 += 3			  ## imd_spi.c:784:97
  1091be:    81 e8 4d 00       	if (r0 != r1) goto 154 <imd_spi_isr+0x216 : 10925c >			  ## imd_spi.c:784:97
  1091c2:    d0 ec 6c 04       	r0 = [r6+76]			  ## imd_spi.c:784:120
  1091c6:    d0 ec 6c 15       	r1 = [r6+92]			  ## imd_spi.c:784:155
  1091ca:    11 a1             	r1 = r1 << 1			  ## imd_spi.c:784:166
  1091cc:    c1 23             	r1 += 3			  ## imd_spi.c:784:170
  1091ce:    01 ed 45 00       	ifs (r0 >= r1) goto 138 <imd_spi_isr+0x216 : 10925c >			  ## imd_spi.c:784:170
  1091d2:    bf ea 2b ff       	call -426 <imd_spi_io_disable : 10902c >			  ## imd_spi.c:785:21
  1091d6:    65 16             	r5 = r6			  ## imd_spi.c:786:51
  1091d8:    d0 ec 52 05       	r0 = [++r5=80]			  ## imd_spi.c:786:51
  1091dc:    52 62             	r2 = [r5+8] 			  ## imd_spi.c:786:74
  1091de:    41 21             	r1 = 1			  ## imd_spi.c:786:21
  1091e0:    bf ea a8 ed       	call -9392 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:786:21
  1091e4:    80 14             	r1_r0 = 0			  ## imd_spi.c:787:21
  1091e6:    44 20             	r4 = 0			  ## imd_spi.c:787:21
  1091e8:    bf ea 00 ee       	call -9216 <lcd_draw : 106dec >			  ## imd_spi.c:787:21
  1091ec:    c5 eb 01 50       	[r5+20] += 1			  ## imd_spi.c:789:48
  1091f0:    50 65             	r0 = [r5+20] 			  ## imd_spi.c:791:38
  1091f2:    51 63             	r1 = [r5+12] 			  ## imd_spi.c:791:69
  1091f4:    41 ff 00 01 97 01 	if (r0 != r1) goto 814 <imd_spi_isr+0x4E2 : 109528 >			  ## imd_spi.c:791:69
  1091fa:    00 e1 6c 60       	r0 = r6 + 108
  1091fe:    84 62             	[r0+8] = r4			  ## imd_spi.c:792:40
  109200:    01 61             	r1 = [r0+4] 			  ## imd_spi.c:793:55
  109202:    81 63             	[r0+12] = r1			  ## imd_spi.c:793:40
  109204:    84 60             	[r0+0] = r4			  ## imd_spi.c:794:50
  109206:    c4 90             	goto 800 <imd_spi_isr+0x4E2 : 109528 >			  ## imd_spi.c:794:50
  109208:    d0 ec 6c 04       	r0 = [r6+76]			  ## imd_spi.c:870:42
  10920c:    d0 ec 64 16       	r1 = [r6+100]			  ## imd_spi.c:870:78
  109210:    11 a1             	r1 = r1 << 1			  ## imd_spi.c:870:93
  109212:    c1 23             	r1 += 3			  ## imd_spi.c:870:97
  109214:    81 e8 55 00       	if (r0 != r1) goto 170 <imd_spi_isr+0x27C : 1092c2 >			  ## imd_spi.c:870:97
  109218:    d0 ec 6c 04       	r0 = [r6+76]			  ## imd_spi.c:870:120
  10921c:    d0 ec 6c 15       	r1 = [r6+92]			  ## imd_spi.c:870:155
  109220:    11 a1             	r1 = r1 << 1			  ## imd_spi.c:870:166
  109222:    c1 23             	r1 += 3			  ## imd_spi.c:870:170
  109224:    01 ed 4d 00       	ifs (r0 >= r1) goto 154 <imd_spi_isr+0x27C : 1092c2 >			  ## imd_spi.c:870:170
  109228:    bf ea 00 ff       	call -512 <imd_spi_io_disable : 10902c >			  ## imd_spi.c:871:21
  10922c:    65 16             	r5 = r6			  ## imd_spi.c:872:51
  10922e:    d0 ec 52 05       	r0 = [++r5=80]			  ## imd_spi.c:872:51
  109232:    52 62             	r2 = [r5+8] 			  ## imd_spi.c:872:74
  109234:    41 21             	r1 = 1			  ## imd_spi.c:872:21
  109236:    bf ea 7d ed       	call -9478 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:872:21
  10923a:    80 14             	r1_r0 = 0			  ## imd_spi.c:873:21
  10923c:    44 20             	r4 = 0			  ## imd_spi.c:873:21
  10923e:    bf ea d5 ed       	call -9302 <lcd_draw : 106dec >			  ## imd_spi.c:873:21
  109242:    c5 eb 01 50       	[r5+20] += 1			  ## imd_spi.c:875:48
  109246:    50 65             	r0 = [r5+20] 			  ## imd_spi.c:877:38
  109248:    51 63             	r1 = [r5+12] 			  ## imd_spi.c:877:69
  10924a:    81 e8 4a 01       	if (r0 != r1) goto -364 <imd_spi_isr+0x9C : 1090e2 >			  ## imd_spi.c:877:69
  10924e:    00 e1 6c 60       	r0 = r6 + 108
  109252:    84 62             	[r0+8] = r4			  ## imd_spi.c:878:40
  109254:    01 61             	r1 = [r0+4] 			  ## imd_spi.c:879:55
  109256:    81 63             	[r0+12] = r1			  ## imd_spi.c:879:40
  109258:    84 60             	[r0+0] = r4			  ## imd_spi.c:880:50
  10925a:    a7 83             	goto -378 <imd_spi_isr+0x9C : 1090e2 >			  ## imd_spi.c:880:50
  10925c:    60 16             	r0 = r6			  ## imd_spi.c:796:42
  10925e:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:796:42
  109262:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:796:78
  109264:    00 6a             	r0 = [r0+40] 			  ## imd_spi.c:796:108
  109266:    20 18             	r0 += r2			  ## imd_spi.c:796:108
  109268:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:796:108
  10926a:    c0 22             	r0 += 2			  ## imd_spi.c:796:93
  10926c:    80 e8 60 10       	if (r1 != r0) goto 192 <imd_spi_isr+0x2EA : 109330 >			  ## imd_spi.c:796:93
  109270:    60 16             	r0 = r6			  ## imd_spi.c:796:133
  109272:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:796:133
  109276:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:796:168
  109278:    00 62             	r0 = [r0+8] 			  ## imd_spi.c:796:198
  10927a:    20 18             	r0 += r2			  ## imd_spi.c:796:198
  10927c:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:796:198
  10927e:    c0 22             	r0 += 2			  ## imd_spi.c:796:183
  109280:    00 ed 56 10       	ifs (r1 >= r0) goto 172 <imd_spi_isr+0x2EA : 109330 >			  ## imd_spi.c:796:183
  109284:    bf ea 49 ed       	call -9582 <imd_spi_io_enable : 106d1a >			  ## imd_spi.c:797:21
  109288:    40 21             	r0 = 1			  ## imd_spi.c:798:21
  10928a:    bf ea d1 f6       	call -4702 <lcd_cs : 108030 >			  ## imd_spi.c:798:21
  10928e:    40 20             	r0 = 0			  ## imd_spi.c:800:21
  109290:    bf ea ce f6       	call -4708 <lcd_cs : 108030 >			  ## imd_spi.c:800:21
  109294:    40 28             	r0 = 8			  ## imd_spi.c:802:21
  109296:    41 21             	r1 = 1			  ## imd_spi.c:802:21
  109298:    42 30             	r2 = 16			  ## imd_spi.c:802:21
  10929a:    bf ea 4b ed       	call -9578 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:802:21
  10929e:    60 ff 03 40 c0 00 	if ((r4 & 0x3) == 0) goto 384 <imd_spi_isr+0x3DE : 109424 >			  ## imd_spi.c:802:21
  1092a4:    02 e1 e0 54       	r2 = r5 + 1248			  ## imd_spi.c:803:21
  1092a8:    41 20             	r1 = 0			  ## imd_spi.c:803:21
  1092aa:    43 e0 23 03       	r3 = 803 <_MASK_MEM_SIZE+0x17F : 323 >			  ## imd_spi.c:803:21
  1092ae:    50 16             	r0 = r5			  ## imd_spi.c:803:21
  1092b0:    80 ff 4e 6b f1 ff 	call -955570 <printf : 1fe04 >			  ## imd_spi.c:803:21
  1092b6:    00 e1 06 52       	r0 = r5 + 518			  ## imd_spi.c:803:21
  1092ba:    80 ff 44 6b f1 ff 	call -955580 <printf : 1fe04 >			  ## imd_spi.c:803:21
  1092c0:    f7 9f             	goto -2 <imd_spi_isr+0x27A : 1092c0 >			  ## imd_spi.c:803:21
  1092c2:    60 16             	r0 = r6			  ## imd_spi.c:882:42
  1092c4:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:882:42
  1092c8:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:882:78
  1092ca:    00 6a             	r0 = [r0+40] 			  ## imd_spi.c:882:108
  1092cc:    22 a1             	r2 = r2 << 1			  ## imd_spi.c:882:89
  1092ce:    20 18             	r0 += r2			  ## imd_spi.c:882:63
  1092d0:    c0 22             	r0 += 2			  ## imd_spi.c:882:93
  1092d2:    80 e8 58 10       	if (r1 != r0) goto 176 <imd_spi_isr+0x340 : 109386 >			  ## imd_spi.c:882:93
  1092d6:    60 16             	r0 = r6			  ## imd_spi.c:882:129
  1092d8:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:882:129
  1092dc:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:882:164
  1092de:    00 62             	r0 = [r0+8] 			  ## imd_spi.c:882:194
  1092e0:    22 a1             	r2 = r2 << 1			  ## imd_spi.c:882:175
  1092e2:    20 18             	r0 += r2			  ## imd_spi.c:882:149
  1092e4:    c0 22             	r0 += 2			  ## imd_spi.c:882:179
  1092e6:    00 ed 4e 10       	ifs (r1 >= r0) goto 156 <imd_spi_isr+0x340 : 109386 >			  ## imd_spi.c:882:179
  1092ea:    bf ea 16 ed       	call -9684 <imd_spi_io_enable : 106d1a >			  ## imd_spi.c:883:21
  1092ee:    40 21             	r0 = 1			  ## imd_spi.c:884:21
  1092f0:    bf ea 9e f6       	call -4804 <lcd_cs : 108030 >			  ## imd_spi.c:884:21
  1092f4:    40 20             	r0 = 0			  ## imd_spi.c:886:21
  1092f6:    bf ea 9b f6       	call -4810 <lcd_cs : 108030 >			  ## imd_spi.c:886:21
  1092fa:    d0 ec 68 04       	r0 = [r6+72]			  ## imd_spi.c:712:25
  1092fe:    00 ff 00 00 44 01 	if (r0 == 0) goto 648 <imd_spi_isr+0x546 : 10958c >			  ## imd_spi.c:712:25
  109304:    64 16             	r4 = r6			  ## imd_spi.c:904:55
  109306:    d0 ec 42 05       	r0 = [++r4=80]			  ## imd_spi.c:904:55
  10930a:    42 62             	r2 = [r4+8] 			  ## imd_spi.c:904:78
  10930c:    41 21             	r1 = 1			  ## imd_spi.c:904:25
  10930e:    bf ea 11 ed       	call -9694 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:904:25
  109312:    40 6a             	r0 = [r4+40] 			  ## imd_spi.c:906:43
  109314:    23 ff 00 07 35 01 	if (r0 < 33554432) goto 618 <imd_spi_isr+0x53E : 109584 >			  ## imd_spi.c:906:43
  10931a:    d0 ec 68 07       	r0 = [r6+120]			  ## imd_spi.c:906:76
  10931e:    80 b8             	r0 = r0 >> 24			  ## imd_spi.c:906:29
  109320:    08 ff 02 00 2f 01 	if (r0 > 2) goto 606 <imd_spi_isr+0x53E : 109584 >			  ## imd_spi.c:906:29
  109326:    d0 ec 68 07       	r0 = [r6+120]			  ## imd_spi.c:907:46
  10932a:    e1 e0 80 07       	r1 = r0 + 0x1000000			  ## imd_spi.c:907:48
  10932e:    94 8c             	goto 600 <imd_spi_isr+0x542 : 109588 >			  ## imd_spi.c:907:48
  109330:    60 16             	r0 = r6			  ## imd_spi.c:806:42
  109332:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:806:42
  109336:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:806:78
  109338:    00 6a             	r0 = [r0+40] 			  ## imd_spi.c:806:108
  10933a:    20 18             	r0 += r2			  ## imd_spi.c:806:108
  10933c:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:806:108
  10933e:    c0 22             	r0 += 2			  ## imd_spi.c:806:93
  109340:    30 20             	r0 |= 1			  ## imd_spi.c:806:114
  109342:    80 e8 4a 10       	if (r1 != r0) goto 148 <imd_spi_isr+0x394 : 1093da >			  ## imd_spi.c:806:114
  109346:    60 16             	r0 = r6			  ## imd_spi.c:806:137
  109348:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:806:137
  10934c:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:806:172
  10934e:    00 62             	r0 = [r0+8] 			  ## imd_spi.c:806:202
  109350:    20 18             	r0 += r2			  ## imd_spi.c:806:202
  109352:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:806:202
  109354:    c0 22             	r0 += 2			  ## imd_spi.c:806:187
  109356:    30 20             	r0 |= 1			  ## imd_spi.c:806:212
  109358:    00 ed 3f 10       	ifs (r1 >= r0) goto 126 <imd_spi_isr+0x394 : 1093da >			  ## imd_spi.c:806:212
  10935c:    64 16             	r4 = r6			  ## imd_spi.c:807:51
  10935e:    d0 ec 42 05       	r0 = [++r4=80]			  ## imd_spi.c:807:51
  109362:    42 62             	r2 = [r4+8] 			  ## imd_spi.c:807:74
  109364:    41 21             	r1 = 1			  ## imd_spi.c:807:21
  109366:    bf ea e5 ec       	call -9782 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:807:21
  10936a:    40 6a             	r0 = [r4+40] 			  ## imd_spi.c:809:39
  10936c:    23 ff 00 07 c6 00 	if (r0 < 33554432) goto 396 <imd_spi_isr+0x4B8 : 1094fe >			  ## imd_spi.c:809:39
  109372:    d0 ec 68 07       	r0 = [r6+120]			  ## imd_spi.c:809:72
  109376:    80 b8             	r0 = r0 >> 24			  ## imd_spi.c:809:25
  109378:    00 fc c1 04       	if (r0 > 2) goto 386 <imd_spi_isr+0x4B8 : 1094fe >			  ## imd_spi.c:809:25
  10937c:    d0 ec 68 07       	r0 = [r6+120]			  ## imd_spi.c:810:42
  109380:    e1 e0 80 07       	r1 = r0 + 0x1000000			  ## imd_spi.c:810:44
  109384:    54 9e             	goto 380 <imd_spi_isr+0x4BC : 109502 >			  ## imd_spi.c:810:44
  109386:    60 16             	r0 = r6			  ## imd_spi.c:921:42
  109388:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:921:42
  10938c:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:921:78
  10938e:    03 62             	r3 = [r0+8] 			  ## imd_spi.c:921:108
  109390:    00 67             	r0 = [r0+28] 			  ## imd_spi.c:921:129
  109392:    20 18             	r0 += r2			  ## imd_spi.c:921:129
  109394:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:921:129
  109396:    30 18             	r0 += r3			  ## imd_spi.c:921:93
  109398:    c0 22             	r0 += 2			  ## imd_spi.c:921:114
  10939a:    80 e8 48 10       	if (r1 != r0) goto 144 <imd_spi_isr+0x3E8 : 10942e >			  ## imd_spi.c:921:114
  10939e:    60 16             	r0 = r6			  ## imd_spi.c:921:168
  1093a0:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:921:168
  1093a4:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:921:203
  1093a6:    03 62             	r3 = [r0+8] 			  ## imd_spi.c:921:233
  1093a8:    00 65             	r0 = [r0+20] 			  ## imd_spi.c:921:254
  1093aa:    20 18             	r0 += r2			  ## imd_spi.c:921:254
  1093ac:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:921:254
  1093ae:    30 18             	r0 += r3			  ## imd_spi.c:921:218
  1093b0:    c0 22             	r0 += 2			  ## imd_spi.c:921:239
  1093b2:    00 ed 3c 10       	ifs (r1 >= r0) goto 120 <imd_spi_isr+0x3E8 : 10942e >			  ## imd_spi.c:921:239
  1093b6:    bf ea b0 ec       	call -9888 <imd_spi_io_enable : 106d1a >			  ## imd_spi.c:922:21
  1093ba:    40 21             	r0 = 1			  ## imd_spi.c:923:21
  1093bc:    bf ea 38 f6       	call -5008 <lcd_cs : 108030 >			  ## imd_spi.c:923:21
  1093c0:    40 20             	r0 = 0			  ## imd_spi.c:925:21
  1093c2:    bf ea 35 f6       	call -5014 <lcd_cs : 108030 >			  ## imd_spi.c:925:21
  1093c6:    40 28             	r0 = 8			  ## imd_spi.c:927:21
  1093c8:    41 21             	r1 = 1			  ## imd_spi.c:927:21
  1093ca:    42 30             	r2 = 16			  ## imd_spi.c:927:21
  1093cc:    bf ea b2 ec       	call -9884 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:927:21
  1093d0:    40 21             	r0 = 1
  1093d2:    41 16             	r1 = r4
  1093d4:    bf ea 0a ed       	call -9708 <lcd_draw : 106dec >
  1093d8:    47 84             	goto -760 <imd_spi_isr+0x9C : 1090e2 >
  1093da:    60 16             	r0 = r6			  ## imd_spi.c:823:42
  1093dc:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:823:42
  1093e0:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:823:78
  1093e2:    03 62             	r3 = [r0+8] 			  ## imd_spi.c:823:108
  1093e4:    32 d8             	r2 += r3  #			  ## imd_spi.c:823:108
  1093e6:    00 67             		 r0 = [r0+28] 			  ## imd_spi.c:823:133
  1093e8:    20 18             	r0 += r2			  ## imd_spi.c:823:133
  1093ea:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:823:133
  1093ec:    c0 22             	r0 += 2			  ## imd_spi.c:823:118
  1093ee:    80 e8 49 10       	if (r1 != r0) goto 146 <imd_spi_isr+0x43E : 109484 >			  ## imd_spi.c:823:118
  1093f2:    60 16             	r0 = r6			  ## imd_spi.c:823:172
  1093f4:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:823:172
  1093f8:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:823:207
  1093fa:    03 62             	r3 = [r0+8] 			  ## imd_spi.c:823:237
  1093fc:    32 d8             	r2 += r3  #			  ## imd_spi.c:823:237
  1093fe:    00 65             		 r0 = [r0+20] 			  ## imd_spi.c:823:262
  109400:    20 18             	r0 += r2			  ## imd_spi.c:823:262
  109402:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:823:262
  109404:    c0 22             	r0 += 2			  ## imd_spi.c:823:247
  109406:    00 ed 3d 10       	ifs (r1 >= r0) goto 122 <imd_spi_isr+0x43E : 109484 >			  ## imd_spi.c:823:247
  10940a:    bf ea 86 ec       	call -9972 <imd_spi_io_enable : 106d1a >			  ## imd_spi.c:824:21
  10940e:    40 21             	r0 = 1			  ## imd_spi.c:825:21
  109410:    bf ea 0e f6       	call -5092 <lcd_cs : 108030 >			  ## imd_spi.c:825:21
  109414:    40 20             	r0 = 0			  ## imd_spi.c:827:21
  109416:    bf ea 0b f6       	call -5098 <lcd_cs : 108030 >			  ## imd_spi.c:827:21
  10941a:    40 28             	r0 = 8			  ## imd_spi.c:829:21
  10941c:    41 21             	r1 = 1			  ## imd_spi.c:829:21
  10941e:    42 30             	r2 = 16			  ## imd_spi.c:829:21
  109420:    bf ea 88 ec       	call -9968 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:829:21
  109424:    40 21             	r0 = 1
  109426:    41 16             	r1 = r4
  109428:    bf ea e0 ec       	call -9792 <lcd_draw : 106dec >
  10942c:    34 9d             	goto 250 <imd_spi_isr+0x4E2 : 109528 >
  10942e:    60 16             	r0 = r6			  ## imd_spi.c:930:42
  109430:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:930:42
  109434:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:930:78
  109436:    03 62             	r3 = [r0+8] 			  ## imd_spi.c:930:108
  109438:    00 67             	r0 = [r0+28] 			  ## imd_spi.c:930:129
  10943a:    20 18             	r0 += r2			  ## imd_spi.c:930:129
  10943c:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:930:129
  10943e:    30 18             	r0 += r3			  ## imd_spi.c:930:114
  109440:    c0 23             	r0 += 3			  ## imd_spi.c:930:149
  109442:    80 e8 0c 10       	if (r1 != r0) goto 24 <imd_spi_isr+0x418 : 10945e >			  ## imd_spi.c:930:149
  109446:    60 16             	r0 = r6			  ## imd_spi.c:930:172
  109448:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:930:172
  10944c:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:930:207
  10944e:    03 62             	r3 = [r0+8] 			  ## imd_spi.c:930:237
  109450:    00 65             	r0 = [r0+20] 			  ## imd_spi.c:930:258
  109452:    20 18             	r0 += r2			  ## imd_spi.c:930:258
  109454:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:930:258
  109456:    30 18             	r0 += r3			  ## imd_spi.c:930:222
  109458:    c0 22             	r0 += 2			  ## imd_spi.c:930:243
  10945a:    80 ee 82 10       	ifs (r1 <= r0) goto 260 <imd_spi_isr+0x51C : 109562 >			  ## imd_spi.c:930:243
  10945e:    60 16             	r0 = r6			  ## imd_spi.c:940:41
  109460:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:940:41
  109464:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:940:77
  109466:    03 62             	r3 = [r0+8] 			  ## imd_spi.c:940:107
  109468:    00 65             	r0 = [r0+20] 			  ## imd_spi.c:940:128
  10946a:    20 18             	r0 += r2			  ## imd_spi.c:940:128
  10946c:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:940:128
  10946e:    30 18             	r0 += r3			  ## imd_spi.c:940:92
  109470:    c0 22             	r0 += 2			  ## imd_spi.c:940:113
  109472:    41 ff 00 10 35 fe 	if (r1 != r0) goto -918 <imd_spi_isr+0x9C : 1090e2 >			  ## imd_spi.c:940:113
  109478:    bf ea 4f ec       	call -10082 <imd_spi_io_enable : 106d1a >			  ## imd_spi.c:941:21
  10947c:    40 21             	r0 = 1			  ## imd_spi.c:942:21
  10947e:    bf ea d7 f5       	call -5202 <lcd_cs : 108030 >			  ## imd_spi.c:942:21
  109482:    17 8f             	goto -930 <imd_spi_isr+0x9C : 1090e2 >			  ## imd_spi.c:942:21
  109484:    60 16             	r0 = r6			  ## imd_spi.c:832:42
  109486:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:832:42
  10948a:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:832:78
  10948c:    03 62             	r3 = [r0+8] 			  ## imd_spi.c:832:108
  10948e:    32 d8             	r2 += r3  #			  ## imd_spi.c:832:108
  109490:    00 67             		 r0 = [r0+28] 			  ## imd_spi.c:832:133
  109492:    20 18             	r0 += r2			  ## imd_spi.c:832:133
  109494:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:832:133
  109496:    c0 22             	r0 += 2			  ## imd_spi.c:832:118
  109498:    30 20             	r0 |= 1			  ## imd_spi.c:832:153
  10949a:    80 e8 1e 10       	if (r1 != r0) goto 60 <imd_spi_isr+0x494 : 1094da >			  ## imd_spi.c:832:153
  10949e:    60 16             	r0 = r6			  ## imd_spi.c:832:176
  1094a0:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:832:176
  1094a4:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:832:211
  1094a6:    03 62             	r3 = [r0+8] 			  ## imd_spi.c:832:241
  1094a8:    32 d8             	r2 += r3  #			  ## imd_spi.c:832:241
  1094aa:    00 65             		 r0 = [r0+20] 			  ## imd_spi.c:832:266
  1094ac:    20 18             	r0 += r2			  ## imd_spi.c:832:266
  1094ae:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:832:266
  1094b0:    c0 22             	r0 += 2			  ## imd_spi.c:832:251
  1094b2:    30 20             	r0 |= 1			  ## imd_spi.c:832:282
  1094b4:    00 ed 11 10       	ifs (r1 >= r0) goto 34 <imd_spi_isr+0x494 : 1094da >			  ## imd_spi.c:832:282
  1094b8:    bf ea b8 fd       	call -1168 <imd_spi_io_disable : 10902c >			  ## imd_spi.c:833:21
  1094bc:    64 16             	r4 = r6			  ## imd_spi.c:834:51
  1094be:    d0 ec 42 05       	r0 = [++r4=80]			  ## imd_spi.c:834:51
  1094c2:    42 62             	r2 = [r4+8] 			  ## imd_spi.c:834:74
  1094c4:    41 21             	r1 = 1			  ## imd_spi.c:834:21
  1094c6:    bf ea 35 ec       	call -10134 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:834:21
  1094ca:    80 14             	r1_r0 = 0			  ## imd_spi.c:835:21
  1094cc:    bf ea 8e ec       	call -9956 <lcd_draw : 106dec >			  ## imd_spi.c:835:21
  1094d0:    c6 eb 01 40       	[r4+24] += 1			  ## imd_spi.c:838:49
  1094d4:    40 66             	r0 = [r4+24] 			  ## imd_spi.c:839:38
  1094d6:    40 64             	r0 = [r4+16] 			  ## imd_spi.c:839:70
  1094d8:    14 87             	goto 78 <imd_spi_isr+0x4E2 : 109528 >			  ## imd_spi.c:839:70
  1094da:    60 16             	r0 = r6			  ## imd_spi.c:842:41
  1094dc:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:842:41
  1094e0:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:842:77
  1094e2:    03 62             	r3 = [r0+8] 			  ## imd_spi.c:842:107
  1094e4:    32 d8             	r2 += r3  #			  ## imd_spi.c:842:107
  1094e6:    00 65             		 r0 = [r0+20] 			  ## imd_spi.c:842:132
  1094e8:    20 18             	r0 += r2			  ## imd_spi.c:842:132
  1094ea:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:842:132
  1094ec:    c0 22             	r0 += 2			  ## imd_spi.c:842:117
  1094ee:    80 e8 1b 10       	if (r1 != r0) goto 54 <imd_spi_isr+0x4E2 : 109528 >			  ## imd_spi.c:842:117
  1094f2:    bf ea 12 ec       	call -10204 <imd_spi_io_enable : 106d1a >			  ## imd_spi.c:843:21
  1094f6:    40 21             	r0 = 1			  ## imd_spi.c:844:21
  1094f8:    bf ea 9a f5       	call -5324 <lcd_cs : 108030 >			  ## imd_spi.c:844:21
  1094fc:    04 95             	goto 42 <imd_spi_isr+0x4E2 : 109528 >			  ## imd_spi.c:844:21
  1094fe:    d0 ec 68 17       	r1 = [r6+120]			  ## imd_spi.c:812:42
  109502:    40 21             	r0 = 1			  ## imd_spi.c:814:21
  109504:    44 21             	r4 = 1			  ## imd_spi.c:814:21
  109506:    bf ea 71 ec       	call -10014 <lcd_draw : 106dec >			  ## imd_spi.c:814:21
  10950a:    00 e1 54 60       	r0 = r6 + 84
  10950e:    01 61             	r1 = [r0+4] 			  ## imd_spi.c:815:52
  109510:    68 e8 24 01       	[r0+36] += r1			  ## imd_spi.c:815:36
  109514:    c8 eb 01 00       	[r0+32] += 1			  ## imd_spi.c:818:35
  109518:    01 68             	r1 = [r0+32] 			  ## imd_spi.c:819:38
  10951a:    00 60             	r0 = [r0+0] 			  ## imd_spi.c:819:56
  10951c:    11 e8 00 40       	if (r1 == r0) {			  ## imd_spi.c:819:56
  109520:    5a ea 00 60       		[r6+104] = 0x0			  ## imd_spi.c:820:54
  109524:    d0 ec 6d 46       		[r6+108] = r4
                               	}			  ## imd_spi.c:821:50
  109528:    60 16             	r0 = r6			  ## imd_spi.c:847:34
  10952a:    d0 ec 0e 14       	r1 = [++r0=76]			  ## imd_spi.c:847:34
  10952e:    02 64             	r2 = [r0+16] 			  ## imd_spi.c:847:69
  109530:    03 62             	r3 = [r0+8] 			  ## imd_spi.c:847:99
  109532:    32 d8             	r2 += r3  #			  ## imd_spi.c:847:99
  109534:    00 65             		 r0 = [r0+20] 			  ## imd_spi.c:847:124
  109536:    20 18             	r0 += r2			  ## imd_spi.c:847:124
  109538:    00 a1             	r0 = r0 << 1			  ## imd_spi.c:847:124
  10953a:    c0 22             	r0 += 2
  10953c:    00 ed 03 10       	ifs (r1 >= r0) goto 6 <imd_spi_isr+0x500 : 109546 >
  109540:    d3 eb 01 60       	[r6+76] += 1
  109544:    c6 8b             	goto -1258 <imd_spi_isr+0x16 : 10905c >
  109546:    40 20             	r0 = 0
  109548:    d0 ec 6f 04       	[++r6=76] = r0
  10954c:    60 69             	r0 = [r6+36] 
  10954e:    61 61             	r1 = [r6+4] 
  109550:    62 62             	r2 = [r6+8] 
  109552:    63 63             	r3 = [r6+12] 
  109554:    64 64             	r4 = [r6+16] 
  109556:    65 65             	r5 = [r6+20] 
  109558:    d0 e9 01 40       	d[sp] = r5_r4
  10955c:    bf ea 92 ec       	call -9948 <lcd_spi_draw_st77903 : 106e84 >
  109560:    b6 9d             	goto -1286 <imd_spi_isr+0x16 : 10905c >
  109562:    bf ea 63 fd       	call -1338 <imd_spi_io_disable : 10902c >			  ## imd_spi.c:931:21
  109566:    64 16             	r4 = r6			  ## imd_spi.c:932:51
  109568:    d0 ec 42 05       	r0 = [++r4=80]			  ## imd_spi.c:932:51
  10956c:    42 62             	r2 = [r4+8] 			  ## imd_spi.c:932:74
  10956e:    41 21             	r1 = 1			  ## imd_spi.c:932:21
  109570:    bf ea e0 eb       	call -10304 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:932:21
  109574:    80 14             	r1_r0 = 0			  ## imd_spi.c:933:21
  109576:    bf ea 39 ec       	call -10126 <lcd_draw : 106dec >			  ## imd_spi.c:933:21
  10957a:    c6 eb 01 40       	[r4+24] += 1			  ## imd_spi.c:936:49
  10957e:    40 66             	r0 = [r4+24] 			  ## imd_spi.c:937:38
  109580:    40 64             	r0 = [r4+16] 			  ## imd_spi.c:937:70
  109582:    d6 8f             	goto -1186 <imd_spi_isr+0x9C : 1090e2 >			  ## imd_spi.c:937:70
  109584:    d0 ec 68 17       	r1 = [r6+120]			  ## imd_spi.c:909:46
  109588:    40 21             	r0 = 1			  ## imd_spi.c:911:25
  10958a:    14 8a             	goto 84 <imd_spi_isr+0x59A : 1095e0 >			  ## imd_spi.c:911:25
  10958c:    d0 ec 68 07       	r0 = [r6+120]			  ## imd_spi.c:890:44
  109590:    23 ff 00 07 05 00 	if (r0 < 33554432) goto 10 <imd_spi_isr+0x55A : 1095a0 >			  ## imd_spi.c:890:44
  109596:    d0 ec 68 07       	r0 = [r6+120]			  ## imd_spi.c:890:77
  10959a:    23 ff 40 07 05 00 	if (r0 < 50331648) goto 10 <imd_spi_isr+0x564 : 1095aa >			  ## imd_spi.c:890:77
  1095a0:    d0 ec 68 07       	r0 = [r6+120]			  ## imd_spi.c:890:110
  1095a4:    23 ff 40 07 07 00 	if (r0 < 50331648) goto 14 <imd_spi_isr+0x572 : 1095b8 >			  ## imd_spi.c:890:110
  1095aa:    d0 ec 68 07       	r0 = [r6+120]			  ## imd_spi.c:891:46
  1095ae:    80 b8             	r0 = r0 >> 24			  ## imd_spi.c:891:33
  1095b0:    b0 ec 02 00       	if (r0 <= 2) {			  ## imd_spi.c:891:33
  1095b4:    d0 ec 68 07       		r0 = [r6+120]
                               	}			  ## imd_spi.c:892:50
  1095b8:    05 e1 50 60       	r5 = r6 + 80
  1095bc:    51 6a             	r1 = [r5+40] 			  ## imd_spi.c:899:63
  1095be:    52 62             	r2 = [r5+8] 			  ## imd_spi.c:899:79
  1095c0:    c4 ff cc c4 10 00 	r4 = 1098956 <line_buffer : 10c4cc >			  ## imd_spi.c:899:79
  1095c6:    48 90             	r0 = r4 + 16			  ## imd_spi.c:899:79
  1095c8:    80 ff a6 67 f1 ff 	call -956506 <memcpy : 1fd74 >			  ## imd_spi.c:899:25
  1095ce:    50 60             	r0 = [r5+0] 			  ## imd_spi.c:900:59
  1095d0:    51 62             	r1 = [r5+8] 			  ## imd_spi.c:900:87
  1095d2:    c0 28             	r0 += 8			  ## imd_spi.c:900:44
  1095d4:    1a 90             	r2 = r1 + 16			  ## imd_spi.c:900:72
  1095d6:    41 21             	r1 = 1			  ## imd_spi.c:900:25
  1095d8:    bf ea ac eb       	call -10408 <imd_set_buf_size : 106d34 >			  ## imd_spi.c:900:25
  1095dc:    40 21             	r0 = 1			  ## imd_spi.c:901:25
  1095de:    41 16             	r1 = r4			  ## imd_spi.c:901:25
  1095e0:    bf ea 04 ec       	call -10232 <lcd_draw : 106dec >
  1095e4:    00 e1 54 60       	r0 = r6 + 84
  1095e8:    01 61             	r1 = [r0+4] 
  1095ea:    68 e8 24 01       	[r0+36] += r1
  1095ee:    c8 eb 01 00       	[r0+32] += 1			  ## imd_spi.c:916:35
  1095f2:    01 68             	r1 = [r0+32] 			  ## imd_spi.c:917:38
  1095f4:    00 60             	r0 = [r0+0] 			  ## imd_spi.c:917:56
  1095f6:    11 e8 00 40       	if (r1 == r0) {			  ## imd_spi.c:917:56
  1095fa:    5a ea 00 60       		[r6+104] = 0x0			  ## imd_spi.c:918:54
  1095fe:    5b ea 01 60       		[r6+108] = 0x1
                               	}			  ## imd_spi.c:919:50
  109602:    b6 8f             	goto -1314 <imd_spi_isr+0x9C : 1090e2 >			  ## imd_spi.c:919:50


calloc:
  109604:    75 04             	[--sp] = {rets, r5, r4}			  ## mem_heap.c:672:0
  109606:    f0 e1 10 40       	r4 = r1 * r0			  ## mem_heap.c:676:19
  10960a:    40 16             	r0 = r4			  ## mem_heap.c:676:6
  10960c:    bf ea b5 e8       	call -11926 <malloc : 10677a >			  ## mem_heap.c:676:6
  109610:    05 16             	r5 = r0			  ## mem_heap.c:676:6
  109612:    05 45             	if (r5 == 0) goto 10 <calloc+0x1A : 10961e >
  109614:    41 20             	r1 = 0			  ## mem_heap.c:679:3
  109616:    42 16             	r2 = r4			  ## mem_heap.c:679:3
  109618:    80 ff 62 67 f1 ff 	call -956574 <memset : 1fd80 >			  ## mem_heap.c:679:3
  10961e:    50 16             	r0 = r5			  ## mem_heap.c:681:2
  109620:    55 04             	{pc, r5, r4} = [sp++]			  ## mem_heap.c:681:2


realloc:
  109622:    7b 04             	[--sp] = {rets, r11-r4}			  ## mem_heap.c:700:0
  109624:    c1 3f             	r1 += 31			  ## mem_heap.c:710:12
  109626:    75 e1 1f 10       	r5 = r1 & 0xFFFFFFE0			  ## mem_heap.c:710:12
  10962a:    04 16             	r4 = r0
  10962c:    b5 ec 20 00       	if (r5 <= 32) {
  109630:    4d 20             		r5 = 32
                               	}			  ## mem_heap.c:712:6
  109632:    bf ea 71 e8       	call -12062 <mem_heap_init : 106718 >			  ## mem_heap.c:717:2
  109636:    14 4b             	if (r4 == 0) goto 86 <realloc+0x6C : 10968e >			  ## mem_heap.c:717:2
  109638:    80 ff dc a9 ff ff 	call -22052 <local_irq_disable : 10401a >			  ## spinlock.h:76:2
  10963e:    31 f1 e0 4f       	r1 = r4 + -32  #			  ## mem_heap.c:741:44
  109642:    42 78             		 r2 = [r4+-32] 			  ## mem_heap.c:743:27
  109644:    28 1e             	r0 = r2 - r1			  ## mem_heap.c:743:33
  109646:    36 e1 e0 0f       	r6 = r0 + -32			  ## mem_heap.c:743:51
  10964a:    c8 ff 00 c8 10 00 	r8 = 1099776 <backlight_status : 10c800 >
  109650:    86 ec 22 50       	if (r5 <= r6) goto 68 <realloc+0x76 : 109698 >			  ## mem_heap.c:747:6
  109654:    20 62             	r0 = [r2+8] 			  ## mem_heap.c:749:19
  109656:    ca ff ef cd ab a5 	r10 = 2779500015 <_HEAP_END+0x1841DEF : 1abcdef >			  ## mem_heap.c:749:24
  10965c:    8a e8 06 00       	if (r0 != r10) goto 12 <realloc+0x4A : 10966c >			  ## mem_heap.c:749:24
  109660:    10 20             	r0 = -32			  ## mem_heap.c:749:73
  109662:    08 de             	r0 = r0 - r1  #			  ## mem_heap.c:749:73
  109664:    23 60             		 r3 = [r2+0] 			  ## mem_heap.c:749:67
  109666:    30 18             	r0 += r3			  ## mem_heap.c:749:91
  109668:    05 e9 4b 00       	if (r0 >= r5) goto 150 <realloc+0xE0 : 109702 >			  ## mem_heap.c:749:91
  10966c:    80 ff ba a9 ff ff 	call -22086 <local_irq_enable : 10402c >			  ## spinlock.h:87:2
  109672:    50 16             	r0 = r5			  ## mem_heap.c:789:15
  109674:    bf ea 81 e8       	call -12030 <malloc : 10677a >			  ## mem_heap.c:789:15
  109678:    07 16             	r7 = r0			  ## mem_heap.c:789:15
  10967a:    17 5a             	if (r7 == 0) goto 116 <realloc+0xCE : 1096f0 >			  ## mem_heap.c:790:8
  10967c:    41 16             	r1 = r4			  ## mem_heap.c:791:5
  10967e:    62 16             	r2 = r6			  ## mem_heap.c:791:5
  109680:    80 ff f2 66 f1 ff 	call -956686 <memmove : 1fd78 >			  ## mem_heap.c:791:5
  109686:    40 16             	r0 = r4			  ## mem_heap.c:792:5
  109688:    bf ea 03 ea       	call -11258 <free : 106a92 >			  ## mem_heap.c:792:5
  10968c:    54 8f             	goto 350 <realloc+0x1CA : 1097ec >			  ## mem_heap.c:792:5
  10968e:    50 16             	r0 = r5			  ## mem_heap.c:720:10
  109690:    bf ea 73 e8       	call -12058 <malloc : 10677a >			  ## mem_heap.c:720:10
  109694:    07 16             	r7 = r0			  ## mem_heap.c:720:10
  109696:    54 8a             	goto 340 <realloc+0x1CA : 1097ec >
  109698:    06 e9 26 50       	if (r5 >= r6) goto 76 <realloc+0xC6 : 1096e8 >			  ## mem_heap.c:812:13
  10969c:    a9 f0 20 00       	r9 = 0x20 - r0  #
  1096a0:    23 62             		 r3 = [r2+8] 			  ## mem_heap.c:815:13
  1096a2:    ca ff ef cd ab a5 	r10 = 2779500015 <_HEAP_END+0x1841DEF : 1abcdef >			  ## mem_heap.c:815:18
  1096a8:    8a e8 50 30       	if (r3 != r10) goto 160 <realloc+0x12A : 10974c >			  ## mem_heap.c:815:7
  1096ac:    d0 ec 84 78       	r7 = [r8+132]			  ## mem_heap.c:822:17
  1096b0:    d0 ec 20 b0       	r11 = [r2+0]			  ## mem_heap.c:819:17
  1096b4:    1e 1d             	r6 = r1 + r5			  ## mem_heap.c:821:45
  1096b6:    00 e1 20 60       	r0 = r6 + 32			  ## mem_heap.c:821:65
  1096ba:    17 e8 00 02       	if (r7 == r2) {			  ## mem_heap.c:821:65
  1096be:    d0 ec 85 08       		[r8+132] = r0
                               	}			  ## mem_heap.c:823:20
  1096c2:    d0 ec 80 78       	r7 = [r8+128]			  ## mem_heap.c:825:17
  1096c6:    73 61             	r3 = [r7+4] 			  ## mem_heap.c:825:26
  1096c8:    13 e8 00 02       	if (r3 == r2) {			  ## mem_heap.c:825:26
  1096cc:    f0 61             		[r7+4] = r0
                               	}			  ## mem_heap.c:826:28
  1096ce:    d0 ec 09 a0       	[r0+8] = r10			  ## mem_heap.c:833:15
  1096d2:    d0 ec 61 b2       	[r6+32] = r11			  ## mem_heap.c:835:15
  1096d6:    81 61             	[r0+4] = r1			  ## mem_heap.c:837:15
  1096d8:    c0 78             	[r4+-32] = r0			  ## mem_heap.c:839:14
  1096da:    61 68             	r1 = [r6+32] 			  ## mem_heap.c:843:14
  1096dc:    91 e8 00 07       	if (r1 != r7) {			  ## mem_heap.c:843:14
  1096e0:    90 61             		[r1+4] = r0
                               	}			  ## mem_heap.c:844:22
  1096e2:    b4 e0 90 05       	r0 = r9 + r5			  ## mem_heap.c:847:4
  1096e6:    24 92             	goto 164 <realloc+0x16A : 10978c >			  ## mem_heap.c:847:4
  1096e8:    47 20             	r7 = 0
  1096ea:    06 e8 7b 50       	if (r5 == r6) goto 246 <realloc+0x1C2 : 1097e4 >
  1096ee:    34 9e             	goto 252 <realloc+0x1CA : 1097ec >
  1096f0:    c0 ff b7 9a 10 00 	r0 = 1088183 <realloc+0x495 : 109ab7 >			  ## mem_heap.c:796:5
  1096f6:    51 16             	r1 = r5			  ## mem_heap.c:796:5
  1096f8:    80 ff 06 67 f1 ff 	call -956666 <printf : 1fe04 >			  ## mem_heap.c:796:5
  1096fe:    47 20             	r7 = 0			  ## mem_heap.c:796:5
  109700:    34 95             	goto 234 <realloc+0x1CA : 1097ec >
  109702:    18 1d             	r0 = r1 + r5			  ## mem_heap.c:750:45
  109704:    c8 20             	r0 += 32			  ## mem_heap.c:750:65
  109706:    37 1e             	r7 = r3 - r0			  ## mem_heap.c:751:38
  109708:    87 f9 45 80       	if (r7 < 64) goto 138 <realloc+0x174 : 109796 >			  ## mem_heap.c:751:8
  10970c:    d0 ec 84 78       	r7 = [r8+132]			  ## mem_heap.c:752:18
  109710:    17 e8 00 02       	if (r7 == r2) {			  ## mem_heap.c:752:18
  109714:    d0 ec 85 08       		[r8+132] = r0
                               	}			  ## mem_heap.c:753:21
  109718:    d0 ec 80 98       	r9 = [r8+128]			  ## mem_heap.c:755:18
  10971c:    d0 ec 96 70       	r7 = [++r9=4]			  ## mem_heap.c:755:27
  109720:    17 e8 00 02       	if (r7 == r2) {			  ## mem_heap.c:755:27
  109724:    d0 ec 91 00       		[r9+0] = r0
                               	}			  ## mem_heap.c:756:29
  109728:    d2 df             	r2 = r5 - r6  #			  ## mem_heap.c:768:5
  10972a:    b0 61             		 [r3+4] = r0			  ## mem_heap.c:758:27
  10972c:    83 60             	[r0+0] = r3			  ## mem_heap.c:759:19
  10972e:    81 d6             	r1 = r8  #			  ## mem_heap.c:768:5
  109730:    81 61             		 [r0+4] = r1			  ## mem_heap.c:760:19
  109732:    d0 ec 09 a0       	[r0+8] = r10			  ## mem_heap.c:761:19
  109736:    c0 78             	[r4+-32] = r0			  ## mem_heap.c:766:15
  109738:    d0 ec 1e 09       	r0 = [++r1=156]			  ## mem_heap.c:768:5
  10973c:    20 18             	r0 += r2			  ## mem_heap.c:768:5
  10973e:    90 60             	[r1+0] = r0			  ## mem_heap.c:768:5
  109740:    11 61             	r1 = [r1+4] 			  ## mem_heap.c:768:5
  109742:    91 e9 00 00       	if (r1 < r0) {			  ## mem_heap.c:768:5
  109746:    d0 ec 81 0a       		[r8+160] = r0
                               	}			  ## mem_heap.c:768:5
  10974a:    24 8c             	goto 152 <realloc+0x1C2 : 1097e4 >			  ## mem_heap.c:768:5
  10974c:    00 e1 40 50       	r0 = r5 + 64			  ## mem_heap.c:849:42
  109750:    06 ec 48 00       	if (r0 > r6) goto 144 <realloc+0x1C2 : 1097e4 >			  ## mem_heap.c:849:42
  109754:    d0 ec 84 68       	r6 = [r8+132]			  ## mem_heap.c:863:24
  109758:    1b 1d             	r3 = r1 + r5			  ## mem_heap.c:857:45
  10975a:    00 e1 20 30       	r0 = r3 + 32			  ## mem_heap.c:857:65
  10975e:    90 e9 00 06       	if (r0 < r6) {
  109762:    d0 ec 85 08       		[r8+132] = r0
                               	}			  ## mem_heap.c:864:20
  109766:    d0 ec 09 a0       	[r0+8] = r10			  ## mem_heap.c:866:15
  10976a:    b2 68             	[r3+32] = r2			  ## mem_heap.c:867:15
  10976c:    81 61             	[r0+4] = r1			  ## mem_heap.c:868:15
  10976e:    c0 78             	[r4+-32] = r0			  ## mem_heap.c:869:14
  109770:    d0 ec 80 28       	r2 = [r8+128]			  ## mem_heap.c:870:31
  109774:    33 68             	r3 = [r3+32] 			  ## mem_heap.c:870:14
  109776:    93 e8 00 02       	if (r3 != r2) {			  ## mem_heap.c:870:14
  10977a:    b0 61             		[r3+4] = r0
                               	}			  ## mem_heap.c:871:22
  10977c:    d0 ec 26 30       	r3 = [++r2=4]			  ## mem_heap.c:873:26
  109780:    13 e8 00 01       	if (r3 == r1) {			  ## mem_heap.c:873:26
  109784:    a0 60             		[r2+0] = r0
                               	}			  ## mem_heap.c:874:28
  109786:    b4 e0 50 09       	r0 = r5 + r9			  ## mem_heap.c:876:4
  10978a:    c8 20             	r0 += 32			  ## mem_heap.c:876:4
  10978c:    01 e1 9c 80       	r1 = r8 + 156
  109790:    68 e8 00 10       	[r1+0] += r0
  109794:    14 87             	goto 78 <realloc+0x1C2 : 1097e4 >
  109796:    85 16             	r5 = r8			  ## mem_heap.c:770:5
  109798:    d0 ec 5e 09       	r0 = [++r5=156]			  ## mem_heap.c:770:5
  10979c:    16 20             	r6 = -32			  ## mem_heap.c:770:5
  10979e:    e6 1e             	r6 = r6 - r2			  ## mem_heap.c:770:5
  1097a0:    36 18             	r6 += r3			  ## mem_heap.c:770:5
  1097a2:    60 18             	r0 += r6			  ## mem_heap.c:770:5
  1097a4:    d0 60             	[r5+0] = r0			  ## mem_heap.c:770:5
  1097a6:    55 61             	r5 = [r5+4] 			  ## mem_heap.c:770:5
  1097a8:    95 e9 00 00       	if (r5 < r0) {			  ## mem_heap.c:770:5
  1097ac:    d0 ec 81 0a       		[r8+160] = r0
                               	}			  ## mem_heap.c:770:5
  1097b0:    d0 ec 84 08       	r0 = [r8+132]			  ## mem_heap.c:771:18
  1097b4:    d0 ec 80 58       	r5 = [r8+128]			  ## mem_heap.c:771:18
  1097b8:    82 e8 0d 00       	if (r0 != r2) goto 26 <realloc+0x1B4 : 1097d6 >			  ## mem_heap.c:771:18
  1097bc:    c6 ff ae ea 5a 5a 	r6 = 1515907758 <_HEAP_END+0x333AAE : 5aeaae >
  1097c2:    30 16             	r0 = r3
  1097c4:    04 83             	goto 6 <realloc+0x1AA : 1097cc >
  1097c6:    05 e8 04 00       	if (r0 == r5) goto 8 <realloc+0x1B0 : 1097d2 >
  1097ca:    00 60             	r0 = [r0+0] 
  1097cc:    07 62             	r7 = [r0+8] 			  ## mem_heap.c:773:19
  1097ce:    06 e8 fa 71       	if (r7 == r6) goto -12 <realloc+0x1A4 : 1097c6 >			  ## mem_heap.c:773:19
  1097d2:    d0 ec 85 08       	[r8+132] = r0			  ## mem_heap.c:776:21
  1097d6:    d0 ec 56 00       	r0 = [++r5=4]			  ## mem_heap.c:778:27
  1097da:    10 e8 00 02       	if (r0 == r2) {			  ## mem_heap.c:778:27
  1097de:    d1 60             		[r5+0] = r1
                               	}			  ## mem_heap.c:779:29
  1097e0:    b1 61             	[r3+4] = r1			  ## mem_heap.c:781:27
  1097e2:    c3 78             	[r4+-32] = r3			  ## mem_heap.c:782:15
  1097e4:    80 ff 42 a8 ff ff 	call -22462 <local_irq_enable : 10402c >
  1097ea:    47 16             	r7 = r4
  1097ec:    70 16             	r0 = r7			  ## mem_heap.c:899:1
  1097ee:    5b 04             	{pc, r11-r4} = [sp++]			  ## mem_heap.c:899:1
  1097f0:    74 04             	[--sp] = {rets, r4}
  1097f2:    02 f9 02 08       	if (r2 >= 4) goto 4 <realloc+0x1D8 : 1097fa >
  1097f6:    82 46             	if (r2 != 0) goto 12 <realloc+0x1E2 : 109804 >
  1097f8:    04 8b             	goto 22 <realloc+0x1EE : 109810 >
  1097fa:    90 e1 10 30       	r3 = r1 | r0
  1097fe:    60 ff 03 30 08 00 	if ((r3 & 0x3) == 0) goto 16 <realloc+0x1F2 : 109814 >
  109804:    13 07             	r3 = b[r1++=1] (u)
  109806:    04 07             	r4 = b[r0++=1] (u)
  109808:    83 e8 0e 40       	if (r4 != r3) goto 28 <realloc+0x206 : 109828 >
  10980c:    02 ea fa ff       	if (--r2 != 0) goto -12 <realloc+0x1E2 : 109804 >
  109810:    40 20             	r0 = 0
  109812:    54 04             	{pc, r4} = [sp++]
  109814:    13 60             	r3 = [r1+0] 
  109816:    04 60             	r4 = [r0+0] 
  109818:    83 e8 ed 41       	if (r4 != r3) goto -38 <realloc+0x1D4 : 1097f6 >
  10981c:    fa 3c             	r2 += -4
  10981e:    c1 24             	r1 += 4
  109820:    c0 24             	r0 += 4
  109822:    02 fc f7 07       	if (r2 > 3) goto -18 <realloc+0x1F2 : 109814 >
  109826:    f7 87             	goto -50 <realloc+0x1D4 : 1097f6 >
  109828:    c8 1e             	r0 = r4 - r3
  10982a:    54 04             	{pc, r4} = [sp++]
  10982c:    77 04             	[--sp] = {rets, r7-r4}
  10982e:    64 e1 03 00       	r4 = r0 & 0x3
  109832:    04 4b             	if (r4 == 0) goto 22 <realloc+0x228 : 10984a >
  109834:    a4 e0 04 40       	r4 = 0x4 - r4
  109838:    0a 40             	r2 = b[r0+0] (u)
  10983a:    22 41             	if (r2 == 0) goto 130 <realloc+0x29C : 1098be >
  10983c:    1b 40             	r3 = b[r1+0] (u)
  10983e:    83 e8 3f 20       	if (r2 != r3) goto 126 <realloc+0x29E : 1098c0 >
  109842:    08 81             	r0 = r0 + 1
  109844:    19 81             	r1 = r1 + 1
  109846:    04 ea f7 ff       	if (--r4 != 0) goto -18 <realloc+0x216 : 109838 >
  10984a:    90 e1 10 20       	r2 = r1 | r0
  10984e:    c6 ff ff fe fe fe 	r6 = 4278124287 <_HEAP_END+0xD74EFF : fefeff >
  109854:    61 ff 03 20 13 00 	if ((r2 & 0x3) != 0) goto 38 <realloc+0x25E : 109880 >
  10985a:    02 60             	r2 = [r0+0] 
  10985c:    13 60             	r3 = [r1+0] 
  10985e:    83 e8 26 20       	if (r2 != r3) goto 76 <realloc+0x28C : 1098ae >
  109862:    14 16             	r4 = r1
  109864:    a1 1d             	r1 = r2 + r6
  109866:    90 e1 13 12       	r1 = r1 & ~r2
  10986a:    61 ff 80 13 2c 00 	if ((r1 & 0x80808080) != 0) goto 88 <realloc+0x2A6 : 1098c8 >
  109870:    02 61             	r2 = [r0+4] 
  109872:    45 61             	r5 = [r4+4] 
  109874:    49 84             	r1 = r4 + 4
  109876:    08 84             	r0 = r0 + 4
  109878:    14 16             	r4 = r1
  10987a:    05 e8 f3 21       	if (r2 == r5) goto -26 <realloc+0x242 : 109864 >
  10987e:    04 97             	goto 46 <realloc+0x28C : 1098ae >
  109880:    14 16             	r4 = r1
  109882:    02 60             	r2 = [r0+0] 
  109884:    43 07             	r3 = b[r4++=1] (u)
  109886:    45 07             	r5 = b[r4++=1] (u)
  109888:    a3 e1 20 54       	r3 <= insert(r5, p:8, l:8)
  10988c:    45 07             	r5 = b[r4++=1] (u)
  10988e:    a3 e1 20 58       	r3 <= insert(r5, p:16, l:8)
  109892:    45 07             	r5 = b[r4++=1] (u)
  109894:    a3 e1 20 5c       	r3 <= insert(r5, p:24, l:8)
  109898:    83 e8 09 20       	if (r2 != r3) goto 18 <realloc+0x28C : 1098ae >
  10989c:    a5 1d             	r5 = r2 + r6
  10989e:    90 e1 53 52       	r5 = r5 & ~r2
  1098a2:    61 ff 80 53 10 00 	if ((r5 & 0x80808080) != 0) goto 32 <realloc+0x2A6 : 1098c8 >
  1098a8:    08 84             	r0 = r0 + 4
  1098aa:    19 84             	r1 = r1 + 4
  1098ac:    f7 89             	goto -46 <realloc+0x25E : 109880 >
  1098ae:    0a 40             	r2 = b[r0+0] (u)
  1098b0:    02 46             	if (r2 == 0) goto 12 <realloc+0x29C : 1098be >
  1098b2:    1c 40             	r4 = b[r1+0] (u)
  1098b4:    84 e8 04 20       	if (r2 != r4) goto 8 <realloc+0x29E : 1098c0 >
  1098b8:    08 81             	r0 = r0 + 1
  1098ba:    19 81             	r1 = r1 + 1
  1098bc:    f7 98             	goto -16 <realloc+0x28C : 1098ae >
  1098be:    42 20             	r2 = 0
  1098c0:    13 16             	r3 = r1
  1098c2:    38 40             	r0 = b[r3+0] (u)
  1098c4:    20 1e             	r0 = r2 - r0
  1098c6:    57 04             	{pc, r7-r4} = [sp++]
  1098c8:    40 20             	r0 = 0
  1098ca:    57 04             	{pc, r7-r4} = [sp++]
  1098cc:    01 16             	r1 = r0
  1098ce:    60 ff 03 00 06 00 	if ((r0 & 0x3) == 0) goto 12 <realloc+0x2BE : 1098e0 >
  1098d4:    12 d6             	r2 = r1  #
  1098d6:    13 07             		 r3 = b[r1++=1] (u)
  1098d8:    03 53             	if (r3 == 0) goto 38 <realloc+0x2DE : 109900 >
  1098da:    61 ff 03 10 fa ff 	if ((r1 & 0x3) != 0) goto -12 <realloc+0x2B2 : 1098d4 >
  1098e0:    13 05             	r3 = [r1++=4] 
  1098e2:    f2 e0 01 33       	r2 = r3 - 0x1010101
  1098e6:    90 e1 23 23       	r2 = r2 & ~r3
  1098ea:    60 ff 80 23 f8 ff 	if ((r2 & 0x80808080) == 0) goto -16 <realloc+0x2BE : 1098e0 >
  1098f0:    32 e1 fc 1f       	r2 = r1 + -4
  1098f4:    60 ff ff 30 03 00 	if ((r3 & 0xFF) == 0) goto 6 <realloc+0x2DE : 109900 >
  1098fa:    58 ee 21 10       	r1 = b[++r2=1] (u)
  1098fe:    f1 5d             	if (r1 != 0) goto -6 <realloc+0x2D8 : 1098fa >
  109900:    20 1e             	r0 = r2 - r0
  109902:    80 00             	rts
  109904:    76 04             	[--sp] = {rets, r6-r4}
  109906:    00 ec 03 10       	if (r1 > r0) goto 6 <realloc+0x2EE : 109910 >
  10990a:    93 1c             	r3 = r1 + r2
  10990c:    00 ec 29 30       	if (r3 > r0) goto 82 <realloc+0x340 : 109962 >
  109910:    03 16             	r3 = r0
  109912:    82 f9 14 10       	if (r2 < 8) goto 40 <realloc+0x31C : 10993e >
  109916:    65 e1 03 10       	r5 = r1 & 0x3
  10991a:    64 e1 03 30       	r4 = r3 & 0x3
  10991e:    04 46             	if (r4 == 0) goto 12 <realloc+0x30A : 10992c >
  109920:    a6 e0 04 40       	r6 = 0x4 - r4
  109924:    a2 1f             	r2 = r2 - r6
  109926:    16 03             	rep 4 r6 {
  109928:    16 07             		r6 = b[r1++=1] (u)
  10992a:    b6 07             		b[r3++=1] = r6
                               	}
  10992c:    5c 19             	r4 ^= r5
  10992e:    a5 a2             	r5 = r2 >> 2
  109930:    84 4a             	if (r4 != 0) goto 20 <realloc+0x324 : 109946 >
  109932:    15 03             	rep 4 r5 {
  109934:    16 05             		r6 = [r1++=4] 
  109936:    b6 05             		[r3++=4] = r6
                               	}
  109938:    f5 5c             	if (r5 != 0) goto -8 <realloc+0x310 : 109932 >
  10993a:    62 e1 03 20       	r2 = r2 & 0x3
  10993e:    12 03             	rep 4 r2 {
  109940:    12 07             		r2 = b[r1++=1] (u)
  109942:    b2 07             		b[r3++=1] = r2
                               	}
  109944:    56 04             	{pc, r6-r4} = [sp++]
  109946:    a5 03             	rep 22 r5 {
  109948:    16 07             		r6 = b[r1++=1] (u)
  10994a:    14 07             		r4 = b[r1++=1] (u)
  10994c:    a6 f1 20 44       		r6 <= insert(r4, p:8, l:8)  #
  109950:    14 07             			 r4 = b[r1++=1] (u)
  109952:    a6 f1 20 48       		r6 <= insert(r4, p:16, l:8)  #
  109956:    14 07             			 r4 = b[r1++=1] (u)
  109958:    a6 e1 20 4c       		r6 <= insert(r4, p:24, l:8)
  10995c:    b6 05             		[r3++=4] = r6
                               	}
  10995e:    f5 53             	if (r5 != 0) goto -26 <realloc+0x324 : 109946 >
  109960:    f7 8c             	goto -40 <realloc+0x318 : 10993a >
  109962:    83 1c             	r3 = r0 + r2
  109964:    91 1c             	r1 = r1 + r2
  109966:    82 f9 17 10       	if (r2 < 8) goto 46 <realloc+0x376 : 109998 >
  10996a:    65 e1 03 10       	r5 = r1 & 0x3
  10996e:    64 e1 03 30       	r4 = r3 & 0x3
  109972:    04 47             	if (r4 == 0) goto 14 <realloc+0x360 : 109982 >
  109974:    22 1f             	r2 = r2 - r4
  109976:    46 16             	r6 = r4
  109978:    36 03             	rep 8 r6 {
  10997a:    59 ee 1f 6f       		r6 = b[++r1=-1] (u)
  10997e:    5b ee 3f 6f       		b[++r3=-1] = r6
                               	}
  109982:    5c 19             	r4 ^= r5
  109984:    a5 a2             	r5 = r2 >> 2
  109986:    84 4e             	if (r4 != 0) goto 28 <realloc+0x382 : 1099a4 >
  109988:    35 03             	rep 8 r5 {
  10998a:    d7 ec 1e 6f       		r6 = [++r1=-4]
  10998e:    d7 ec 3f 6f       		[++r3=-4] = r6
                               	}
  109992:    f5 5a             	if (r5 != 0) goto -12 <realloc+0x366 : 109988 >
  109994:    62 e1 03 20       	r2 = r2 & 0x3
  109998:    32 03             	rep 8 r2 {
  10999a:    59 ee 1f 6f       		r6 = b[++r1=-1] (u)
  10999e:    5b ee 3f 6f       		b[++r3=-1] = r6
                               	}
  1099a2:    56 04             	{pc, r6-r4} = [sp++]
  1099a4:    f9 3f             	r1 += -1
  1099a6:    b5 03             	rep 24 r5 {
  1099a8:    1e 07             		r6 = b[r1++=-1] (u)
  1099aa:    66 b8             		r6 = r6 << 24
  1099ac:    1c 07             		r4 = b[r1++=-1] (u)
  1099ae:    a6 f1 20 48       		r6 <= insert(r4, p:16, l:8)  #
  1099b2:    1c 07             			 r4 = b[r1++=-1] (u)
  1099b4:    a6 f1 20 44       		r6 <= insert(r4, p:8, l:8)  #
  1099b8:    1c 07             			 r4 = b[r1++=-1] (u)
  1099ba:    46 19             		r6 |= r4
  1099bc:    d7 ec 3f 6f       		[++r3=-4] = r6
                               	}
  1099c0:    f5 52             	if (r5 != 0) goto -28 <realloc+0x384 : 1099a6 >
  1099c2:    19 81             	r1 = r1 + 1
  1099c4:    f7 87             	goto -50 <realloc+0x372 : 109994 >
  1099c6:    74 04             	[--sp] = {rets, r4}
  1099c8:    03 16             	r3 = r0
  1099ca:    02 52             	if (r2 == 0) goto 36 <realloc+0x3CE : 1099f0 >
  1099cc:    33 ea 03 40       	if ((r3 & 0x3) != 0) {
  1099d0:    f2 f0 01 20       		r2 = r2 - 0x1  #
  1099d4:    b1 07             		  b[r3++=1] = r1
  1099d6:    f7 99             		goto -14
                               	} <realloc+0x3A8 : 1099ca >
  1099d8:    a4 a2             	r4 = r2 >> 2
  1099da:    a1 e1 20 14       	r1 <= insert(r1, p:8, l:8)
  1099de:    a1 e1 40 18       	r1 <= insert(r1, p:16, l:16)
  1099e2:    04 03             	rep 2 r4 {
  1099e4:    b1 05             		[r3++=4] = r1
                               	}
  1099e6:    f4 5d             	if (r4 != 0) goto -6 <realloc+0x3C0 : 1099e2 >
  1099e8:    62 e1 03 20       	r2 = r2 & 0x3
  1099ec:    02 03             	rep 2 r2 {
  1099ee:    b1 07             		b[r3++=1] = r1
                               	}
  1099f0:    54 04             	{pc, r4} = [sp++]
  1099f2:    00 00             	nop
  1099f4:    5f 5f             	r7 = b[r5+-1] (u)
  1099f6:    6c 63             	r4 = h[r6+6] (u)
  1099f8:    64 20             	r4 = 128
  1099fa:    3a 20             	r2 ^= 1
  1099fc:    30 78             	r0 = [r3+-32] 
  1099fe:    25 78             	r5 = [r2+-32] 
  109a00:    2c 20             	r12 = [sp+128]
  109a02:    6c 63             	r4 = h[r6+6] (u)
  109a04:    64 2d             	r4 = 141
  109a06:    3e 70             	r6 = h[r3+-32] (u)
  109a08:    6f 77             	r7 = h[r6+-18] (u)
  109a0a:    65 72             	r5 = [r6+-56] 
  109a0c:    5f 63             	r7 = h[r5+6] (u)
  109a0e:    74 72             	r4 = [r7+-56] 
  109a10:    6c 20             	r4 = 160
  109a12:    3a 20             	r2 ^= 1
  109a14:    30 78             	r0 = [r3+-32] 
  109a16:    25 78             	r5 = [r2+-32] 
  109a18:    0a 00              <unknown instruction>
  109a1a:    73 68             	r3 = [r7+32] 
  109a1c:    38 36             	r0 ^= 4194304
  109a1e:    30 31             	r0 |= 131072
  109a20:    00 55             	if (r0 == 0) goto 42 <realloc+0x42A : 109a4c >
  109a22:    6e 65             	r6 = h[r6+10] (u)
  109a24:    78 70             	r0 = h[r7+-32] (u)
  109a26:    65 63             	r5 = [r6+12] 
  109a28:    74 65             	r4 = [r7+20] 
  109a2a:    64 20             	r4 = 128
  109a2c:    65 6e             	r5 = [r6+56] 
  109a2e:    64 5f             	if (r4 == 0) goto -66 <realloc+0x3CC : 1099ee >
  109a30:    61 6e             	r1 = [r6+56] 
  109a32:    67 6c             	r7 = [r6+48] 
  109a34:    65 20             	r5 = 128
  109a36:    3d 20             	r5 ^= 1
  109a38:    25 64             	r5 = [r2+16] 
  109a3a:    0a 00              <unknown instruction>
  109a3c:    69 6d             	r1 = h[r6+26] (u)
  109a3e:    64 20             	r4 = 128
  109a40:    70 61             	r0 = [r7+4] 
  109a42:    70 20             	r0 = 192
  109a44:    70 6e             	r0 = [r7+56] 
  109a46:    64 00              <unknown instruction>
  109a48:    6c 63             	r4 = h[r6+6] (u)
  109a4a:    64 5f             	if (r4 == 0) goto -66 <realloc+0x3E8 : 109a0a >
  109a4c:    70 61             	r0 = [r7+4] 
  109a4e:    70 5f             	if (r0 == 0) goto -2 <realloc+0x42C : 109a4e >
  109a50:    73 65             	r3 = [r7+20] 
  109a52:    74 5f             	if (r4 == 0) goto -2 <realloc+0x430 : 109a52 >
  109a54:    64 72             	r4 = [r6+-56] 
  109a56:    61 77             	r1 = [r6+-36] 
  109a58:    5f 61             	r7 = h[r5+2] (u)
  109a5a:    72 65             	r2 = [r7+20] 
  109a5c:    61 20             	r1 = 128
  109a5e:    5b 25             	r3 = 101
  109a60:    64 2c             	r4 = 140
  109a62:    20 25             	r0 = [sp+148]
  109a64:    64 5d             	if (r4 == 0) goto -70 <realloc+0x3FE : 109a20 >
  109a66:    2c 20             	r12 = [sp+128]
  109a68:    5b 25             	r3 = 101
  109a6a:    64 2c             	r4 = 140
  109a6c:    20 25             	r0 = [sp+148]
  109a6e:    64 5d             	if (r4 == 0) goto -70 <realloc+0x408 : 109a2a >
  109a70:    0a 00              <unknown instruction>
  109a72:    4d 45             	r5 = b[r4+5] (u)
  109a74:    4d 5f             	r5 = b[r4+-1] (u)
  109a76:    48 45             	r0 = b[r4+5] (u)
  109a78:    41 50             	if (r1 == 0) goto -224 <realloc+0x378 : 10999a >
  109a7a:    00 31             	r0 = [sp+68]
  109a7c:    73 62             	r3 = [r7+8] 
  109a7e:    72 6b             	r2 = [r7+44] 
  109a80:    20 72             	r0 = [r2+-56] 
  109a82:    65 74             	r5 = [r6+-48] 
  109a84:    20 3d             	r0 = [sp+244]
  109a86:    3d 20             	r5 ^= 1
  109a88:    4e 55             	r6 = b[r4+-11] (u)
  109a8a:    4c 4c             	r4 = b[r4+12] (u)
  109a8c:    2c 73             	r4 = h[r2+-26] (u)
  109a8e:    62 72             	r2 = [r6+-56] 
  109a90:    6b 5f             	r3 = b[r6+-1] (u)
  109a92:    6d 61             	r5 = h[r6+2] (u)
  109a94:    6c 6c             	r4 = h[r6+24] (u)
  109a96:    6f 63             	r7 = h[r6+6] (u)
  109a98:    3a 20             	r2 ^= 1
  109a9a:    63 6f             	r3 = [r6+60] 
  109a9c:    75 6c             	r5 = [r7+48] 
  109a9e:    64 20             	r4 = 128
  109aa0:    6e 6f             	r6 = h[r6+30] (u)
  109aa2:    74 20             	r4 = 192
  109aa4:    61 6c             	r1 = [r6+48] 
  109aa6:    6c 6f             	r4 = h[r6+30] (u)
  109aa8:    63 61             	r3 = [r6+4] 
  109aaa:    74 65             	r4 = [r7+20] 
  109aac:    20 25             	r0 = [sp+148]
  109aae:    64 20             	r4 = 128
  109ab0:    62 79             	r2 = [r6+-28] 
  109ab2:    74 65             	r4 = [r7+20] 
  109ab4:    73 0a             	r3 = [r7++=r12] 
  109ab6:    00 6d             	r0 = [r0+52] 
  109ab8:    65 6d             	r5 = [r6+52] 
  109aba:    5f 72             	r7 = h[r5+-28] (u)
  109abc:    65 61             	r5 = [r6+4] 
  109abe:    6c 6c             	r4 = h[r6+24] (u)
  109ac0:    6f 63             	r7 = h[r6+6] (u)
  109ac2:    3a 20             	r2 ^= 1
  109ac4:    63 6f             	r3 = [r6+60] 
  109ac6:    75 6c             	r5 = [r7+48] 
  109ac8:    64 20             	r4 = 128
  109aca:    6e 6f             	r6 = h[r6+30] (u)
  109acc:    74 20             	r4 = 192
  109ace:    61 6c             	r1 = [r6+48] 
  109ad0:    6c 6f             	r4 = h[r6+30] (u)
  109ad2:    63 61             	r3 = [r6+4] 
  109ad4:    74 65             	r4 = [r7+20] 
  109ad6:    20 25             	r0 = [sp+148]
  109ad8:    64 20             	r4 = 128
  109ada:    62 79             	r2 = [r6+-28] 
  109adc:    74 65             	r4 = [r7+20] 
  109ade:    73 0a             	r3 = [r7++=r12] 
  109ae0:    00 00             	nop
  109ae2:    00 00             	nop
  109ae4:    00 00             	nop
  109ae6:    00 00             	nop
  109ae8:    00 00             	nop
  109aea:    00 00             	nop
  109aec:    00 00             	nop
  109aee:    00 00             	nop
  109af0:    6c 63             	r4 = h[r6+6] (u)
  109af2:    64 5f             	if (r4 == 0) goto -66 <realloc+0x490 : 109ab2 >
  109af4:    64 72             	r4 = [r6+-56] 
  109af6:    76 5f             	if (r6 == 0) goto -2 <realloc+0x4D4 : 109af6 >
  109af8:    69 6e             	r1 = h[r6+28] (u)
  109afa:    69 74             	r1 = h[r6+-24] (u)
  109afc:    20 2e             	r0 = [sp+184]
  109afe:    2e 2e             	r14 = [sp+184]
  109b00:    00 00             	nop
  109b02:    00 00             	nop
  109b04:    00 00             	nop
  109b06:    00 00             	nop
  109b08:    00 00             	nop
  109b0a:    00 00             	nop
  109b0c:    00 00             	nop
  109b0e:    00 00             	nop
  109b10:    45 58             	if (r5 == 0) goto -208 <realloc+0x420 : 109a42 >
  109b12:    5f 41             	r7 = b[r5+1] (u)
  109b14:    50 49             	if (r0 == 0) goto -174 <realloc+0x446 : 109a68 >
  109b16:    5f 55             	r7 = b[r5+-11] (u)
  109b18:    50 44             	if (r0 == 0) goto -184 <realloc+0x440 : 109a62 >
  109b1a:    41 54             	if (r1 == 0) goto -216 <realloc+0x422 : 109a44 >
  109b1c:    45 5f             	if (r5 == 0) goto -194 <realloc+0x43A : 109a5c >
  109b1e:    54 49             	if (r4 == 0) goto -174 <realloc+0x450 : 109a72 >
  109b20:    50 53             	if (r0 == 0) goto -154 <realloc+0x466 : 109a88 >
  109b22:    5f 57             	r7 = b[r5+-9] (u)
  109b24:    41 49             	if (r1 == 0) goto -238 <realloc+0x416 : 109a38 >
  109b26:    54 5f             	if (r4 == 0) goto -130 <realloc+0x484 : 109aa6 >
  109b28:    43 4f             	if (r3 == 0) goto -226 <realloc+0x426 : 109a48 >
  109b2a:    4e 4e             	r6 = b[r4+14] (u)
  109b2c:    00 00             	nop
  109b2e:    00 00             	nop
  109b30:    45 58             	if (r5 == 0) goto -208 <realloc+0x440 : 109a62 >
  109b32:    5f 41             	r7 = b[r5+1] (u)
  109b34:    50 49             	if (r0 == 0) goto -174 <realloc+0x466 : 109a88 >
  109b36:    5f 55             	r7 = b[r5+-11] (u)
  109b38:    50 44             	if (r0 == 0) goto -184 <realloc+0x460 : 109a82 >
  109b3a:    41 54             	if (r1 == 0) goto -216 <realloc+0x442 : 109a64 >
  109b3c:    45 5f             	if (r5 == 0) goto -194 <realloc+0x45A : 109a7c >
  109b3e:    54 49             	if (r4 == 0) goto -174 <realloc+0x470 : 109a92 >
  109b40:    50 53             	if (r0 == 0) goto -154 <realloc+0x486 : 109aa8 >
  109b42:    5f 57             	r7 = b[r5+-9] (u)
  109b44:    41 49             	if (r1 == 0) goto -238 <realloc+0x436 : 109a58 >
  109b46:    54 5f             	if (r4 == 0) goto -130 <realloc+0x4A4 : 109ac6 >
  109b48:    55 50             	if (r5 == 0) goto -160 <realloc+0x488 : 109aaa >
  109b4a:    44 41             	if (r4 == 0) goto -254 <realloc+0x42C : 109a4e >
  109b4c:    54 45             	if (r4 == 0) goto -182 <realloc+0x476 : 109a98 >
  109b4e:    00 00             	nop
  109b50:    45 58             	if (r5 == 0) goto -208 <realloc+0x460 : 109a82 >
  109b52:    5f 41             	r7 = b[r5+1] (u)
  109b54:    50 49             	if (r0 == 0) goto -174 <realloc+0x486 : 109aa8 >
  109b56:    5f 55             	r7 = b[r5+-11] (u)
  109b58:    50 44             	if (r0 == 0) goto -184 <realloc+0x480 : 109aa2 >
  109b5a:    41 54             	if (r1 == 0) goto -216 <realloc+0x462 : 109a84 >
  109b5c:    45 5f             	if (r5 == 0) goto -194 <realloc+0x47A : 109a9c >
  109b5e:    54 49             	if (r4 == 0) goto -174 <realloc+0x490 : 109ab2 >
  109b60:    50 53             	if (r0 == 0) goto -154 <realloc+0x4A6 : 109ac8 >
  109b62:    5f 57             	r7 = b[r5+-9] (u)
  109b64:    41 49             	if (r1 == 0) goto -238 <realloc+0x456 : 109a78 >
  109b66:    54 5f             	if (r4 == 0) goto -130 <realloc+0x4C4 : 109ae6 >
  109b68:    53 54             	if (r3 == 0) goto -152 <realloc+0x4B0 : 109ad2 >
  109b6a:    41 52             	if (r1 == 0) goto -220 <realloc+0x46E : 109a90 >
  109b6c:    54 5f             	if (r4 == 0) goto -130 <realloc+0x4CA : 109aec >
  109b6e:    55 50             	if (r5 == 0) goto -160 <realloc+0x4AE : 109ad0 >
  109b70:    44 41             	if (r4 == 0) goto -254 <realloc+0x452 : 109a74 >
  109b72:    54 45             	if (r4 == 0) goto -182 <realloc+0x49C : 109abe >
  109b74:    00 00             	nop
  109b76:    00 00             	nop
  109b78:    00 00             	nop
  109b7a:    00 00             	nop
  109b7c:    00 00             	nop
  109b7e:    00 00             	nop
  109b80:    6c 63             	r4 = h[r6+6] (u)
  109b82:    64 5f             	if (r4 == 0) goto -66 <realloc+0x520 : 109b42 >
  109b84:    70 61             	r0 = [r7+4] 
  109b86:    70 5f             	if (r0 == 0) goto -2 <realloc+0x564 : 109b86 >
  109b88:    64 72             	r4 = [r6+-56] 
  109b8a:    61 77             	r1 = [r6+-36] 
  109b8c:    20 62             	r0 = [r2+8] 
  109b8e:    65 67             	r5 = [r6+28] 
  109b90:    69 6e             	r1 = h[r6+28] (u)
  109b92:    2e 00             	ssync
  109b94:    00 00             	nop
  109b96:    00 00             	nop
  109b98:    00 00             	nop
  109b9a:    00 00             	nop
  109b9c:    00 00             	nop
  109b9e:    00 00             	nop
  109ba0:    6c 63             	r4 = h[r6+6] (u)
  109ba2:    64 5f             	if (r4 == 0) goto -66 <realloc+0x540 : 109b62 >
  109ba4:    70 61             	r0 = [r7+4] 
  109ba6:    70 5f             	if (r0 == 0) goto -2 <realloc+0x584 : 109ba6 >
  109ba8:    64 72             	r4 = [r6+-56] 
  109baa:    61 77             	r1 = [r6+-36] 
  109bac:    20 65             	r0 = [r2+20] 
  109bae:    6e 64             	r6 = h[r6+8] (u)
  109bb0:    2e 00             	ssync
  109bb2:    00 00             	nop
  109bb4:    00 00             	nop
  109bb6:    00 00             	nop
  109bb8:    00 00             	nop
  109bba:    00 00             	nop
  109bbc:    00 00             	nop
  109bbe:    00 00             	nop
  109bc0:    72 65             	r2 = [r7+20] 
  109bc2:    73 65             	r3 = [r7+20] 
  109bc4:    74 5f             	if (r4 == 0) goto -2 <realloc+0x5A2 : 109bc4 >
  109bc6:    61 6c             	r1 = [r6+48] 
  109bc8:    6c 6f             	r4 = h[r6+30] (u)
  109bca:    77 5f             	if (r7 == 0) goto -2 <realloc+0x5A8 : 109bca >
  109bcc:    66 6c             	r6 = [r6+48] 
  109bce:    61 67             	r1 = [r6+28] 
  109bd0:    00 00             	nop
  109bd2:    00 00             	nop
  109bd4:    00 00             	nop
  109bd6:    00 00             	nop
  109bd8:    00 00             	nop
  109bda:    00 00             	nop
  109bdc:    00 00             	nop
  109bde:    00 00             	nop
  109be0:    6c 63             	r4 = h[r6+6] (u)
  109be2:    64 5f             	if (r4 == 0) goto -66 <realloc+0x580 : 109ba2 >
  109be4:    72 67             	r2 = [r7+28] 
  109be6:    62 5f             	if (r2 == 0) goto -66 <realloc+0x584 : 109ba6 >
  109be8:    64 72             	r4 = [r6+-56] 
  109bea:    61 77             	r1 = [r6+-36] 
  109bec:    20 62             	r0 = [r2+8] 
  109bee:    65 67             	r5 = [r6+28] 
  109bf0:    69 6e             	r1 = h[r6+28] (u)
  109bf2:    2e 00             	ssync
  109bf4:    00 00             	nop
  109bf6:    00 00             	nop
  109bf8:    00 00             	nop
  109bfa:    00 00             	nop
  109bfc:    00 00             	nop
  109bfe:    00 00             	nop
  109c00:    6c 63             	r4 = h[r6+6] (u)
  109c02:    64 5f             	if (r4 == 0) goto -66 <realloc+0x5A0 : 109bc2 >
  109c04:    72 67             	r2 = [r7+28] 
  109c06:    62 5f             	if (r2 == 0) goto -66 <realloc+0x5A4 : 109bc6 >
  109c08:    64 72             	r4 = [r6+-56] 
  109c0a:    61 77             	r1 = [r6+-36] 
  109c0c:    20 65             	r0 = [r2+20] 
  109c0e:    6e 64             	r6 = h[r6+8] (u)
  109c10:    2e 00             	ssync
  109c12:    00 00             	nop
  109c14:    00 00             	nop
  109c16:    00 00             	nop
  109c18:    00 00             	nop
  109c1a:    00 00             	nop
  109c1c:    00 00             	nop
  109c1e:    00 00             	nop
  109c20:    69 6d             	r1 = h[r6+26] (u)
  109c22:    64 72             	r4 = [r6+-56] 
  109c24:    67 62             	r7 = [r6+8] 
  109c26:    5f 69             	r7 = h[r5+18] (u)
  109c28:    6e 69             	r6 = h[r6+18] (u)
  109c2a:    74 20             	r4 = 192
  109c2c:    65 6e             	r5 = [r6+56] 
  109c2e:    64 2e             	r4 = 142
  109c30:    00 00             	nop
  109c32:    00 00             	nop
  109c34:    00 00             	nop
  109c36:    00 00             	nop
  109c38:    00 00             	nop
  109c3a:    00 00             	nop
  109c3c:    00 00             	nop
  109c3e:    00 00             	nop


line_begin_cmd:
  109c40:    11 01             	tbh [r1]
  109c42:    11 10             	r1 = b[r1++=r8] (u)
  109c44:    00 00             	nop
  109c46:    00 00             	nop
  109c48:    01 10             	r1 = b[r0++=r8] (u)
  109c4a:    00 00             	nop
  109c4c:    00 00             	nop
  109c4e:    00 00             	nop
  109c50:    00 00             	nop
  109c52:    00 00             	nop
  109c54:    00 00             	nop
  109c56:    00 00             	nop
  109c58:    00 00             	nop
  109c5a:    00 00             	nop
  109c5c:    00 00             	nop
  109c5e:    00 00             	nop
  109c60:    00 00             	nop
  109c62:    00 00             	nop
  109c64:    00 00             	nop
  109c66:    00 00             	nop
  109c68:    00 00             	nop
  109c6a:    00 00             	nop
  109c6c:    00 00             	nop
  109c6e:    00 00             	nop
  109c70:    00 00             	nop
  109c72:    00 00             	nop
  109c74:    00 00             	nop
  109c76:    00 00             	nop
  109c78:    00 00             	nop
  109c7a:    00 00             	nop
  109c7c:    00 00             	nop
  109c7e:    00 00             	nop


lcd_spi_sh8601a_cmd_list_poweron:
  109c80:    55 55             	if (r5 == 0) goto -150 <realloc+0x5CA : 109bec >
  109c82:    55 55             	if (r5 == 0) goto -150 <realloc+0x5CC : 109bee >
  109c84:    c0 5a             	if (r0 != 0) goto -204 <realloc+0x598 : 109bba >
  109c86:    5a aa             	r2 = r5 <<< 10
  109c88:    aa aa             	r2 = r2 >>> 10
  109c8a:    aa 55             	b[r2+-11] = r2
  109c8c:    55 55             	if (r5 == 0) goto -150 <realloc+0x5D6 : 109bf8 >
  109c8e:    55 c1              <unknown instruction>
  109c90:    5a 5a             	r2 = b[r5+-6] (u)
  109c92:    aa aa             	r2 = r2 >>> 10
  109c94:    aa aa             	r2 = r2 >>> 10
  109c96:    55 55             	if (r5 == 0) goto -150 <realloc+0x5E0 : 109c02 >
  109c98:    55 55             	if (r5 == 0) goto -150 <realloc+0x5E2 : 109c04 >
  109c9a:    11 aa             	r1 = r1 << 10
  109c9c:    aa aa             	r2 = r2 >>> 10
  109c9e:    aa 55             	b[r2+-11] = r2
  109ca0:    55 55             	if (r5 == 0) goto -150 <realloc+0x5EA : 109c0c >
  109ca2:    55 ff              <unknown instruction>
  109ca4:    5a a5             	r2 = r5 <<< 5
  109ca6:    ff 64             	h[r7+8] = r7
  109ca8:    aa aa             	r2 = r2 >>> 10
  109caa:    aa aa             	r2 = r2 >>> 10
  109cac:    55 55             	if (r5 == 0) goto -150 <realloc+0x5F6 : 109c18 >
  109cae:    55 55             	if (r5 == 0) goto -150 <realloc+0x5F8 : 109c1a >
  109cb0:    3a 55             	r2 = b[r3+-11] (u)
  109cb2:    aa aa             	r2 = r2 >>> 10
  109cb4:    aa aa             	r2 = r2 >>> 10
  109cb6:    55 55             	if (r5 == 0) goto -150 <realloc+0x600 : 109c22 >
  109cb8:    55 55             	if (r5 == 0) goto -150 <realloc+0x602 : 109c24 >
  109cba:    44 00              <unknown instruction>
  109cbc:    00 aa             	r0 = r0 << 10
  109cbe:    aa aa             	r2 = r2 >>> 10
  109cc0:    aa 55             	b[r2+-11] = r2
  109cc2:    55 55             	if (r5 == 0) goto -150 <realloc+0x60C : 109c2e >
  109cc4:    55 35             	r5 = 85
  109cc6:    00 aa             	r0 = r0 << 10
  109cc8:    aa aa             	r2 = r2 >>> 10
  109cca:    aa 55             	b[r2+-11] = r2
  109ccc:    55 55             	if (r5 == 0) goto -150 <realloc+0x616 : 109c38 >
  109cce:    55 b0             	r5 = r5 << 16
  109cd0:    16 aa             	r6 = r1 << 10
  109cd2:    aa aa             	r2 = r2 >>> 10
  109cd4:    aa 55             	b[r2+-11] = r2
  109cd6:    55 55             	if (r5 == 0) goto -150 <line_begin_cmd+0x2 : 109c42 >
  109cd8:    55 b1             	r5 = r5 << 17
  109cda:    01 05             	r1 = [r0++=4] 
  109cdc:    00 a2             	r0 = r0 << 2
  109cde:    00 a7             	r0 = r0 << 7
  109ce0:    00 a7             	r0 = r0 << 7
  109ce2:    00 aa             	r0 = r0 << 10
  109ce4:    aa aa             	r2 = r2 >>> 10
  109ce6:    aa 55             	b[r2+-11] = r2
  109ce8:    55 55             	if (r5 == 0) goto -150 <line_begin_cmd+0x14 : 109c54 >
  109cea:    55 53             	if (r5 == 0) goto -154 <line_begin_cmd+0x12 : 109c52 >
  109cec:    28 aa             	r0 = r2 <<< 10
  109cee:    aa aa             	r2 = r2 >>> 10
  109cf0:    aa 55             	b[r2+-11] = r2
  109cf2:    55 55             	if (r5 == 0) goto -150 <line_begin_cmd+0x1E : 109c5e >
  109cf4:    55 c4              <unknown instruction>
  109cf6:    80 aa             	r0 = r0 >> 10
  109cf8:    aa aa             	r2 = r2 >>> 10
  109cfa:    aa 55             	b[r2+-11] = r2
  109cfc:    55 55             	if (r5 == 0) goto -150 <line_begin_cmd+0x28 : 109c68 >
  109cfe:    55 ff              <unknown instruction>
  109d00:    5a a5             	r2 = r5 <<< 5
  109d02:    ff 19             	r7 = ~r7
  109d04:    aa aa             	r2 = r2 >>> 10
  109d06:    aa aa             	r2 = r2 >>> 10
  109d08:    55 55             	if (r5 == 0) goto -150 <line_begin_cmd+0x34 : 109c74 >
  109d0a:    55 55             	if (r5 == 0) goto -150 <line_begin_cmd+0x36 : 109c76 >
  109d0c:    29 aa             	r1 = r2 <<< 10
  109d0e:    aa aa             	r2 = r2 >>> 10
  109d10:    aa 55             	b[r2+-11] = r2
  109d12:    55 55             	if (r5 == 0) goto -150 <line_begin_cmd+0x3E : 109c7e >
  109d14:    55 ff              <unknown instruction>
  109d16:    5a a5             	r2 = r5 <<< 5
  109d18:    ff 14              <unknown instruction>
  109d1a:    aa aa             	r2 = r2 >>> 10
  109d1c:    aa aa             	r2 = r2 >>> 10
  109d1e:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0xA : 109c8a >
  109d20:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0xC : 109c8c >
  109d22:    b1 c0              <unknown instruction>
  109d24:    aa aa             	r2 = r2 >>> 10
  109d26:    aa aa             	r2 = r2 >>> 10
  109d28:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x14 : 109c94 >
  109d2a:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x16 : 109c96 >
  109d2c:    c0 a5             	r0 = r4 >> 5
  109d2e:    a5 aa             	r5 = r2 >> 10
  109d30:    aa aa             	r2 = r2 >>> 10
  109d32:    aa 55             	b[r2+-11] = r2
  109d34:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x20 : 109ca0 >
  109d36:    55 c1              <unknown instruction>
  109d38:    a5 a5             	r5 = r2 >> 5
  109d3a:    aa aa             	r2 = r2 >>> 10
  109d3c:    aa aa             	r2 = r2 >>> 10
  109d3e:    00 00             	nop


lcd_cmd_list_sleepout:
  109d40:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x2C : 109cac >
  109d42:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x2E : 109cae >
  109d44:    c0 5a             	if (r0 != 0) goto -204 <line_begin_cmd+0x3A : 109c7a >
  109d46:    5a aa             	r2 = r5 <<< 10
  109d48:    aa aa             	r2 = r2 >>> 10
  109d4a:    aa 55             	b[r2+-11] = r2
  109d4c:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x38 : 109cb8 >
  109d4e:    55 c1              <unknown instruction>
  109d50:    5a 5a             	r2 = b[r5+-6] (u)
  109d52:    aa aa             	r2 = r2 >>> 10
  109d54:    aa aa             	r2 = r2 >>> 10
  109d56:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x42 : 109cc2 >
  109d58:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x44 : 109cc4 >
  109d5a:    3a 55             	r2 = b[r3+-11] (u)
  109d5c:    aa aa             	r2 = r2 >>> 10
  109d5e:    aa aa             	r2 = r2 >>> 10
  109d60:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x4C : 109ccc >
  109d62:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x4E : 109cce >
  109d64:    44 00              <unknown instruction>
  109d66:    00 aa             	r0 = r0 << 10
  109d68:    aa aa             	r2 = r2 >>> 10
  109d6a:    aa 55             	b[r2+-11] = r2
  109d6c:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x58 : 109cd8 >
  109d6e:    55 35             	r5 = 85
  109d70:    00 aa             	r0 = r0 << 10
  109d72:    aa aa             	r2 = r2 >>> 10
  109d74:    aa 55             	b[r2+-11] = r2
  109d76:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x62 : 109ce2 >
  109d78:    55 b0             	r5 = r5 << 16
  109d7a:    16 aa             	r6 = r1 << 10
  109d7c:    aa aa             	r2 = r2 >>> 10
  109d7e:    aa 55             	b[r2+-11] = r2
  109d80:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x6C : 109cec >
  109d82:    55 b1             	r5 = r5 << 17
  109d84:    01 05             	r1 = [r0++=4] 
  109d86:    00 a2             	r0 = r0 << 2
  109d88:    00 a7             	r0 = r0 << 7
  109d8a:    00 a7             	r0 = r0 << 7
  109d8c:    00 aa             	r0 = r0 << 10
  109d8e:    aa aa             	r2 = r2 >>> 10
  109d90:    aa 55             	b[r2+-11] = r2
  109d92:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x7E : 109cfe >
  109d94:    55 53             	if (r5 == 0) goto -154 <lcd_spi_sh8601a_cmd_list_poweron+0x7C : 109cfc >
  109d96:    28 aa             	r0 = r2 <<< 10
  109d98:    aa aa             	r2 = r2 >>> 10
  109d9a:    aa 55             	b[r2+-11] = r2
  109d9c:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x88 : 109d08 >
  109d9e:    55 c4              <unknown instruction>
  109da0:    80 aa             	r0 = r0 >> 10
  109da2:    aa aa             	r2 = r2 >>> 10
  109da4:    aa 55             	b[r2+-11] = r2
  109da6:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x92 : 109d12 >
  109da8:    55 b1             	r5 = r5 << 17
  109daa:    c0 aa             	r0 = r4 >> 10
  109dac:    aa aa             	r2 = r2 >>> 10
  109dae:    aa 55             	b[r2+-11] = r2
  109db0:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0x9C : 109d1c >
  109db2:    55 c0              <unknown instruction>
  109db4:    a5 a5             	r5 = r2 >> 5
  109db6:    aa aa             	r2 = r2 >>> 10
  109db8:    aa aa             	r2 = r2 >>> 10
  109dba:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0xA6 : 109d26 >
  109dbc:    55 55             	if (r5 == 0) goto -150 <lcd_spi_sh8601a_cmd_list_poweron+0xA8 : 109d28 >
  109dbe:    c1 a5             	r1 = r4 >> 5
  109dc0:    a5 aa             	r5 = r2 >> 10
  109dc2:    aa aa             	r2 = r2 >>> 10
  109dc4:    aa 00             	swi 2
  109dc6:    00 00             	nop


lcd_spi_data:
  109dc8:    02 00             	bkpt
  109dca:    00 00             	nop
  109dcc:    06 00              <unknown instruction>
  109dce:    00 00             	nop
  109dd0:    ff ff              <unknown instruction>
  109dd2:    ff ff              <unknown instruction>
  109dd4:    1a 00              <unknown instruction>
  109dd6:    00 00             	nop
  109dd8:    ff ff              <unknown instruction>
  109dda:    ff ff              <unknown instruction>
  109ddc:    ff ff              <unknown instruction>
  109dde:    ff ff              <unknown instruction>
  109de0:    00 00             	nop
  109de2:    00 00             	nop
  109de4:    00 00             	nop
  109de6:    00 00             	nop
  109de8:    00 00             	nop
  109dea:    00 00             	nop
  109dec:    00 00             	nop
  109dee:    00 00             	nop
  109df0:    00 00             	nop
  109df2:    00 00             	nop


text_matrix:
  109df4:    20 00             	csync
  109df6:    10 20             	r0 = -32
  109df8:    00 00             	nop
  109dfa:    30 00              <unknown instruction>
  109dfc:    10 20             	r0 = -32
  109dfe:    40 00             	lockclr
  109e00:    31 00              <unknown instruction>
  109e02:    10 20             	r0 = -32
  109e04:    80 00             	rts
  109e06:    32 00             	ssync
  109e08:    10 20             	r0 = -32
  109e0a:    c0 00             	call r0
  109e0c:    33 00             	btbclr
  109e0e:    10 20             	r0 = -32
  109e10:    00 01             	tbb [r0]
  109e12:    34 00              <unknown instruction>
  109e14:    10 20             	r0 = -32
  109e16:    40 01              <unknown instruction>
  109e18:    35 00              <unknown instruction>
  109e1a:    10 20             	r0 = -32
  109e1c:    80 01              <unknown instruction>
  109e1e:    36 00             	ssync
  109e20:    10 20             	r0 = -32
  109e22:    c0 01              <unknown instruction>
  109e24:    37 00             	btbclr
  109e26:    10 20             	r0 = -32
  109e28:    00 02             	pfetch [r0]
  109e2a:    38 00              <unknown instruction>
  109e2c:    10 20             	r0 = -32
  109e2e:    40 02              <unknown instruction>
  109e30:    39 00              <unknown instruction>
  109e32:    10 20             	r0 = -32
  109e34:    80 02              <unknown instruction>
  109e36:    41 00             	lockset
  109e38:    10 20             	r0 = -32
  109e3a:    c0 02              <unknown instruction>
  109e3c:    42 00              <unknown instruction>
  109e3e:    10 20             	r0 = -32
  109e40:    00 03             	rep 2 r0 {
  109e42:    43 00              <unknown instruction>
  109e44:    10 20             		r0 = -32
                               	}
  109e46:    40 03             	rep 10 r0 {
  109e48:    44 00              <unknown instruction>
  109e4a:    10 20             		r0 = -32
  109e4c:    80 03             		rep 18 r0 {
  109e4e:    45 00              <unknown instruction>
  109e50:    10 20             		r0 = -32
  109e52:    c0 03             		rep 26 r0 {
  109e54:    46 00              <unknown instruction>
  109e56:    10 20             		r0 = -32
  109e58:    00 04             		pc = [sp++]
  109e5a:    58 00              <unknown instruction>
  109e5c:    10 20             		r0 = -32
  109e5e:    40 04             		{r3-r0} = [sp++]
  109e60:    25 00              <unknown instruction>
  109e62:    10 20             		r0 = -32
  109e64:    80 04             		{} = [sp++]
  109e66:    fd c9              <unknown instruction>
  109e68:    20 20             		r0 = [sp+128]
  109e6a:    c0 04             		[--sp] = {}
  109e6c:    b6 bc             		r6 = r3 >> 28
  109e6e:    20 20             		r0 = [sp+128]
  109e70:    40 05             		r0 = [r4++=4] 
  109e72:    d0 d6             		r0 = r13  #
  109e74:    20 20             			 r0 = [sp+128]
                               	}
  109e76:    c0 05             	[r4++=4] = r0
  109e78:    ea cd              <unknown instruction>
  109e7a:    20 20             	r0 = [sp+128]
  109e7c:    40 06             	r0 = h[r4++=2] (u)
  109e7e:    cf b1             	r7 = r4 >>> 17
  109e80:    20 20             	r0 = [sp+128]
  109e82:    c0 06             	h[r4++=2] = r0
  109e84:    f8 bd             	r0 = r7 >>> 29
  109e86:    20 20             	r0 = [sp+128]
  109e88:    40 07             	r0 = b[r4++=1] (u)
  109e8a:    c8 b6             	r0 = r4 >>> 22
  109e8c:    20 20             	r0 = [sp+128]
  109e8e:    c0 07             	b[r4++=1] = r0
  109e90:    fa bb             	r2 = r7 >>> 27
  109e92:    20 20             	r0 = [sp+128]
  109e94:    40 08             	r0 = [r4++=r8] 
  109e96:    f7 c6              <unknown instruction>
  109e98:    20 20             	r0 = [sp+128]
  109e9a:    c0 08             	r0 = [r4++=r9] 
  109e9c:    b4 bc             	r4 = r3 >> 28
  109e9e:    20 20             	r0 = [sp+128]
  109ea0:    40 09             	r0 = [r4++=r10] 
  109ea2:    ab bd             	r3 = r2 >>> 29
  109ea4:    20 20             	r0 = [sp+128]
  109ea6:    c0 09             	r0 = [r4++=r11] 
  109ea8:    d8 d6             	r8 = r13  #
  109eaa:    20 20             		 r0 = [sp+128]
  109eac:    40 0a             	r0 = [r4++=r12] 
  109eae:    f4 c6              <unknown instruction>
  109eb0:    20 20             	r0 = [sp+128]
  109eb2:    c0 0a             	r0 = [r4++=r13] 
  109eb4:    ac a3             	r4 = r2 >>> 3
  109eb6:    20 20             	r0 = [sp+128]
  109eb8:    40 0b             	r0 = [r4++=r14] 
  109eba:    eb c7              <unknown instruction>
  109ebc:    20 20             	r0 = [sp+128]
  109ebe:    c0 0b             	r0 = [r4++=r15] 
  109ec0:    bb b2             	r3 = r3 >>> 18
  109ec2:    20 20             	r0 = [sp+128]
  109ec4:    40 0c             	r0 = h[r4++=r8] (u)
  109ec6:    aa d2              <unknown instruction>
  109ec8:    20 20             	r0 = [sp+128]
  109eca:    c0 0c             	r0 = h[r4++=r9] (u)
  109ecc:    cf b6             	r7 = r4 >>> 22
  109ece:    20 20             	r0 = [sp+128]
  109ed0:    40 0d             	r0 = h[r4++=r10] (u)
  109ed2:    e7 b5             	r7 = r6 >> 21
  109ed4:    20 20             	r0 = [sp+128]
  109ed6:    c0 0d             	r0 = h[r4++=r11] (u)
  109ed8:    21 00             	syscall
  109eda:    10 20             	r0 = -32
  109edc:    40 0e             	r0 = h[r4++=r12] (u)
  109ede:    3a 00             	ssync
  109ee0:    10 20             	r0 = -32
  109ee2:    80 0e             	r0 = h[r0++=r13] (u)
  109ee4:    2e 00             	ssync
  109ee6:    10 20             	r0 = -32
  109ee8:    c0 0e             	r0 = h[r4++=r13] (u)
  109eea:    c8 b5             	r0 = r4 >>> 21
  109eec:    20 20             	r0 = [sp+128]
  109eee:    00 0f             	r0 = h[r0++=r14] (u)
  109ef0:    fd b4             	r5 = r7 >>> 20
  109ef2:    20 20             	r0 = [sp+128]
  109ef4:    80 0f             	r0 = h[r0++=r15] (u)
  109ef6:    ac c1              <unknown instruction>
  109ef8:    20 20             	r0 = [sp+128]
  109efa:    00 10             	r0 = b[r0++=r8] (u)
  109efc:    d3 bd             	r3 = r5 >> 29
  109efe:    20 20             	r0 = [sp+128]
  109f00:    80 10             	r0 = b[r0++=r9] (u)
  109f02:    a2 b3             	r2 = r2 >> 19
  109f04:    20 20             	r0 = [sp+128]
  109f06:    00 11             	r0 = b[r0++=r10] (u)
  109f08:    d4 ca              <unknown instruction>
  109f0a:    20 20             	r0 = [sp+128]
  109f0c:    80 11             	r0 = b[r0++=r11] (u)
  109f0e:    b9 ca              <unknown instruction>
  109f10:    20 20             	r0 = [sp+128]
  109f12:    00 12             	r0 = b[r0++=r12] (u)
  109f14:    c3 d3              <unknown instruction>
  109f16:    20 20             	r0 = [sp+128]
  109f18:    80 12             	r0 = b[r0++=r13] (u)
  109f1a:    ed c8              <unknown instruction>
  109f1c:    20 20             	r0 = [sp+128]
  109f1e:    00 13             	r0 = b[r0++=r14] (u)
  109f20:    fe bc             	r6 = r7 >>> 28
  109f22:    20 20             	r0 = [sp+128]
  109f24:    80 13             	r0 = b[r0++=r15] (u)
  109f26:    d6 ca              <unknown instruction>
  109f28:    20 20             	r0 = [sp+128]
  109f2a:    00 14             	cc = 0
  109f2c:    af b6             	r7 = r2 >>> 22
  109f2e:    20 20             	r0 = [sp+128]
  109f30:    80 14             	r1_r0 = 0
  109f32:    a5 b4             	r5 = r2 >> 20
  109f34:    20 20             	r0 = [sp+128]
  109f36:    00 15             	r1_r0 = r1_r0
  109f38:    a2 b7             	r2 = r2 >> 23
  109f3a:    20 20             	r0 = [sp+128]
  109f3c:    80 15             	r1_r0 = r9_r8
  109f3e:    d8 b5             	r0 = r5 >>> 21
  109f40:    20 20             	r0 = [sp+128]
  109f42:    00 16             	r0 = r0
  109f44:    b7 d6             	r7 = r11  #
  109f46:    20 20             		 r0 = [sp+128]
  109f48:    80 16             	r0 = r8
  109f4a:    eb c8              <unknown instruction>
  109f4c:    20 20             	r0 = [sp+128]
  109f4e:    00 17             	r0 = r0.b0 (u)
  109f50:    bf c7              <unknown instruction>
  109f52:    20 20             	r0 = [sp+128]
  109f54:    80 17             	r0 = r0.l (u)
  109f56:    c6 d6             	r6 = r12  #
  109f58:    20 20             		 r0 = [sp+128]
  109f5a:    00 18             	r0 += r0
  109f5c:    00 00             	nop
  109f5e:    00 00             	nop
  109f60:    00 00             	nop
  109f62:    00 00             	nop
  109f64:    00 00             	nop
  109f66:    00 00             	nop
  109f68:    00 00             	nop
  109f6a:    00 00             	nop
  109f6c:    00 00             	nop
  109f6e:    00 00             	nop
  109f70:    00 00             	nop
  109f72:    00 00             	nop
  109f74:    00 00             	nop
  109f76:    00 00             	nop
  109f78:    00 00             	nop
  109f7a:    00 00             	nop
  109f7c:    00 00             	nop
  109f7e:    00 00             	nop


osd_str_matrix:
  109f80:    00 00             	nop
  109f82:    00 00             	nop
  109f84:    00 00             	nop
  109f86:    00 00             	nop
  109f88:    00 00             	nop
  109f8a:    00 00             	nop
  109f8c:    00 00             	nop
  109f8e:    00 00             	nop
  109f90:    00 00             	nop
  109f92:    00 00             	nop
  109f94:    00 00             	nop
  109f96:    00 00             	nop
  109f98:    00 00             	nop
  109f9a:    00 00             	nop
  109f9c:    00 00             	nop
  109f9e:    00 00             	nop
  109fa0:    00 00             	nop
  109fa2:    00 00             	nop
  109fa4:    00 00             	nop
  109fa6:    00 00             	nop
  109fa8:    00 00             	nop
  109faa:    00 00             	nop
  109fac:    00 00             	nop
  109fae:    00 00             	nop
  109fb0:    00 00             	nop
  109fb2:    00 00             	nop
  109fb4:    00 00             	nop
  109fb6:    00 00             	nop
  109fb8:    00 00             	nop
  109fba:    00 00             	nop
  109fbc:    00 00             	nop
  109fbe:    00 00             	nop
  109fc0:    00 00             	nop
  109fc2:    00 00             	nop
  109fc4:    00 00             	nop
  109fc6:    00 00             	nop
  109fc8:    00 00             	nop
  109fca:    00 00             	nop
  109fcc:    03 c0              <unknown instruction>
  109fce:    06 20             	r6 = [sp]
  109fd0:    0c 30             	r12 = [sp+64]
  109fd2:    18 18             	r8 += r1
  109fd4:    18 18             	r8 += r1
  109fd6:    18 08             	[r1++=r8] = r0
  109fd8:    30 0c             	r0 = h[r3++=r8] (u)
  109fda:    30 0c             	r0 = h[r3++=r8] (u)
  109fdc:    30 0c             	r0 = h[r3++=r8] (u)
  109fde:    30 0c             	r0 = h[r3++=r8] (u)
  109fe0:    30 0c             	r0 = h[r3++=r8] (u)
  109fe2:    30 0c             	r0 = h[r3++=r8] (u)
  109fe4:    30 0c             	r0 = h[r3++=r8] (u)
  109fe6:    30 0c             	r0 = h[r3++=r8] (u)
  109fe8:    30 0c             	r0 = h[r3++=r8] (u)
  109fea:    30 0c             	r0 = h[r3++=r8] (u)
  109fec:    18 08             	[r1++=r8] = r0
  109fee:    18 18             	r8 += r1
  109ff0:    18 18             	r8 += r1
  109ff2:    0c 30             	r12 = [sp+64]
  109ff4:    06 20             	r6 = [sp]
  109ff6:    03 c0              <unknown instruction>
  109ff8:    00 00             	nop
  109ffa:    00 00             	nop
  109ffc:    00 00             	nop
  109ffe:    00 00             	nop
  10a000:    00 00             	nop
  10a002:    00 00             	nop
  10a004:    00 00             	nop
  10a006:    00 00             	nop
  10a008:    00 00             	nop
  10a00a:    00 00             	nop
  10a00c:    00 80             	rep 2 1 {
  10a00e:    01 80             		call 0
                               	} <osd_str_matrix+0x90 : 10a010 >
  10a010:    1f 80             	r7 = r1 + 0
  10a012:    01 80             	call 0 <osd_str_matrix+0x94 : 10a014 >
  10a014:    01 80             	call 0 <osd_str_matrix+0x96 : 10a016 >
  10a016:    01 80             	call 0 <osd_str_matrix+0x98 : 10a018 >
  10a018:    01 80             	call 0 <osd_str_matrix+0x9A : 10a01a >
  10a01a:    01 80             	call 0 <osd_str_matrix+0x9C : 10a01c >
  10a01c:    01 80             	call 0 <osd_str_matrix+0x9E : 10a01e >
  10a01e:    01 80             	call 0 <osd_str_matrix+0xA0 : 10a020 >
  10a020:    01 80             	call 0 <osd_str_matrix+0xA2 : 10a022 >
  10a022:    01 80             	call 0 <osd_str_matrix+0xA4 : 10a024 >
  10a024:    01 80             	call 0 <osd_str_matrix+0xA6 : 10a026 >
  10a026:    01 80             	call 0 <osd_str_matrix+0xA8 : 10a028 >
  10a028:    01 80             	call 0 <osd_str_matrix+0xAA : 10a02a >
  10a02a:    01 80             	call 0 <osd_str_matrix+0xAC : 10a02c >
  10a02c:    01 80             	call 0 <osd_str_matrix+0xAE : 10a02e >
  10a02e:    01 80             	call 0 <osd_str_matrix+0xB0 : 10a030 >
  10a030:    01 80             	call 0 <osd_str_matrix+0xB2 : 10a032 >
  10a032:    01 80             	call 0 <osd_str_matrix+0xB4 : 10a034 >
  10a034:    03 c0              <unknown instruction>
  10a036:    1f f8 00 00       	if (r15 == 128) goto 0 <osd_str_matrix+0xBA : 10a03a >
  10a03a:    00 00             	nop
  10a03c:    00 00             	nop
  10a03e:    00 00             	nop
  10a040:    00 00             	nop
  10a042:    00 00             	nop
  10a044:    00 00             	nop
  10a046:    00 00             	nop
  10a048:    00 00             	nop
  10a04a:    00 00             	nop
  10a04c:    07 e0 08 38       	r7.l = 14344
  10a050:    10 18             	r0 += r1
  10a052:    20 0c             	r0 = h[r2++=r8] (u)
  10a054:    20 0c             	r0 = h[r2++=r8] (u)
  10a056:    30 0c             	r0 = h[r3++=r8] (u)
  10a058:    30 0c             	r0 = h[r3++=r8] (u)
  10a05a:    00 0c             	r0 = h[r0++=r8] (u)
  10a05c:    00 18             	r0 += r0
  10a05e:    00 18             	r0 += r0
  10a060:    00 30             	r0 = [sp+64]
  10a062:    00 60             	r0 = [r0+0] 
  10a064:    00 c0              <unknown instruction>
  10a066:    01 80             	call 0 <osd_str_matrix+0xE8 : 10a068 >
  10a068:    03 00             	hbkpt
  10a06a:    02 00             	bkpt
  10a06c:    04 04              <unknown instruction>
  10a06e:    08 04              <unknown instruction>
  10a070:    10 04             	[--sp] = rets
  10a072:    20 0c             	r0 = h[r2++=r8] (u)
  10a074:    3f f8 3f f8       	if (r15 == 508) goto 126 <osd_str_matrix+0x176 : 10a0f6 >
  10a078:    00 00             	nop
  10a07a:    00 00             	nop
  10a07c:    00 00             	nop
  10a07e:    00 00             	nop
  10a080:    00 00             	nop
  10a082:    00 00             	nop
  10a084:    00 00             	nop
  10a086:    00 00             	nop
  10a088:    00 00             	nop
  10a08a:    00 00             	nop
  10a08c:    07 c0              <unknown instruction>
  10a08e:    18 60             	r0 = h[r1+0] (u)
  10a090:    30 30             	r0 |= 65536
  10a092:    30 18             	r0 += r3
  10a094:    30 18             	r0 += r3
  10a096:    30 18             	r0 += r3
  10a098:    00 18             	r0 += r0
  10a09a:    00 18             	r0 += r0
  10a09c:    00 30             	r0 = [sp+64]
  10a09e:    00 60             	r0 = [r0+0] 
  10a0a0:    03 c0              <unknown instruction>
  10a0a2:    00 70             	r0 = [r0+-64] 
  10a0a4:    00 18             	r0 += r0
  10a0a6:    00 08             	r0 = [r0++=r8] 
  10a0a8:    00 0c             	r0 = h[r0++=r8] (u)
  10a0aa:    00 0c             	r0 = h[r0++=r8] (u)
  10a0ac:    30 0c             	r0 = h[r3++=r8] (u)
  10a0ae:    30 0c             	r0 = h[r3++=r8] (u)
  10a0b0:    30 08             	r0 = [r3++=r8] 
  10a0b2:    30 18             	r0 += r3
  10a0b4:    18 30              <unknown instruction>
  10a0b6:    07 c0              <unknown instruction>
  10a0b8:    00 00             	nop
  10a0ba:    00 00             	nop
  10a0bc:    00 00             	nop
  10a0be:    00 00             	nop
  10a0c0:    00 00             	nop
  10a0c2:    00 00             	nop
  10a0c4:    00 00             	nop
  10a0c6:    00 00             	nop
  10a0c8:    00 00             	nop
  10a0ca:    00 00             	nop
  10a0cc:    00 60             	r0 = [r0+0] 
  10a0ce:    00 60             	r0 = [r0+0] 
  10a0d0:    00 e0 00 e0       	r0.l = 57344
  10a0d4:    01 60             	r1 = [r0+0] 
  10a0d6:    01 60             	r1 = [r0+0] 
  10a0d8:    02 60             	r2 = [r0+0] 
  10a0da:    04 60             	r4 = [r0+0] 
  10a0dc:    04 60             	r4 = [r0+0] 
  10a0de:    08 60             	r0 = h[r0+0] (u)
  10a0e0:    08 60             	r0 = h[r0+0] (u)
  10a0e2:    10 60             	r0 = [r1+0] 
  10a0e4:    30 60             	r0 = [r3+0] 
  10a0e6:    20 60             	r0 = [r2+0] 
  10a0e8:    40 60             	r0 = [r4+0] 
  10a0ea:    7f fc 00 60       	if (r15 > 944) goto 0 <osd_str_matrix+0x16E : 10a0ee >
  10a0ee:    00 60             	r0 = [r0+0] 
  10a0f0:    00 60             	r0 = [r0+0] 
  10a0f2:    00 60             	r0 = [r0+0] 
  10a0f4:    00 60             	r0 = [r0+0] 
  10a0f6:    03 fc 00 00       	if (r3 > 0) goto 0 <osd_str_matrix+0x17A : 10a0fa >
  10a0fa:    00 00             	nop
  10a0fc:    00 00             	nop
  10a0fe:    00 00             	nop
  10a100:    00 00             	nop
  10a102:    00 00             	nop
  10a104:    00 00             	nop
  10a106:    00 00             	nop
  10a108:    00 00             	nop
  10a10a:    00 00             	nop
  10a10c:    0f fc 0f fc       	if (r15 > 126) goto 30 <osd_str_matrix+0x1AE : 10a12e >
  10a110:    10 00              <unknown instruction>
  10a112:    10 00              <unknown instruction>
  10a114:    10 00              <unknown instruction>
  10a116:    10 00              <unknown instruction>
  10a118:    10 00              <unknown instruction>
  10a11a:    10 00              <unknown instruction>
  10a11c:    13 e0 14 30       	r3.h = 12308
  10a120:    18 18             	r8 += r1
  10a122:    10 08             	r0 = [r1++=r8] 
  10a124:    00 0c             	r0 = h[r0++=r8] (u)
  10a126:    00 0c             	r0 = h[r0++=r8] (u)
  10a128:    00 0c             	r0 = h[r0++=r8] (u)
  10a12a:    00 0c             	r0 = h[r0++=r8] (u)
  10a12c:    30 0c             	r0 = h[r3++=r8] (u)
  10a12e:    30 0c             	r0 = h[r3++=r8] (u)
  10a130:    20 18             	r0 += r2
  10a132:    20 18             	r0 += r2
  10a134:    18 30              <unknown instruction>
  10a136:    07 c0              <unknown instruction>
  10a138:    00 00             	nop
  10a13a:    00 00             	nop
  10a13c:    00 00             	nop
  10a13e:    00 00             	nop
  10a140:    00 00             	nop
  10a142:    00 00             	nop
  10a144:    00 00             	nop
  10a146:    00 00             	nop
  10a148:    00 00             	nop
  10a14a:    00 00             	nop
  10a14c:    01 e0 06 18       	r1.l = 6150
  10a150:    0c 18             	r12 += r0
  10a152:    08 18             	r8 += r0
  10a154:    18 00              <unknown instruction>
  10a156:    10 00              <unknown instruction>
  10a158:    10 00              <unknown instruction>
  10a15a:    30 00              <unknown instruction>
  10a15c:    33 e0              <unknown instruction>
  10a15e:    36 30             	r6 |= 65536
  10a160:    38 18             	r8 += r3
  10a162:    38 08             	[r3++=r8] = r0
  10a164:    30 0c             	r0 = h[r3++=r8] (u)
  10a166:    30 0c             	r0 = h[r3++=r8] (u)
  10a168:    30 0c             	r0 = h[r3++=r8] (u)
  10a16a:    30 0c             	r0 = h[r3++=r8] (u)
  10a16c:    30 0c             	r0 = h[r3++=r8] (u)
  10a16e:    18 0c             	h[r1++=r8] = r0
  10a170:    18 08             	[r1++=r8] = r0
  10a172:    0c 18             	r12 += r0
  10a174:    0e 30             	r14 = [sp+64]
  10a176:    03 e0 00 00       	r3.l = 0
  10a17a:    00 00             	nop
  10a17c:    00 00             	nop
  10a17e:    00 00             	nop
  10a180:    00 00             	nop
  10a182:    00 00             	nop
  10a184:    00 00             	nop
  10a186:    00 00             	nop
  10a188:    00 00             	nop
  10a18a:    00 00             	nop
  10a18c:    1f fc 1f fc       	if (r15 > 254) goto 62 <osd_str_matrix+0x24E : 10a1ce >
  10a190:    10 08             	r0 = [r1++=r8] 
  10a192:    30 10             	r0 = b[r3++=r8] (u)
  10a194:    20 10             	r0 = b[r2++=r8] (u)
  10a196:    20 20             	r0 = [sp+128]
  10a198:    00 20             	r0 = [sp]
  10a19a:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0x21C : 10a19c >
  10a19c:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0x21E : 10a19e >
  10a19e:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0x220 : 10a1a0 >
  10a1a0:    00 80             	rep 2 1 {
  10a1a2:    00 80             		rep 2 1
                               	} {
  10a1a4:    01 00             		idle
                               	}
  10a1a6:    01 00             	idle
  10a1a8:    01 00             	idle
  10a1aa:    01 00             	idle
  10a1ac:    03 00             	hbkpt
  10a1ae:    03 00             	hbkpt
  10a1b0:    03 00             	hbkpt
  10a1b2:    03 00             	hbkpt
  10a1b4:    03 00             	hbkpt
  10a1b6:    03 00             	hbkpt
  10a1b8:    00 00             	nop
  10a1ba:    00 00             	nop
  10a1bc:    00 00             	nop
  10a1be:    00 00             	nop
  10a1c0:    00 00             	nop
  10a1c2:    00 00             	nop
  10a1c4:    00 00             	nop
  10a1c6:    00 00             	nop
  10a1c8:    00 00             	nop
  10a1ca:    00 00             	nop
  10a1cc:    07 e0 0c 30       	r7.l = 12300
  10a1d0:    18 18             	r8 += r1
  10a1d2:    30 0c             	r0 = h[r3++=r8] (u)
  10a1d4:    30 0c             	r0 = h[r3++=r8] (u)
  10a1d6:    30 0c             	r0 = h[r3++=r8] (u)
  10a1d8:    38 0c             	h[r3++=r8] = r0
  10a1da:    38 08             	[r3++=r8] = r0
  10a1dc:    1e 18             	r14 += r1
  10a1de:    0f 20             	r15 = [sp]
  10a1e0:    07 c0              <unknown instruction>
  10a1e2:    18 f0 30 78       	r8.h = 30768  #
  10a1e6:    30 38             		 r0 |= 16777216
  10a1e8:    60 1c             	r0 = r6 + r0
  10a1ea:    60 0c             	r0 = h[r6++=r8] (u)
  10a1ec:    60 0c             	r0 = h[r6++=r8] (u)
  10a1ee:    60 0c             	r0 = h[r6++=r8] (u)
  10a1f0:    60 0c             	r0 = h[r6++=r8] (u)
  10a1f2:    30 18             	r0 += r3
  10a1f4:    18 30              <unknown instruction>
  10a1f6:    07 c0              <unknown instruction>
  10a1f8:    00 00             	nop
  10a1fa:    00 00             	nop
  10a1fc:    00 00             	nop
  10a1fe:    00 00             	nop
  10a200:    00 00             	nop
  10a202:    00 00             	nop
  10a204:    00 00             	nop
  10a206:    00 00             	nop
  10a208:    00 00             	nop
  10a20a:    00 00             	nop
  10a20c:    07 c0              <unknown instruction>
  10a20e:    18 20              <unknown instruction>
  10a210:    30 10             	r0 = b[r3++=r8] (u)
  10a212:    30 18             	r0 += r3
  10a214:    60 08             	r0 = [r6++=r8] 
  10a216:    60 0c             	r0 = h[r6++=r8] (u)
  10a218:    60 0c             	r0 = h[r6++=r8] (u)
  10a21a:    60 0c             	r0 = h[r6++=r8] (u)
  10a21c:    60 0c             	r0 = h[r6++=r8] (u)
  10a21e:    60 0c             	r0 = h[r6++=r8] (u)
  10a220:    70 1c             	r0 = r7 + r0
  10a222:    30 2c             	r0 |= 4096
  10a224:    18 6c             	r0 = h[r1+24] (u)
  10a226:    0f 8c             	r7 = r0 + 12
  10a228:    00 0c             	r0 = h[r0++=r8] (u)
  10a22a:    00 18             	r0 += r0
  10a22c:    00 18             	r0 += r0
  10a22e:    00 10             	r0 = b[r0++=r8] (u)
  10a230:    30 30             	r0 |= 65536
  10a232:    30 60             	r0 = [r3+0] 
  10a234:    30 c0              <unknown instruction>
  10a236:    0f 80             	r7 = r0 + 0
  10a238:    00 00             	nop
  10a23a:    00 00             	nop
  10a23c:    00 00             	nop
  10a23e:    00 00             	nop
  10a240:    00 00             	nop
  10a242:    00 00             	nop
  10a244:    00 00             	nop
  10a246:    00 00             	nop
  10a248:    00 00             	nop
  10a24a:    00 00             	nop
  10a24c:    03 80              <unknown instruction>
  10a24e:    03 80              <unknown instruction>
  10a250:    03 80              <unknown instruction>
  10a252:    03 80              <unknown instruction>
  10a254:    04 c0              <unknown instruction>
  10a256:    04 c0              <unknown instruction>
  10a258:    04 c0              <unknown instruction>
  10a25a:    04 c0              <unknown instruction>
  10a25c:    0c 40             	r4 = b[r0+0] (u)
  10a25e:    08 60             	r0 = h[r0+0] (u)
  10a260:    08 60             	r0 = h[r0+0] (u)
  10a262:    08 60             	r0 = h[r0+0] (u)
  10a264:    18 20              <unknown instruction>
  10a266:    1f f0 10 30       	r15.h = 12304  #
  10a26a:    10 30             		 r0 = -16
  10a26c:    10 30             	r0 = -16
  10a26e:    20 18             	r0 += r2
  10a270:    20 18             	r0 += r2
  10a272:    20 18             	r0 += r2
  10a274:    60 1c             	r0 = r6 + r0
  10a276:    f8 3e             	r0 += -2
  10a278:    00 00             	nop
  10a27a:    00 00             	nop
  10a27c:    00 00             	nop
  10a27e:    00 00             	nop
  10a280:    00 00             	nop
  10a282:    00 00             	nop
  10a284:    00 00             	nop
  10a286:    00 00             	nop
  10a288:    00 00             	nop
  10a28a:    00 00             	nop
  10a28c:    7f e0              <unknown instruction>
  10a28e:    18 38              <unknown instruction>
  10a290:    18 18             	r8 += r1
  10a292:    18 0c             	h[r1++=r8] = r0
  10a294:    18 0c             	h[r1++=r8] = r0
  10a296:    18 0c             	h[r1++=r8] = r0
  10a298:    18 0c             	h[r1++=r8] = r0
  10a29a:    18 0c             	h[r1++=r8] = r0
  10a29c:    18 18             	r8 += r1
  10a29e:    18 30              <unknown instruction>
  10a2a0:    1f e0 18 18       	r15.h = 6168
  10a2a4:    18 0c             	h[r1++=r8] = r0
  10a2a6:    18 04              <unknown instruction>
  10a2a8:    18 06             	r0 = h[r1++=-2] (u)
  10a2aa:    18 06             	r0 = h[r1++=-2] (u)
  10a2ac:    18 06             	r0 = h[r1++=-2] (u)
  10a2ae:    18 06             	r0 = h[r1++=-2] (u)
  10a2b0:    18 06             	r0 = h[r1++=-2] (u)
  10a2b2:    18 0c             	h[r1++=r8] = r0
  10a2b4:    18 18             	r8 += r1
  10a2b6:    7f f0              <unknown instruction>
  10a2b8:    00 00             	nop
  10a2ba:    00 00             	nop
  10a2bc:    00 00             	nop
  10a2be:    00 00             	nop
  10a2c0:    00 00             	nop
  10a2c2:    00 00             	nop
  10a2c4:    00 00             	nop
  10a2c6:    00 00             	nop
  10a2c8:    00 00             	nop
  10a2ca:    00 00             	nop
  10a2cc:    03 e0 06 1c       	r3.l = 7174
  10a2d0:    08 0c             	h[r0++=r8] = r0
  10a2d2:    18 06             	r0 = h[r1++=-2] (u)
  10a2d4:    30 02             	flushinv [r0]
  10a2d6:    30 02             	flushinv [r0]
  10a2d8:    30 00              <unknown instruction>
  10a2da:    60 00             	cli
  10a2dc:    60 00             	cli
  10a2de:    60 00             	cli
  10a2e0:    60 00             	cli
  10a2e2:    60 00             	cli
  10a2e4:    60 00             	cli
  10a2e6:    60 00             	cli
  10a2e8:    60 00             	cli
  10a2ea:    60 00             	cli
  10a2ec:    30 02             	flushinv [r0]
  10a2ee:    30 02             	flushinv [r0]
  10a2f0:    10 04             	[--sp] = rets
  10a2f2:    18 08             	[r1++=r8] = r0
  10a2f4:    0c 10             	b[r0++=r8] = r4
  10a2f6:    03 e0 00 00       	r3.l = 0
  10a2fa:    00 00             	nop
  10a2fc:    00 00             	nop
  10a2fe:    00 00             	nop
  10a300:    00 00             	nop
  10a302:    00 00             	nop
  10a304:    00 00             	nop
  10a306:    00 00             	nop
  10a308:    00 00             	nop
  10a30a:    00 00             	nop
  10a30c:    7f c0              <unknown instruction>
  10a30e:    18 70             	r0 = h[r1+-32] (u)
  10a310:    18 18             	r8 += r1
  10a312:    18 08             	[r1++=r8] = r0
  10a314:    18 0c             	h[r1++=r8] = r0
  10a316:    18 0c             	h[r1++=r8] = r0
  10a318:    18 06             	r0 = h[r1++=-2] (u)
  10a31a:    18 06             	r0 = h[r1++=-2] (u)
  10a31c:    18 06             	r0 = h[r1++=-2] (u)
  10a31e:    18 06             	r0 = h[r1++=-2] (u)
  10a320:    18 06             	r0 = h[r1++=-2] (u)
  10a322:    18 06             	r0 = h[r1++=-2] (u)
  10a324:    18 06             	r0 = h[r1++=-2] (u)
  10a326:    18 06             	r0 = h[r1++=-2] (u)
  10a328:    18 06             	r0 = h[r1++=-2] (u)
  10a32a:    18 04              <unknown instruction>
  10a32c:    18 0c             	h[r1++=r8] = r0
  10a32e:    18 0c             	h[r1++=r8] = r0
  10a330:    18 18             	r8 += r1
  10a332:    18 18             	r8 += r1
  10a334:    18 60             	r0 = h[r1+0] (u)
  10a336:    7f c0              <unknown instruction>
  10a338:    00 00             	nop
  10a33a:    00 00             	nop
  10a33c:    00 00             	nop
  10a33e:    00 00             	nop
  10a340:    00 00             	nop
  10a342:    00 00             	nop
  10a344:    00 00             	nop
  10a346:    00 00             	nop
  10a348:    00 00             	nop
  10a34a:    00 00             	nop
  10a34c:    7f fc 18 0c       	if (r15 > 902) goto 48 <osd_str_matrix+0x400 : 10a380 >
  10a350:    18 04              <unknown instruction>
  10a352:    18 02             	iflush [r8]
  10a354:    18 02             	iflush [r8]
  10a356:    18 00              <unknown instruction>
  10a358:    18 00              <unknown instruction>
  10a35a:    18 10             	b[r1++=r8] = r0
  10a35c:    18 10             	b[r1++=r8] = r0
  10a35e:    18 30              <unknown instruction>
  10a360:    1f f0 18 30       	r15.h = 12312  #
  10a364:    18 10             		 b[r1++=r8] = r0
  10a366:    18 10             	b[r1++=r8] = r0
  10a368:    18 00              <unknown instruction>
  10a36a:    18 00              <unknown instruction>
  10a36c:    18 00              <unknown instruction>
  10a36e:    18 02             	iflush [r8]
  10a370:    18 02             	iflush [r8]
  10a372:    18 04              <unknown instruction>
  10a374:    18 0c             	h[r1++=r8] = r0
  10a376:    7f fc 00 00       	if (r15 > 896) goto 0 <osd_str_matrix+0x3FA : 10a37a >
  10a37a:    00 00             	nop
  10a37c:    00 00             	nop
  10a37e:    00 00             	nop
  10a380:    00 00             	nop
  10a382:    00 00             	nop
  10a384:    00 00             	nop
  10a386:    00 00             	nop
  10a388:    00 00             	nop
  10a38a:    00 00             	nop
  10a38c:    7f fc 18 1c       	if (r15 > 910) goto 48 <osd_str_matrix+0x440 : 10a3c0 >
  10a390:    18 04              <unknown instruction>
  10a392:    18 02             	iflush [r8]
  10a394:    18 02             	iflush [r8]
  10a396:    18 00              <unknown instruction>
  10a398:    18 00              <unknown instruction>
  10a39a:    18 10             	b[r1++=r8] = r0
  10a39c:    18 10             	b[r1++=r8] = r0
  10a39e:    18 30              <unknown instruction>
  10a3a0:    1f f0 18 30       	r15.h = 12312  #
  10a3a4:    18 10             		 b[r1++=r8] = r0
  10a3a6:    18 10             	b[r1++=r8] = r0
  10a3a8:    18 10             	b[r1++=r8] = r0
  10a3aa:    18 00              <unknown instruction>
  10a3ac:    18 00              <unknown instruction>
  10a3ae:    18 00              <unknown instruction>
  10a3b0:    18 00              <unknown instruction>
  10a3b2:    18 00              <unknown instruction>
  10a3b4:    18 00              <unknown instruction>
  10a3b6:    7e 00              <unknown instruction>
  10a3b8:    00 00             	nop
  10a3ba:    00 00             	nop
  10a3bc:    00 00             	nop
  10a3be:    00 00             	nop
  10a3c0:    00 00             	nop
  10a3c2:    00 00             	nop
  10a3c4:    00 00             	nop
  10a3c6:    00 00             	nop
  10a3c8:    00 00             	nop
  10a3ca:    00 00             	nop
  10a3cc:    7c 3e             	r4 = 254
  10a3ce:    18 08             	[r1++=r8] = r0
  10a3d0:    18 10             	b[r1++=r8] = r0
  10a3d2:    0c 10             	b[r0++=r8] = r4
  10a3d4:    0c 20             	r12 = [sp]
  10a3d6:    06 20             	r6 = [sp]
  10a3d8:    06 40             	if (r6 == 0) goto 0 <osd_str_matrix+0x45A : 10a3da >
  10a3da:    03 40             	if (r3 == 0) goto 0 <osd_str_matrix+0x45C : 10a3dc >
  10a3dc:    03 80              <unknown instruction>
  10a3de:    01 80             	call 0 <osd_str_matrix+0x460 : 10a3e0 >
  10a3e0:    01 80             	call 0 <osd_str_matrix+0x462 : 10a3e2 >
  10a3e2:    01 80             	call 0 <osd_str_matrix+0x464 : 10a3e4 >
  10a3e4:    01 c0              <unknown instruction>
  10a3e6:    02 c0              <unknown instruction>
  10a3e8:    02 60             	r2 = [r0+0] 
  10a3ea:    04 60             	r4 = [r0+0] 
  10a3ec:    04 70             	r4 = [r0+-64] 
  10a3ee:    08 30             	r8 = [sp+64]
  10a3f0:    08 30             	r8 = [sp+64]
  10a3f2:    18 18             	r8 += r1
  10a3f4:    10 1c             	r0 = r1 + r0
  10a3f6:    7c 3e             	r4 = 254
  10a3f8:    00 00             	nop
  10a3fa:    00 00             	nop
  10a3fc:    00 00             	nop
  10a3fe:    00 00             	nop
  10a400:    00 00             	nop
  10a402:    00 00             	nop
  10a404:    00 00             	nop
  10a406:    00 00             	nop
  10a408:    00 00             	nop
  10a40a:    00 00             	nop
  10a40c:    38 10             	b[r3++=r8] = r0
  10a40e:    6c 10             	b[r6++=r8] = r4
  10a410:    44 20             	r4 = 0
  10a412:    c6 20             	r6 += 0
  10a414:    c6 40             	if (r6 != 0) goto -256 <osd_str_matrix+0x396 : 10a316 >
  10a416:    c6 40             	if (r6 != 0) goto -256 <osd_str_matrix+0x398 : 10a318 >
  10a418:    c6 40             	if (r6 != 0) goto -256 <osd_str_matrix+0x39A : 10a31a >
  10a41a:    c6 80             	goto -1280 <text_matrix+0x128 : 109f1c >
  10a41c:    c6 80             	goto -1280 <text_matrix+0x12A : 109f1e >
  10a41e:    44 80             	goto 256 <osd_str_matrix+0x5A0 : 10a520 >
  10a420:    6d 38             	r5 = 184
  10a422:    39 6c             	r1 = h[r3+24] (u)
  10a424:    02 44             	if (r2 == 0) goto 8 <osd_str_matrix+0x4AE : 10a42e >
  10a426:    02 c6              <unknown instruction>
  10a428:    02 c6              <unknown instruction>
  10a42a:    04 c6              <unknown instruction>
  10a42c:    04 c6              <unknown instruction>
  10a42e:    08 c6              <unknown instruction>
  10a430:    08 c6              <unknown instruction>
  10a432:    08 44             	r0 = b[r0+4] (u)
  10a434:    10 6c             	r0 = [r1+48] 
  10a436:    10 38             	r0 = -8
  10a438:    00 00             	nop
  10a43a:    00 00             	nop
  10a43c:    00 00             	nop
  10a43e:    00 00             	nop
  10a440:    00 00             	nop
  10a442:    00 00             	nop
  10a444:    00 00             	nop
  10a446:    00 00             	nop
  10a448:    00 00             	nop
  10a44a:    84 00              <unknown instruction>
  10a44c:    00 03             	rep 2 r0 {
  10a44e:    c6 00             		call r6
                               	}
  10a450:    00 0f             	r0 = h[r0++=r14] (u)
  10a452:    c6 00             	call r6
  10a454:    00 f8 06 00       	if (r0 == 0) goto 12 <osd_str_matrix+0x4E4 : 10a464 >
  10a458:    1f 10             	b[r1++=r8] = r7
  10a45a:    06 00              <unknown instruction>
  10a45c:    00 10             	r0 = b[r0++=r8] (u)
  10a45e:    06 00              <unknown instruction>
  10a460:    00 10             	r0 = b[r0++=r8] (u)
  10a462:    06 00              <unknown instruction>
  10a464:    00 10             	r0 = b[r0++=r8] (u)
  10a466:    06 00              <unknown instruction>
  10a468:    00 10             	r0 = b[r0++=r8] (u)
  10a46a:    06 00              <unknown instruction>
  10a46c:    00 10             	r0 = b[r0++=r8] (u)
  10a46e:    06 00              <unknown instruction>
  10a470:    00 10             	r0 = b[r0++=r8] (u)
  10a472:    06 00              <unknown instruction>
  10a474:    00 10             	r0 = b[r0++=r8] (u)
  10a476:    06 18             	r6 += r0
  10a478:    3f ff              <unknown instruction>
  10a47a:    ff fc 00 10       	if (r15 <= 904) goto 0 <osd_str_matrix+0x4FE : 10a47e >
  10a47e:    06 00              <unknown instruction>
  10a480:    00 10             	r0 = b[r0++=r8] (u)
  10a482:    06 00              <unknown instruction>
  10a484:    00 30             	r0 = [sp+64]
  10a486:    06 00              <unknown instruction>
  10a488:    00 30             	r0 = [sp+64]
  10a48a:    06 00              <unknown instruction>
  10a48c:    00 30             	r0 = [sp+64]
  10a48e:    06 00              <unknown instruction>
  10a490:    00 30             	r0 = [sp+64]
  10a492:    06 00              <unknown instruction>
  10a494:    00 20             	r0 = [sp]
  10a496:    06 00              <unknown instruction>
  10a498:    00 60             	r0 = [r0+0] 
  10a49a:    06 00              <unknown instruction>
  10a49c:    00 60             	r0 = [r0+0] 
  10a49e:    06 00              <unknown instruction>
  10a4a0:    00 c0              <unknown instruction>
  10a4a2:    06 00              <unknown instruction>
  10a4a4:    00 80             	rep 2 1 {
  10a4a6:    06 00              <unknown instruction>
  10a4a8:    01 80             		call 0
                               	} <osd_str_matrix+0x52A : 10a4aa >
  10a4aa:    06 00              <unknown instruction>
  10a4ac:    03 00             	hbkpt
  10a4ae:    06 00              <unknown instruction>
  10a4b0:    04 00              <unknown instruction>
  10a4b2:    06 00              <unknown instruction>
  10a4b4:    18 00              <unknown instruction>
  10a4b6:    06 00              <unknown instruction>
  10a4b8:    20 00             	csync
  10a4ba:    04 00              <unknown instruction>
  10a4bc:    00 00             	nop
  10a4be:    00 00             	nop
  10a4c0:    00 00             	nop
  10a4c2:    00 00             	nop
  10a4c4:    00 00             	nop
  10a4c6:    00 00             	nop
  10a4c8:    00 80             	rep 2 1 {
  10a4ca:    00 00             		nop
                               	}
  10a4cc:    01 e0 00 00       	r1.l = 0
  10a4d0:    01 80             	call 0 <osd_str_matrix+0x552 : 10a4d2 >
  10a4d2:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0x554 : 10a4d4 >
  10a4d4:    01 87             	call 14 <osd_str_matrix+0x564 : 10a4e4 >
  10a4d6:    ff e0 03 00       	r15 = r0 - 0x3
  10a4da:    40 e0 02 00       	r0 = 2 <moveable_slot_size+0x2 : 2 >
  10a4de:    40 c0              <unknown instruction>
  10a4e0:    06 08             	r6 = [r0++=r8] 
  10a4e2:    41 80             	call -256 <osd_str_matrix+0x464 : 10a3e4 >
  10a4e4:    04 1c             	r4 = r0 + r0
  10a4e6:    41 80             	call -256 <osd_str_matrix+0x468 : 10a3e8 >
  10a4e8:    08 18             	r8 += r0
  10a4ea:    c3 00             	call r3
  10a4ec:    10 30             	r0 = -16
  10a4ee:    c3 00             	call r3
  10a4f0:    3f e0              <unknown instruction>
  10a4f2:    c6 10             	r6 = b[r4++=r9] (u)
  10a4f4:    3c 40             	r4 = b[r3+0] (u)
  10a4f6:    cf f8 00 c0       	if (r15 != -416) goto 0 <osd_str_matrix+0x57A : 10a4fa >
  10a4fa:    c4 30             	r4 += 16
  10a4fc:    01 80             	call 0 <osd_str_matrix+0x57E : 10a4fe >
  10a4fe:    e0 20             	r0 += -128
  10a500:    03 00             	hbkpt
  10a502:    e0 60             	[r6+0] = r0
  10a504:    02 00             	bkpt
  10a506:    a0 60             	[r2+0] = r0
  10a508:    04 00              <unknown instruction>
  10a50a:    90 40             	if (r0 != 0) goto 64 <osd_str_matrix+0x5CC : 10a54c >
  10a50c:    08 79             	r0 = h[r0+-14] (u)
  10a50e:    90 c0              <unknown instruction>
  10a510:    3f 81             	r7 = r3 + 1
  10a512:    98 c0              <unknown instruction>
  10a514:    1c 01             	tbh [r12]
  10a516:    09 80             	r1 = r0 + 0
  10a518:    10 03             	rep 4 r0 {
  10a51a:    0d 80             		r5 = r0 + 0
  10a51c:    00 03             		rep 2 r0
                               	} {
  10a51e:    07 00              <unknown instruction>
  10a520:    00 32             		r0 = [sp+72]
                               	}
  10a522:    07 00              <unknown instruction>
  10a524:    01 c4              <unknown instruction>
  10a526:    0f 80             	r7 = r0 + 0
  10a528:    1f 0c             	h[r1++=r8] = r7
  10a52a:    19 c0              <unknown instruction>
  10a52c:    3c 18             	r12 += r3
  10a52e:    30 e0              <unknown instruction>
  10a530:    10 20             	r0 = -32
  10a532:    60 7c             	r0 = [r6+-16] 
  10a534:    00 41             	if (r0 == 0) goto 2 <osd_str_matrix+0x5B8 : 10a538 >
  10a536:    80 30             	[sp+64] = r0
  10a538:    00 86             	rep 2 7 {
  10a53a:    00 00             		nop
                               	}
  10a53c:    00 00             	nop
  10a53e:    00 00             	nop
  10a540:    00 00             	nop
  10a542:    00 00             	nop
  10a544:    00 00             	nop
  10a546:    00 00             	nop
  10a548:    00 01             	tbb [r0]
  10a54a:    00 00             	nop
  10a54c:    00 01             	tbb [r0]
  10a54e:    80 00             	rts
  10a550:    00 01             	tbb [r0]
  10a552:    80 00             	rts
  10a554:    00 01             	tbb [r0]
  10a556:    80 00             	rts
  10a558:    00 01             	tbb [r0]
  10a55a:    80 00             	rts
  10a55c:    00 01             	tbb [r0]
  10a55e:    80 00             	rts
  10a560:    08 01             	tbb [r8]
  10a562:    80 20             	[sp] = r0
  10a564:    0f ff ff f0 0c 01 	if (r15 ?? 255) goto 536 <osd_str_matrix+0x802 : 10a782 >
  10a56a:    80 20             	[sp] = r0
  10a56c:    0c 01             	tbb [r12]
  10a56e:    80 20             	[sp] = r0
  10a570:    0c 01             	tbb [r12]
  10a572:    80 20             	[sp] = r0
  10a574:    0c 01             	tbb [r12]
  10a576:    80 20             	[sp] = r0
  10a578:    0c 01             	tbb [r12]
  10a57a:    80 20             	[sp] = r0
  10a57c:    0c 01             	tbb [r12]
  10a57e:    80 20             	[sp] = r0
  10a580:    0c 01             	tbb [r12]
  10a582:    80 20             	[sp] = r0
  10a584:    0c 01             	tbb [r12]
  10a586:    80 20             	[sp] = r0
  10a588:    0f ff ff e0 0c 01 	if (r14 ?? 255) goto 536 <osd_str_matrix+0x826 : 10a7a6 >
  10a58e:    80 20             	[sp] = r0
  10a590:    0c 01             	tbb [r12]
  10a592:    80 30             	[sp+64] = r0
  10a594:    00 01             	tbb [r0]
  10a596:    80 00             	rts
  10a598:    00 01             	tbb [r0]
  10a59a:    80 00             	rts
  10a59c:    00 01             	tbb [r0]
  10a59e:    80 00             	rts
  10a5a0:    00 01             	tbb [r0]
  10a5a2:    80 00             	rts
  10a5a4:    00 01             	tbb [r0]
  10a5a6:    80 00             	rts
  10a5a8:    00 01             	tbb [r0]
  10a5aa:    80 00             	rts
  10a5ac:    00 01             	tbb [r0]
  10a5ae:    80 00             	rts
  10a5b0:    00 01             	tbb [r0]
  10a5b2:    80 00             	rts
  10a5b4:    00 01             	tbb [r0]
  10a5b6:    80 00             	rts
  10a5b8:    00 01             	tbb [r0]
  10a5ba:    00 00             	nop
  10a5bc:    00 00             	nop
  10a5be:    00 00             	nop
  10a5c0:    00 00             	nop
  10a5c2:    00 00             	nop
  10a5c4:    00 00             	nop
  10a5c6:    00 00             	nop
  10a5c8:    00 02             	pfetch [r0]
  10a5ca:    00 00             	nop
  10a5cc:    00 03             	rep 2 r0 {
  10a5ce:    00 00             		nop
                               	}
  10a5d0:    00 01             	tbb [r0]
  10a5d2:    80 00             	rts
  10a5d4:    00 01             	tbb [r0]
  10a5d6:    80 00             	rts
  10a5d8:    04 00              <unknown instruction>
  10a5da:    80 10             	r0 = b[r0++=r9] (u)
  10a5dc:    07 ff ff f8 0c 00 	if (r15 ?? -1793) goto 24 <osd_str_matrix+0x67A : 10a5fa >
  10a5e2:    00 38             	r0 = [sp+96]
  10a5e4:    0c 00              <unknown instruction>
  10a5e6:    00 20             	r0 = [sp]
  10a5e8:    1c 00              <unknown instruction>
  10a5ea:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0x66C : 10a5ec >
  10a5ec:    00 00             	nop
  10a5ee:    06 00              <unknown instruction>
  10a5f0:    03 ff ff 00 00 00 	if (r0 < 255) goto 0 <osd_str_matrix+0x676 : 10a5f6 >
  10a5f6:    00 00             	nop
  10a5f8:    00 00             	nop
  10a5fa:    00 00             	nop
  10a5fc:    00 00             	nop
  10a5fe:    00 00             	nop
  10a600:    00 00             	nop
  10a602:    00 60             	r0 = [r0+0] 
  10a604:    1f ff              <unknown instruction>
  10a606:    ff f0 00 18       	r15 = r1 - 0x800000  #
  10a60a:    60 00             		 cli
  10a60c:    00 18             	r0 += r0
  10a60e:    60 00             	cli
  10a610:    00 18             	r0 += r0
  10a612:    60 00             	cli
  10a614:    00 10             	r0 = b[r0++=r8] (u)
  10a616:    60 00             	cli
  10a618:    00 30             	r0 = [sp+64]
  10a61a:    60 08             	r0 = [r6++=r8] 
  10a61c:    00 30             	r0 = [sp+64]
  10a61e:    60 08             	r0 = [r6++=r8] 
  10a620:    00 30             	r0 = [sp+64]
  10a622:    60 08             	r0 = [r6++=r8] 
  10a624:    00 60             	r0 = [r0+0] 
  10a626:    60 08             	r0 = [r6++=r8] 
  10a628:    00 c0              <unknown instruction>
  10a62a:    60 08             	r0 = [r6++=r8] 
  10a62c:    01 80             	call 0 <osd_str_matrix+0x6AE : 10a62e >
  10a62e:    20 08             	r0 = [r2++=r8] 
  10a630:    03 00             	hbkpt
  10a632:    3f fc 0c 00       	if (r15 > 384) goto 24 <osd_str_matrix+0x6CE : 10a64e >
  10a636:    1f f8 70 00       	if (r15 == 128) goto 224 <osd_str_matrix+0x79A : 10a71a >
  10a63a:    00 00             	nop
  10a63c:    00 00             	nop
  10a63e:    00 00             	nop
  10a640:    00 00             	nop
  10a642:    00 00             	nop
  10a644:    00 00             	nop
  10a646:    00 00             	nop
  10a648:    02 00             	bkpt
  10a64a:    00 00             	nop
  10a64c:    03 00             	hbkpt
  10a64e:    60 00             	cli
  10a650:    03 00             	hbkpt
  10a652:    60 00             	cli
  10a654:    03 00             	hbkpt
  10a656:    60 60             	r0 = [r6+0] 
  10a658:    03 00             	hbkpt
  10a65a:    60 f0 03 04       	r0 = 0x83000000  #
  10a65e:    63 80              <unknown instruction>
  10a660:    03 fe 6e 00       		 ifs (r3 > 0) goto 220 <osd_str_matrix+0x7C0 : 10a740 >
  10a664:    03 00             	hbkpt
  10a666:    70 00              <unknown instruction>
  10a668:    03 00             	hbkpt
  10a66a:    60 00             	cli
  10a66c:    03 00             	hbkpt
  10a66e:    60 10             	r0 = b[r6++=r8] (u)
  10a670:    03 00             	hbkpt
  10a672:    60 10             	r0 = b[r6++=r8] (u)
  10a674:    03 02             	pfetch [r3]
  10a676:    60 10             	r0 = b[r6++=r8] (u)
  10a678:    03 1c             	r3 = r0 + r0
  10a67a:    60 10             	r0 = b[r6++=r8] (u)
  10a67c:    03 e0 7f f8       	r3.l = 63615
  10a680:    07 80             	goto -1024 <osd_str_matrix+0x302 : 10a282 >
  10a682:    7f f0              <unknown instruction>
  10a684:    03 01             	tbb [r3]
  10a686:    80 00             	rts
  10a688:    00 01             	tbb [r0]
  10a68a:    80 00             	rts
  10a68c:    00 01             	tbb [r0]
  10a68e:    80 10             	r0 = b[r0++=r9] (u)
  10a690:    00 01             	tbb [r0]
  10a692:    80 38             	[sp+96] = r0
  10a694:    3f ff              <unknown instruction>
  10a696:    ff fc 00 01       	if (r15 <= 896) goto -512 <osd_str_matrix+0x51A : 10a49a >
  10a69a:    80 00             	rts
  10a69c:    00 01             	tbb [r0]
  10a69e:    80 00             	rts
  10a6a0:    00 01             	tbb [r0]
  10a6a2:    80 00             	rts
  10a6a4:    00 01             	tbb [r0]
  10a6a6:    80 00             	rts
  10a6a8:    00 01             	tbb [r0]
  10a6aa:    80 00             	rts
  10a6ac:    00 01             	tbb [r0]
  10a6ae:    80 00             	rts
  10a6b0:    00 01             	tbb [r0]
  10a6b2:    80 00             	rts
  10a6b4:    00 01             	tbb [r0]
  10a6b6:    80 00             	rts
  10a6b8:    00 01             	tbb [r0]
  10a6ba:    00 00             	nop
  10a6bc:    00 00             	nop
  10a6be:    00 00             	nop
  10a6c0:    00 00             	nop
  10a6c2:    00 00             	nop
  10a6c4:    00 00             	nop
  10a6c6:    00 00             	nop
  10a6c8:    00 01             	tbb [r0]
  10a6ca:    02 00             	bkpt
  10a6cc:    04 01             	tbb [r4]
  10a6ce:    c3 80              <unknown instruction>
  10a6d0:    06 01             	tbb [r6]
  10a6d2:    83 00             	rte
  10a6d4:    03 01             	tbb [r3]
  10a6d6:    83 00             	rte
  10a6d8:    01 81             	call 2 <osd_str_matrix+0x75C : 10a6dc >
  10a6da:    83 00             	rte
  10a6dc:    01 01             	tbb [r1]
  10a6de:    83 30             	[sp+64] = r3
  10a6e0:    00 3f             	r0 = [sp+124]
  10a6e2:    ff f8 00 01       	if (r15 != -128) goto -512 <osd_str_matrix+0x566 : 10a4e6 >
  10a6e6:    83 00             	rte
  10a6e8:    00 01             	tbb [r0]
  10a6ea:    83 00             	rte
  10a6ec:    00 01             	tbb [r0]
  10a6ee:    83 00             	rte
  10a6f0:    01 01             	tbb [r1]
  10a6f2:    83 00             	rte
  10a6f4:    7f 81             	r7 = r7 + 1
  10a6f6:    83 00             	rte
  10a6f8:    03 01             	tbb [r3]
  10a6fa:    83 00             	rte
  10a6fc:    03 01             	tbb [r3]
  10a6fe:    83 18             	r3 += r8
  10a700:    03 3f             	r3 = [sp+124]
  10a702:    ff fc 03 01       	if (r15 <= 896) goto -506 <osd_str_matrix+0x58C : 10a50c >
  10a706:    83 00             	rte
  10a708:    03 01             	tbb [r3]
  10a70a:    83 00             	rte
  10a70c:    03 01             	tbb [r3]
  10a70e:    83 00             	rte
  10a710:    03 01             	tbb [r3]
  10a712:    03 00             	hbkpt
  10a714:    03 03             	rep 2 r3 {
  10a716:    03 00             		hbkpt
                               	}
  10a718:    03 02             	pfetch [r3]
  10a71a:    03 00             	hbkpt
  10a71c:    03 04              <unknown instruction>
  10a71e:    03 00             	hbkpt
  10a720:    03 08             	r3 = [r0++=r8] 
  10a722:    03 00             	hbkpt
  10a724:    04 90             	goto 32 <osd_str_matrix+0x7C6 : 10a746 >
  10a726:    03 00             	hbkpt
  10a728:    18 60             	r0 = h[r1+0] (u)
  10a72a:    02 00             	bkpt
  10a72c:    30 38             	r0 |= 16777216
  10a72e:    00 02             	pfetch [r0]
  10a730:    30 0f             	r0 = h[r3++=r14] (u)
  10a732:    ff fc 00 01       	if (r15 <= 896) goto -512 <osd_str_matrix+0x5B6 : 10a536 >
  10a736:    ff f0 00 00       	r15 = r0 - 0x0  #
  10a73a:    00 00             		 nop
  10a73c:    00 00             	nop
  10a73e:    00 00             	nop
  10a740:    00 00             	nop
  10a742:    00 00             	nop
  10a744:    00 00             	nop
  10a746:    00 00             	nop
  10a748:    00 01             	tbb [r0]
  10a74a:    00 00             	nop
  10a74c:    00 00             	nop
  10a74e:    c0 00             	call r0
  10a750:    00 00             	nop
  10a752:    e0 10             	r0 = b[r6++=r9] (u)
  10a754:    04 00              <unknown instruction>
  10a756:    40 38             	r0 = 24
  10a758:    07 ff ff fc 06 04 	if (r15 ?? -769) goto 2060 <osd_str_matrix+0xFEA : 10af6a >
  10a75e:    04 00              <unknown instruction>
  10a760:    06 07             	r6 = b[r0++=1] (u)
  10a762:    07 00              <unknown instruction>
  10a764:    06 06             	r6 = h[r0++=2] (u)
  10a766:    06 00              <unknown instruction>
  10a768:    06 06             	r6 = h[r0++=2] (u)
  10a76a:    06 30             	r6 = [sp+64]
  10a76c:    07 ff ff f8 06 06 	if (r15 ?? -1793) goto 3084 <osd_str_matrix+0x13FE : 10b37e >
  10a772:    06 00              <unknown instruction>
  10a774:    06 06             	r6 = h[r0++=2] (u)
  10a776:    06 00              <unknown instruction>
  10a778:    06 06             	r6 = h[r0++=2] (u)
  10a77a:    06 00              <unknown instruction>
  10a77c:    06 06             	r6 = h[r0++=2] (u)
  10a77e:    06 00              <unknown instruction>
  10a780:    06 07             	r6 = b[r0++=1] (u)
  10a782:    fe 00             	sti r14
  10a784:    06 06             	r6 = h[r0++=2] (u)
  10a786:    06 00              <unknown instruction>
  10a788:    04 00              <unknown instruction>
  10a78a:    01 00             	idle
  10a78c:    04 3f             	r4 = [sp+124]
  10a78e:    ff 80              <unknown instruction>
  10a790:    0c 04              <unknown instruction>
  10a792:    03 80              <unknown instruction>
  10a794:    0c 02             	pfetch [r12]
  10a796:    07 00              <unknown instruction>
  10a798:    0c 03             	rep 2 r12 {
  10a79a:    06 00              <unknown instruction>
  10a79c:    08 01             		tbb [r8]
                               	}
  10a79e:    0c 00              <unknown instruction>
  10a7a0:    08 00              <unknown instruction>
  10a7a2:    d8 00             	goto r8
  10a7a4:    18 00              <unknown instruction>
  10a7a6:    70 00              <unknown instruction>
  10a7a8:    10 00              <unknown instruction>
  10a7aa:    f8 00             	sti r8
  10a7ac:    10 03             	rep 4 r0 {
  10a7ae:    9e 00              <unknown instruction>
  10a7b0:    20 0e             		r0 = h[r2++=r12] (u)
  10a7b2:    07 f8 20 70       		if (r7 == 56) goto 64
                               	} <osd_str_matrix+0x876 : 10a7f6 >
  10a7b6:    00 f8 47 80       	if (r0 == 64) goto 142 <osd_str_matrix+0x8C8 : 10a848 >
  10a7ba:    00 10             	r0 = b[r0++=r8] (u)
  10a7bc:    00 00             	nop
  10a7be:    00 00             	nop
  10a7c0:    00 00             	nop
  10a7c2:    00 00             	nop
  10a7c4:    00 00             	nop
  10a7c6:    00 00             	nop
  10a7c8:    01 00             	idle
  10a7ca:    00 00             	nop
  10a7cc:    01 80             	call 0 <osd_str_matrix+0x84E : 10a7ce >
  10a7ce:    00 00             	nop
  10a7d0:    01 81             	call 2 <osd_str_matrix+0x854 : 10a7d4 >
  10a7d2:    01 00             	idle
  10a7d4:    01 81             	call 2 <osd_str_matrix+0x858 : 10a7d8 >
  10a7d6:    ff c0              <unknown instruction>
  10a7d8:    01 81             	call 2 <osd_str_matrix+0x85C : 10a7dc >
  10a7da:    81 80              <unknown instruction>
  10a7dc:    01 81             	call 2 <osd_str_matrix+0x860 : 10a7e0 >
  10a7de:    81 80              <unknown instruction>
  10a7e0:    01 81             	call 2 <osd_str_matrix+0x864 : 10a7e4 >
  10a7e2:    81 80              <unknown instruction>
  10a7e4:    01 91             	call 34 <osd_str_matrix+0x888 : 10a808 >
  10a7e6:    81 80              <unknown instruction>
  10a7e8:    3f f9 81 80       	if (r15 >= 448) goto 258 <osd_str_matrix+0x96E : 10a8ee >
  10a7ec:    01 81             	call 2 <osd_str_matrix+0x870 : 10a7f0 >
  10a7ee:    81 80              <unknown instruction>
  10a7f0:    03 81              <unknown instruction>
  10a7f2:    81 80              <unknown instruction>
  10a7f4:    03 81              <unknown instruction>
  10a7f6:    81 80              <unknown instruction>
  10a7f8:    03 81              <unknown instruction>
  10a7fa:    81 80              <unknown instruction>
  10a7fc:    03 f1 81 80       	r3 = r8 + 129  #
  10a800:    07 99             		 goto -974 <osd_str_matrix+0x4B4 : 10a434 >
  10a802:    81 80              <unknown instruction>
  10a804:    05 99             	goto 1074 <osd_str_matrix+0xCB8 : 10ac38 >
  10a806:    81 80              <unknown instruction>
  10a808:    0d 89             	r5 = r0 + 9
  10a80a:    81 80              <unknown instruction>
  10a80c:    09 81             	r1 = r0 + 1
  10a80e:    81 80              <unknown instruction>
  10a810:    09 81             	r1 = r0 + 1
  10a812:    81 80              <unknown instruction>
  10a814:    11 81             	call 66 <osd_str_matrix+0x8D8 : 10a858 >
  10a816:    01 80             	call 0 <osd_str_matrix+0x898 : 10a818 >
  10a818:    11 83             	call 70 <osd_str_matrix+0x8E0 : 10a860 >
  10a81a:    01 80             	call 0 <osd_str_matrix+0x89C : 10a81c >
  10a81c:    21 83             	call 134 <osd_str_matrix+0x924 : 10a8a4 >
  10a81e:    01 88             	call 16 <osd_str_matrix+0x8B0 : 10a830 >
  10a820:    41 82             	call -252 <osd_str_matrix+0x7A6 : 10a726 >
  10a822:    01 88             	call 16 <osd_str_matrix+0x8B4 : 10a834 >
  10a824:    01 86             	call 12 <osd_str_matrix+0x8B2 : 10a832 >
  10a826:    01 88             	call 16 <osd_str_matrix+0x8B8 : 10a838 >
  10a828:    01 84             	call 8 <osd_str_matrix+0x8B2 : 10a832 >
  10a82a:    01 8c             	call 24 <osd_str_matrix+0x8C4 : 10a844 >
  10a82c:    01 88             	call 16 <osd_str_matrix+0x8BE : 10a83e >
  10a82e:    01 fe 01 90       	ifs (r1 > 72) goto 2 <osd_str_matrix+0x8B4 : 10a834 >
  10a832:    01 fc 01 a0       	if (r1 > 80) goto 2 <osd_str_matrix+0x8B8 : 10a838 >
  10a836:    00 00             	nop
  10a838:    01 00             	idle
  10a83a:    00 00             	nop
  10a83c:    00 00             	nop
  10a83e:    00 00             	nop
  10a840:    00 00             	nop
  10a842:    00 00             	nop
  10a844:    00 00             	nop
  10a846:    00 00             	nop
  10a848:    00 00             	nop
  10a84a:    00 00             	nop
  10a84c:    00 04             	pc = [sp++]
  10a84e:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0x8D0 : 10a850 >
  10a850:    03 fe 3f e0       	ifs (r3 > 112) goto 126 <osd_str_matrix+0x952 : 10a8d2 >
  10a854:    02 0c             	r2 = h[r0++=r8] (u)
  10a856:    30 c0              <unknown instruction>
  10a858:    02 0c             	r2 = h[r0++=r8] (u)
  10a85a:    30 c0              <unknown instruction>
  10a85c:    02 0c             	r2 = h[r0++=r8] (u)
  10a85e:    30 c0              <unknown instruction>
  10a860:    02 0c             	r2 = h[r0++=r8] (u)
  10a862:    30 c0              <unknown instruction>
  10a864:    03 fc 3f c0       	if (r3 > 96) goto 126 <osd_str_matrix+0x966 : 10a8e6 >
  10a868:    02 0c             	r2 = h[r0++=r8] (u)
  10a86a:    30 c0              <unknown instruction>
  10a86c:    02 03             	rep 2 r2 {
  10a86e:    0c 00              <unknown instruction>
  10a870:    00 03             		rep 2 r0
                               	} {
  10a872:    07 10             		r7 = b[r0++=r8] (u)
                               	}
  10a874:    00 06             	r0 = h[r0++=2] (u)
  10a876:    03 38             	r3 = [sp+96]
  10a878:    3f ff              <unknown instruction>
  10a87a:    ff fc 00 0c       	if (r15 <= 902) goto 0 <osd_str_matrix+0x8FE : 10a87e >
  10a87e:    20 00             	csync
  10a880:    00 18             	r0 += r0
  10a882:    18 00              <unknown instruction>
  10a884:    00 30             	r0 = [sp+64]
  10a886:    0c 00              <unknown instruction>
  10a888:    00 60             	r0 = [r0+0] 
  10a88a:    07 00              <unknown instruction>
  10a88c:    01 c0              <unknown instruction>
  10a88e:    03 e0 07 04       	r3.l = 1031
  10a892:    00 fc 1b fe       	if (r0 > 127) goto 54 <osd_str_matrix+0x94C : 10a8cc >
  10a896:    7f f8 63 04       	if (r15 == -126) goto 198 <osd_str_matrix+0x9E0 : 10a960 >
  10a89a:    60 c0              <unknown instruction>
  10a89c:    03 04              <unknown instruction>
  10a89e:    60 c0              <unknown instruction>
  10a8a0:    03 04              <unknown instruction>
  10a8a2:    60 c0              <unknown instruction>
  10a8a4:    03 04              <unknown instruction>
  10a8a6:    60 c0              <unknown instruction>
  10a8a8:    03 04              <unknown instruction>
  10a8aa:    60 c0              <unknown instruction>
  10a8ac:    03 fc 7f c0       	if (r3 > 96) goto 254 <osd_str_matrix+0xA2E : 10a9ae >
  10a8b0:    03 04              <unknown instruction>
  10a8b2:    60 c0              <unknown instruction>
  10a8b4:    02 00             	bkpt
  10a8b6:    60 80             	rep 14 1 {
  10a8b8:    00 00             		nop
  10a8ba:    00 00             		nop
  10a8bc:    00 00             		nop
  10a8be:    00 00             		nop
  10a8c0:    00 00             		nop
  10a8c2:    00 00             		nop
  10a8c4:    00 00             		nop
                               	}
  10a8c6:    00 00             	nop
  10a8c8:    00 00             	nop
  10a8ca:    00 00             	nop
  10a8cc:    00 04             	pc = [sp++]
  10a8ce:    20 00             	csync
  10a8d0:    0f fe 3f f0       	ifs (r15 > 120) goto 126 <osd_str_matrix+0x9D2 : 10a952 >
  10a8d4:    0c 0c             	h[r0++=r8] = r4
  10a8d6:    30 30             	r0 |= 65536
  10a8d8:    0c 0c             	h[r0++=r8] = r4
  10a8da:    30 30             	r0 |= 65536
  10a8dc:    0c 0c             	h[r0++=r8] = r4
  10a8de:    30 30             	r0 |= 65536
  10a8e0:    0c 0c             	h[r0++=r8] = r4
  10a8e2:    30 30             	r0 |= 65536
  10a8e4:    0f fc 30 30       	if (r15 > 24) goto 96 <osd_str_matrix+0x9C8 : 10a948 >
  10a8e8:    0c 0c             	h[r0++=r8] = r4
  10a8ea:    30 30             	r0 |= 65536
  10a8ec:    0c 0c             	h[r0++=r8] = r4
  10a8ee:    30 30             	r0 |= 65536
  10a8f0:    0c 0c             	h[r0++=r8] = r4
  10a8f2:    30 30             	r0 |= 65536
  10a8f4:    0c 0c             	h[r0++=r8] = r4
  10a8f6:    30 30             	r0 |= 65536
  10a8f8:    0c 0c             	h[r0++=r8] = r4
  10a8fa:    30 30             	r0 |= 65536
  10a8fc:    0f fc 30 30       	if (r15 > 24) goto 96 <osd_str_matrix+0x9E0 : 10a960 >
  10a900:    0c 0c             	h[r0++=r8] = r4
  10a902:    30 30             	r0 |= 65536
  10a904:    0c 08             	[r0++=r8] = r4
  10a906:    30 30             	r0 |= 65536
  10a908:    0c 40             	r4 = b[r0+0] (u)
  10a90a:    30 30             	r0 |= 65536
  10a90c:    0c 20             	r12 = [sp]
  10a90e:    30 30             	r0 |= 65536
  10a910:    0c 18             	r12 += r0
  10a912:    30 30             	r0 |= 65536
  10a914:    0c 0c             	h[r0++=r8] = r4
  10a916:    30 30             	r0 |= 65536
  10a918:    0c 0e             	h[r0++=r12] = r4
  10a91a:    33 e0              <unknown instruction>
  10a91c:    0c 3f             	r12 = [sp+124]
  10a91e:    30 e0              <unknown instruction>
  10a920:    0d c3              <unknown instruction>
  10a922:    30 00              <unknown instruction>
  10a924:    0f 02             	pfetch [r15]
  10a926:    30 00              <unknown instruction>
  10a928:    0c 00              <unknown instruction>
  10a92a:    30 00              <unknown instruction>
  10a92c:    00 00             	nop
  10a92e:    30 00              <unknown instruction>
  10a930:    00 00             	nop
  10a932:    30 00              <unknown instruction>
  10a934:    00 00             	nop
  10a936:    30 00              <unknown instruction>
  10a938:    00 00             	nop
  10a93a:    20 00             	csync
  10a93c:    00 00             	nop
  10a93e:    00 00             	nop
  10a940:    00 00             	nop
  10a942:    00 00             	nop
  10a944:    00 00             	nop
  10a946:    00 00             	nop
  10a948:    00 00             	nop
  10a94a:    20 00             	csync
  10a94c:    00 c0              <unknown instruction>
  10a94e:    70 00              <unknown instruction>
  10a950:    00 c0              <unknown instruction>
  10a952:    60 00             	cli
  10a954:    00 c0              <unknown instruction>
  10a956:    c0 20             	r0 += 0
  10a958:    00 c1              <unknown instruction>
  10a95a:    ff f0 00 c1       	r15 = r12 - 0x0  #
  10a95e:    00 60             		 r0 = [r0+0] 
  10a960:    30 c3              <unknown instruction>
  10a962:    00 e0 18 c6       	r0.l = 50712
  10a966:    80 c0              <unknown instruction>
  10a968:    1c c4              <unknown instruction>
  10a96a:    c1 80              <unknown instruction>
  10a96c:    0c c8              <unknown instruction>
  10a96e:    63 00              <unknown instruction>
  10a970:    0c d0              <unknown instruction>
  10a972:    46 00              <unknown instruction>
  10a974:    0c c0              <unknown instruction>
  10a976:    18 00              <unknown instruction>
  10a978:    00 c0              <unknown instruction>
  10a97a:    31 80             	call 192 <osd_str_matrix+0xABC : 10aa3c >
  10a97c:    00 c0              <unknown instruction>
  10a97e:    c1 c0              <unknown instruction>
  10a980:    00 c3              <unknown instruction>
  10a982:    01 80             	call 0 <osd_str_matrix+0xA04 : 10a984 >
  10a984:    01 cc              <unknown instruction>
  10a986:    01 80             	call 0 <osd_str_matrix+0xA08 : 10a988 >
  10a988:    02 c0              <unknown instruction>
  10a98a:    01 98             	call 48 <osd_str_matrix+0xA3C : 10a9bc >
  10a98c:    06 ff ff fc 0c c0 	if (r15 ?? -769) goto -32744 <EX_RAM_SIZE+0x9F9AA : 1029aa >
  10a992:    01 80             	call 0 <osd_str_matrix+0xA14 : 10a994 >
  10a994:    18 c1              <unknown instruction>
  10a996:    01 80             	call 0 <osd_str_matrix+0xA18 : 10a998 >
  10a998:    70 c1              <unknown instruction>
  10a99a:    81 80              <unknown instruction>
  10a99c:    20 c0              <unknown instruction>
  10a99e:    c1 80              <unknown instruction>
  10a9a0:    00 c0              <unknown instruction>
  10a9a2:    c1 80              <unknown instruction>
  10a9a4:    00 c0              <unknown instruction>
  10a9a6:    c1 80              <unknown instruction>
  10a9a8:    00 c0              <unknown instruction>
  10a9aa:    01 80             	call 0 <osd_str_matrix+0xA2C : 10a9ac >
  10a9ac:    00 c0              <unknown instruction>
  10a9ae:    01 80             	call 0 <osd_str_matrix+0xA30 : 10a9b0 >
  10a9b0:    00 c0              <unknown instruction>
  10a9b2:    3f 80             	r7 = r3 + 0
  10a9b4:    00 c0              <unknown instruction>
  10a9b6:    07 80             	goto -1024 <osd_str_matrix+0x638 : 10a5b8 >
  10a9b8:    00 80             	rep 2 1 {
  10a9ba:    03 00             		hbkpt
                               	}
  10a9bc:    00 00             	nop
  10a9be:    00 00             	nop
  10a9c0:    00 00             	nop
  10a9c2:    00 00             	nop
  10a9c4:    00 00             	nop
  10a9c6:    00 00             	nop
  10a9c8:    00 00             	nop
  10a9ca:    03 00             	hbkpt
  10a9cc:    00 00             	nop
  10a9ce:    1f 80             	r7 = r1 + 0
  10a9d0:    00 1f             	r0 = r0 - r4
  10a9d2:    f8 00             	sti r8
  10a9d4:    03 e1 80 00       	r3 = r0 + 128
  10a9d8:    00 01             	tbb [r0]
  10a9da:    80 00             	rts
  10a9dc:    00 01             	tbb [r0]
  10a9de:    80 30             	[sp+64] = r0
  10a9e0:    1f ff              <unknown instruction>
  10a9e2:    ff f8 00 01       	if (r15 != -128) goto -512 <osd_str_matrix+0x866 : 10a7e6 >
  10a9e6:    80 00             	rts
  10a9e8:    00 01             	tbb [r0]
  10a9ea:    81 00             	rti
  10a9ec:    01 ff ff c0 01 81 	if (r12 != 255) goto -65022 <EX_RAM_SIZE+0x97BF4 : fabf4 >
  10a9f2:    81 80              <unknown instruction>
  10a9f4:    01 81             	call 2 <osd_str_matrix+0xA78 : 10a9f8 >
  10a9f6:    81 80              <unknown instruction>
  10a9f8:    01 81             	call 2 <osd_str_matrix+0xA7C : 10a9fc >
  10a9fa:    81 80              <unknown instruction>
  10a9fc:    01 ff ff 80 01 81 	if (r8 != 255) goto -65022 <EX_RAM_SIZE+0x97C04 : fac04 >
  10aa02:    81 80              <unknown instruction>
  10aa04:    01 81             	call 2 <osd_str_matrix+0xA88 : 10aa08 >
  10aa06:    81 80              <unknown instruction>
  10aa08:    01 81             	call 2 <osd_str_matrix+0xA8C : 10aa0c >
  10aa0a:    81 80              <unknown instruction>
  10aa0c:    01 ff ff 80 01 81 	if (r8 != 255) goto -65022 <EX_RAM_SIZE+0x97C14 : fac14 >
  10aa12:    81 80              <unknown instruction>
  10aa14:    00 01             	tbb [r0]
  10aa16:    80 00             	rts
  10aa18:    00 01             	tbb [r0]
  10aa1a:    80 00             	rts
  10aa1c:    00 01             	tbb [r0]
  10aa1e:    80 c0              <unknown instruction>
  10aa20:    07 ff ff e0 00 01 	if (r14 ?? 255) goto 512 <osd_str_matrix+0xCA6 : 10ac26 >
  10aa26:    80 00             	rts
  10aa28:    00 01             	tbb [r0]
  10aa2a:    80 00             	rts
  10aa2c:    00 01             	tbb [r0]
  10aa2e:    80 18             	r0 += r8
  10aa30:    3f ff              <unknown instruction>
  10aa32:    ff fc 00 00       	if (r15 <= 896) goto 0 <osd_str_matrix+0xAB6 : 10aa36 >
  10aa36:    00 00             	nop
  10aa38:    00 00             	nop
  10aa3a:    00 00             	nop
  10aa3c:    00 00             	nop
  10aa3e:    00 00             	nop
  10aa40:    00 00             	nop
  10aa42:    00 00             	nop
  10aa44:    00 00             	nop
  10aa46:    00 00             	nop
  10aa48:    00 03             	rep 2 r0 {
  10aa4a:    00 00             		nop
                               	}
  10aa4c:    00 01             	tbb [r0]
  10aa4e:    80 00             	rts
  10aa50:    00 00             	nop
  10aa52:    c0 00             	call r0
  10aa54:    00 00             	nop
  10aa56:    c0 00             	call r0
  10aa58:    01 00             	idle
  10aa5a:    80 40             	if (r0 != 0) goto 0 <osd_str_matrix+0xADC : 10aa5c >
  10aa5c:    01 ff ff e0 01 80 	if (r14 != 255) goto -65534 <EX_RAM_SIZE+0x97A64 : faa64 >
  10aa62:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0xAE4 : 10aa64 >
  10aa64:    01 80             	call 0 <osd_str_matrix+0xAE6 : 10aa66 >
  10aa66:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0xAE8 : 10aa68 >
  10aa68:    01 80             	call 0 <osd_str_matrix+0xAEA : 10aa6a >
  10aa6a:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0xAEC : 10aa6c >
  10aa6c:    01 80             	call 0 <osd_str_matrix+0xAEE : 10aa6e >
  10aa6e:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0xAF0 : 10aa70 >
  10aa70:    01 80             	call 0 <osd_str_matrix+0xAF2 : 10aa72 >
  10aa72:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0xAF4 : 10aa74 >
  10aa74:    01 ff ff c0 01 80 	if (r12 != 255) goto -65534 <EX_RAM_SIZE+0x97A7C : faa7c >
  10aa7a:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0xAFC : 10aa7c >
  10aa7c:    01 80             	call 0 <osd_str_matrix+0xAFE : 10aa7e >
  10aa7e:    00 00             	nop
  10aa80:    01 80             	call 0 <osd_str_matrix+0xB02 : 10aa82 >
  10aa82:    00 00             	nop
  10aa84:    01 90             	call 32 <osd_str_matrix+0xB26 : 10aaa6 >
  10aa86:    00 00             	nop
  10aa88:    01 1f             	r1 = r0 - r4
  10aa8a:    ff e0 03 18       	r15 = r1 - 0x830000
  10aa8e:    00 c0              <unknown instruction>
  10aa90:    03 18             	r3 += r0
  10aa92:    00 c0              <unknown instruction>
  10aa94:    03 18             	r3 += r0
  10aa96:    00 c0              <unknown instruction>
  10aa98:    03 18             	r3 += r0
  10aa9a:    00 c0              <unknown instruction>
  10aa9c:    02 18             	r2 += r0
  10aa9e:    00 c0              <unknown instruction>
  10aaa0:    06 18             	r6 += r0
  10aaa2:    00 c0              <unknown instruction>
  10aaa4:    06 18             	r6 += r0
  10aaa6:    00 c0              <unknown instruction>
  10aaa8:    04 18             	r4 += r0
  10aaaa:    00 c0              <unknown instruction>
  10aaac:    08 1f             	r0 = r0 - r5
  10aaae:    ff c0              <unknown instruction>
  10aab0:    18 18             	r8 += r1
  10aab2:    00 c0              <unknown instruction>
  10aab4:    10 18             	r0 += r1
  10aab6:    00 c0              <unknown instruction>
  10aab8:    20 00             	csync
  10aaba:    00 00             	nop
  10aabc:    00 00             	nop
  10aabe:    00 00             	nop
  10aac0:    00 00             	nop
  10aac2:    00 00             	nop
  10aac4:    00 00             	nop
  10aac6:    00 00             	nop
  10aac8:    00 00             	nop
  10aaca:    00 00             	nop
  10aacc:    00 00             	nop
  10aace:    00 00             	nop
  10aad0:    00 00             	nop
  10aad2:    00 00             	nop
  10aad4:    00 00             	nop
  10aad6:    00 00             	nop
  10aad8:    00 00             	nop
  10aada:    00 00             	nop
  10aadc:    00 00             	nop
  10aade:    00 00             	nop
  10aae0:    00 00             	nop
  10aae2:    00 00             	nop
  10aae4:    00 00             	nop
  10aae6:    00 00             	nop
  10aae8:    00 00             	nop
  10aaea:    00 00             	nop
  10aaec:    00 00             	nop
  10aaee:    00 00             	nop
  10aaf0:    00 00             	nop
  10aaf2:    00 00             	nop
  10aaf4:    00 00             	nop
  10aaf6:    00 00             	nop
  10aaf8:    00 00             	nop
  10aafa:    00 00             	nop
  10aafc:    00 00             	nop
  10aafe:    00 00             	nop
  10ab00:    00 00             	nop
  10ab02:    00 00             	nop
  10ab04:    00 00             	nop
  10ab06:    00 00             	nop
  10ab08:    00 00             	nop
  10ab0a:    00 00             	nop
  10ab0c:    00 00             	nop
  10ab0e:    00 00             	nop
  10ab10:    07 00              <unknown instruction>
  10ab12:    00 00             	nop
  10ab14:    0f 80             	r7 = r0 + 0
  10ab16:    00 00             	nop
  10ab18:    0f 80             	r7 = r0 + 0
  10ab1a:    00 00             	nop
  10ab1c:    07 80             	goto -1024 <osd_str_matrix+0x79E : 10a71e >
  10ab1e:    00 00             	nop
  10ab20:    01 80             	call 0 <osd_str_matrix+0xBA2 : 10ab22 >
  10ab22:    00 00             	nop
  10ab24:    03 00             	hbkpt
  10ab26:    00 00             	nop
  10ab28:    02 00             	bkpt
  10ab2a:    00 00             	nop
  10ab2c:    04 00              <unknown instruction>
  10ab2e:    00 00             	nop
  10ab30:    18 00              <unknown instruction>
  10ab32:    00 00             	nop
  10ab34:    00 00             	nop
  10ab36:    00 00             	nop
  10ab38:    00 00             	nop
  10ab3a:    00 00             	nop
  10ab3c:    00 00             	nop
  10ab3e:    00 00             	nop
  10ab40:    00 00             	nop
  10ab42:    00 00             	nop
  10ab44:    00 00             	nop
  10ab46:    00 00             	nop
  10ab48:    00 00             	nop
  10ab4a:    10 00              <unknown instruction>
  10ab4c:    08 00              <unknown instruction>
  10ab4e:    18 00              <unknown instruction>
  10ab50:    06 00              <unknown instruction>
  10ab52:    18 00              <unknown instruction>
  10ab54:    07 00              <unknown instruction>
  10ab56:    18 10             	b[r1++=r8] = r0
  10ab58:    03 1f             	r3 = r0 - r4
  10ab5a:    ff f8 03 00       	if (r15 != -128) goto 6 <osd_str_matrix+0xBE4 : 10ab64 >
  10ab5e:    18 00              <unknown instruction>
  10ab60:    00 00             	nop
  10ab62:    18 60             	r0 = h[r1+0] (u)
  10ab64:    00 07             	r0 = b[r0++=1] (u)
  10ab66:    ff f0 00 00       	r15 = r0 - 0x0  #
  10ab6a:    18 00              <unknown instruction>
  10ab6c:    02 00             		 bkpt
  10ab6e:    18 00              <unknown instruction>
  10ab70:    7f 00              <unknown instruction>
  10ab72:    18 18             	r8 += r1
  10ab74:    03 3f             	r3 = [sp+124]
  10ab76:    ff fc 03 00       	if (r15 <= 896) goto 6 <osd_str_matrix+0xC00 : 10ab80 >
  10ab7a:    00 00             	nop
  10ab7c:    03 00             	hbkpt
  10ab7e:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0xC00 : 10ab80 >
  10ab80:    03 03             	rep 2 r3 {
  10ab82:    ff e0 03 02       		r15 = r0 - 0x3000300
                               	}
  10ab86:    00 60             	r0 = [r0+0] 
  10ab88:    03 02             	pfetch [r3]
  10ab8a:    00 60             	r0 = [r0+0] 
  10ab8c:    03 02             	pfetch [r3]
  10ab8e:    00 60             	r0 = [r0+0] 
  10ab90:    03 03             	rep 2 r3 {
  10ab92:    ff e0 03 12       		r15 = r1 - 0x3000300
                               	}
  10ab96:    00 60             	r0 = [r0+0] 
  10ab98:    03 22             	r3 = [sp+8]
  10ab9a:    00 60             	r0 = [r0+0] 
  10ab9c:    03 43             	if (r3 == 0) goto 6 <osd_str_matrix+0xC24 : 10aba4 >
  10ab9e:    ff e0 03 c2       	r15 = r12 - 0x3000300
  10aba2:    00 60             	r0 = [r0+0] 
  10aba4:    03 82              <unknown instruction>
  10aba6:    00 60             	r0 = [r0+0] 
  10aba8:    07 02             	pfetch [r7]
  10abaa:    00 60             	r0 = [r0+0] 
  10abac:    03 02             	pfetch [r3]
  10abae:    00 60             	r0 = [r0+0] 
  10abb0:    00 02             	pfetch [r0]
  10abb2:    0f c0              <unknown instruction>
  10abb4:    00 02             	pfetch [r0]
  10abb6:    01 c0              <unknown instruction>
  10abb8:    00 02             	pfetch [r0]
  10abba:    00 80             	rep 2 1 {
  10abbc:    00 00             		nop
                               	}
  10abbe:    00 00             	nop
  10abc0:    00 00             	nop
  10abc2:    00 00             	nop
  10abc4:    00 00             	nop
  10abc6:    00 00             	nop
  10abc8:    00 00             	nop
  10abca:    00 10             	r0 = b[r0++=r8] (u)
  10abcc:    00 00             	nop
  10abce:    00 38             	r0 = [sp+96]
  10abd0:    3f ff              <unknown instruction>
  10abd2:    ff fc 00 00       	if (r15 <= 896) goto 0 <osd_str_matrix+0xC56 : 10abd6 >
  10abd6:    c0 00             	call r0
  10abd8:    00 01             	tbb [r0]
  10abda:    c0 00             	call r0
  10abdc:    00 01             	tbb [r0]
  10abde:    80 00             	rts
  10abe0:    00 03             	rep 2 r0 {
  10abe2:    80 00             		rts
                               	}
  10abe4:    00 03             	rep 2 r0 {
  10abe6:    00 00             		nop
                               	}
  10abe8:    00 07             	r0 = b[r0++=1] (u)
  10abea:    80 00             	rts
  10abec:    00 07             	r0 = b[r0++=1] (u)
  10abee:    c0 00             	call r0
  10abf0:    00 0d             	r0 = h[r0++=r10] (u)
  10abf2:    80 00             	rts
  10abf4:    00 1d             	r0 = r0 + r4
  10abf6:    8c 00              <unknown instruction>
  10abf8:    00 19             	r0 |= r0
  10abfa:    82 00             	rtx
  10abfc:    00 31             	r0 = [sp+68]
  10abfe:    81 80              <unknown instruction>
  10ac00:    00 61             	r0 = [r0+4] 
  10ac02:    80 c0              <unknown instruction>
  10ac04:    00 c1              <unknown instruction>
  10ac06:    80 60             	[r0+0] = r0
  10ac08:    01 81             	call 2 <osd_str_matrix+0xC8C : 10ac0c >
  10ac0a:    80 70             	[r0+-64] = r0
  10ac0c:    03 01             	tbb [r3]
  10ac0e:    80 38             	[sp+96] = r0
  10ac10:    06 01             	tbb [r6]
  10ac12:    80 18             	r0 += r8
  10ac14:    0c 01             	tbb [r12]
  10ac16:    80 18             	r0 += r8
  10ac18:    10 01             	tbh [r0]
  10ac1a:    80 08             	r0 = [r0++=r9] 
  10ac1c:    20 01              <unknown instruction>
  10ac1e:    80 00             	rts
  10ac20:    00 01             	tbb [r0]
  10ac22:    80 00             	rts
  10ac24:    00 01             	tbb [r0]
  10ac26:    80 00             	rts
  10ac28:    00 01             	tbb [r0]
  10ac2a:    80 00             	rts
  10ac2c:    00 01             	tbb [r0]
  10ac2e:    80 00             	rts
  10ac30:    00 01             	tbb [r0]
  10ac32:    80 00             	rts
  10ac34:    00 01             	tbb [r0]
  10ac36:    80 00             	rts
  10ac38:    00 01             	tbb [r0]
  10ac3a:    00 00             	nop
  10ac3c:    00 00             	nop
  10ac3e:    00 00             	nop
  10ac40:    00 00             	nop
  10ac42:    00 00             	nop
  10ac44:    00 00             	nop
  10ac46:    00 00             	nop
  10ac48:    00 00             	nop
  10ac4a:    00 10             	r0 = b[r0++=r8] (u)
  10ac4c:    00 00             	nop
  10ac4e:    00 30             	r0 = [sp+64]
  10ac50:    1f ff              <unknown instruction>
  10ac52:    ff f8 00 08       	if (r15 != -124) goto 0 <osd_str_matrix+0xCD6 : 10ac56 >
  10ac56:    30 00              <unknown instruction>
  10ac58:    00 08             	r0 = [r0++=r8] 
  10ac5a:    30 00              <unknown instruction>
  10ac5c:    00 08             	r0 = [r0++=r8] 
  10ac5e:    30 40             	if (r0 == 0) goto 192 <osd_str_matrix+0xDA0 : 10ad20 >
  10ac60:    03 ff ff e0 02 08 	if (r14 < 255) goto 4100 <imd_clock_init.div+0x2AA : 10bc6a >
  10ac66:    30 c0              <unknown instruction>
  10ac68:    02 08             	r2 = [r0++=r8] 
  10ac6a:    30 c0              <unknown instruction>
  10ac6c:    02 08             	r2 = [r0++=r8] 
  10ac6e:    30 c0              <unknown instruction>
  10ac70:    02 08             	r2 = [r0++=r8] 
  10ac72:    30 c0              <unknown instruction>
  10ac74:    02 08             	r2 = [r0++=r8] 
  10ac76:    30 c0              <unknown instruction>
  10ac78:    03 ff ff c0 02 08 	if (r12 < 255) goto 4100 <imd_clock_init.div+0x2C2 : 10bc82 >
  10ac7e:    00 c0              <unknown instruction>
  10ac80:    00 0e             	r0 = h[r0++=r12] (u)
  10ac82:    00 00             	nop
  10ac84:    00 0c             	r0 = h[r0++=r8] (u)
  10ac86:    00 00             	nop
  10ac88:    00 18             	r0 += r0
  10ac8a:    00 38             	r0 = [sp+96]
  10ac8c:    3f ff              <unknown instruction>
  10ac8e:    ff fc 00 30       	if (r15 <= 920) goto 0 <osd_str_matrix+0xD12 : 10ac92 >
  10ac92:    0c 00              <unknown instruction>
  10ac94:    00 30             	r0 = [sp+64]
  10ac96:    0c 00              <unknown instruction>
  10ac98:    00 60             	r0 = [r0+0] 
  10ac9a:    18 00              <unknown instruction>
  10ac9c:    00 c0              <unknown instruction>
  10ac9e:    30 00              <unknown instruction>
  10aca0:    00 3f             	r0 = [sp+124]
  10aca2:    70 00              <unknown instruction>
  10aca4:    00 01             	tbb [r0]
  10aca6:    f0 00             	sti r0
  10aca8:    00 01             	tbb [r0]
  10acaa:    ff 00             	sti r15
  10acac:    00 07             	r0 = b[r0++=1] (u)
  10acae:    07 c0              <unknown instruction>
  10acb0:    00 3c             	r0 = [sp+112]
  10acb2:    00 e0 03 e0       	r0.l = 57347
  10acb6:    00 70             	r0 = [r0+-64] 
  10acb8:    3c 00              <unknown instruction>
  10acba:    00 10             	r0 = b[r0++=r8] (u)
  10acbc:    00 00             	nop
  10acbe:    00 00             	nop
  10acc0:    00 00             	nop
  10acc2:    00 00             	nop
  10acc4:    00 00             	nop
  10acc6:    00 00             	nop
  10acc8:    00 10             	r0 = b[r0++=r8] (u)
  10acca:    00 10             	r0 = b[r0++=r8] (u)
  10accc:    18 18             	r8 += r1
  10acce:    00 30             	r0 = [sp+64]
  10acd0:    1c 10             	b[r1++=r8] = r4
  10acd2:    01 f8 18 11       	if (r1 == 8) goto -464 <osd_str_matrix+0xB86 : 10ab06 >
  10acd6:    1e 00              <unknown instruction>
  10acd8:    1a 11             	b[r1++=r10] = r2
  10acda:    90 00              <unknown instruction>
  10acdc:    19 93             	r1 = r1 + 19
  10acde:    10 00              <unknown instruction>
  10ace0:    18 92             	r0 = r1 + 18
  10ace2:    10 00              <unknown instruction>
  10ace4:    18 d2              <unknown instruction>
  10ace6:    10 00              <unknown instruction>
  10ace8:    18 94             	r0 = r1 + 20
  10acea:    10 00              <unknown instruction>
  10acec:    18 11             	b[r1++=r10] = r0
  10acee:    90 00              <unknown instruction>
  10acf0:    1f ff              <unknown instruction>
  10acf2:    d0 08             	r0 = [r5++=r9] 
  10acf4:    18 30              <unknown instruction>
  10acf6:    1f fc 18 78       	if (r15 > 188) goto 48 <osd_str_matrix+0xDAA : 10ad2a >
  10acfa:    10 60             	r0 = [r1+0] 
  10acfc:    18 74             	r0 = h[r1+-24] (u)
  10acfe:    10 60             	r0 = [r1+0] 
  10ad00:    18 52             	r0 = b[r1+-14] (u)
  10ad02:    10 60             	r0 = [r1+0] 
  10ad04:    18 d3              <unknown instruction>
  10ad06:    90 60             	[r1+0] = r0
  10ad08:    18 91             	r0 = r1 + 17
  10ad0a:    90 60             	[r1+0] = r0
  10ad0c:    18 91             	r0 = r1 + 17
  10ad0e:    90 60             	[r1+0] = r0
  10ad10:    19 10             	b[r1++=r8] = r1
  10ad12:    b0 60             	[r3+0] = r0
  10ad14:    1a 10             	b[r1++=r8] = r2
  10ad16:    30 60             	r0 = [r3+0] 
  10ad18:    1e 10             	b[r1++=r8] = r6
  10ad1a:    30 60             	r0 = [r3+0] 
  10ad1c:    18 10             	b[r1++=r8] = r0
  10ad1e:    30 60             	r0 = [r3+0] 
  10ad20:    18 10             	b[r1++=r8] = r0
  10ad22:    20 60             	r0 = [r2+0] 
  10ad24:    18 06             	r0 = h[r1++=-2] (u)
  10ad26:    60 60             	r0 = [r6+0] 
  10ad28:    3f ff              <unknown instruction>
  10ad2a:    40 60             	r0 = [r4+0] 
  10ad2c:    08 00              <unknown instruction>
  10ad2e:    80 60             	[r0+0] = r0
  10ad30:    00 01             	tbb [r0]
  10ad32:    00 60             	r0 = [r0+0] 
  10ad34:    00 02             	pfetch [r0]
  10ad36:    00 60             	r0 = [r0+0] 
  10ad38:    00 04             	pc = [sp++]
  10ad3a:    00 00             	nop
  10ad3c:    00 00             	nop
  10ad3e:    00 00             	nop
  10ad40:    00 00             	nop
  10ad42:    00 00             	nop
  10ad44:    00 00             	nop
  10ad46:    00 00             	nop
  10ad48:    00 02             	pfetch [r0]
  10ad4a:    00 00             	nop
  10ad4c:    00 03             	rep 2 r0 {
  10ad4e:    80 00             		rts
                               	}
  10ad50:    00 03             	rep 2 r0 {
  10ad52:    00 00             		nop
                               	}
  10ad54:    00 03             	rep 2 r0 {
  10ad56:    00 00             		nop
                               	}
  10ad58:    00 03             	rep 2 r0 {
  10ad5a:    00 00             		nop
                               	}
  10ad5c:    04 03             	rep 2 r4 {
  10ad5e:    00 80             		rep 2 1
                               	} {
  10ad60:    07 ff ff c0 06 03 		if (r12 ?? 255) goto 1548
                               	} <osd_str_matrix+0x13F2 : 10b372 >
  10ad66:    00 c0              <unknown instruction>
  10ad68:    06 03             	rep 2 r6 {
  10ad6a:    00 c0              <unknown instruction>
  10ad6c:    06 03             		rep 2 r6
                               	} {
  10ad6e:    00 c0              <unknown instruction>
  10ad70:    06 03             		rep 2 r6
                               	} {
  10ad72:    00 c0              <unknown instruction>
  10ad74:    06 03             		rep 2 r6
                               	} {
  10ad76:    00 c0              <unknown instruction>
  10ad78:    07 ff ff c0 06 03 		if (r12 ?? 255) goto 1548
                               	} <osd_str_matrix+0x140A : 10b38a >
  10ad7e:    00 c0              <unknown instruction>
  10ad80:    06 03             	rep 2 r6 {
  10ad82:    00 c0              <unknown instruction>
  10ad84:    06 03             		rep 2 r6
                               	} {
  10ad86:    00 c0              <unknown instruction>
  10ad88:    06 03             		rep 2 r6
                               	} {
  10ad8a:    00 c0              <unknown instruction>
  10ad8c:    06 03             		rep 2 r6
                               	} {
  10ad8e:    00 c0              <unknown instruction>
  10ad90:    06 03             		rep 2 r6
                               	} {
  10ad92:    00 c0              <unknown instruction>
  10ad94:    07 ff ff c0 06 03 		if (r12 ?? 255) goto 1548
                               	} <osd_str_matrix+0x1426 : 10b3a6 >
  10ad9a:    00 c0              <unknown instruction>
  10ad9c:    06 03             	rep 2 r6 {
  10ad9e:    00 08             		r0 = [r0++=r8] 
                               	}
  10ada0:    00 03             	rep 2 r0 {
  10ada2:    00 08             		r0 = [r0++=r8] 
                               	}
  10ada4:    00 03             	rep 2 r0 {
  10ada6:    00 08             		r0 = [r0++=r8] 
                               	}
  10ada8:    00 03             	rep 2 r0 {
  10adaa:    00 08             		r0 = [r0++=r8] 
                               	}
  10adac:    00 03             	rep 2 r0 {
  10adae:    00 18             		r0 += r0
                               	}
  10adb0:    00 03             	rep 2 r0 {
  10adb2:    ff fc 00 01       		if (r15 <= 896) goto -512
                               	} <osd_str_matrix+0xC36 : 10abb6 >
  10adb6:    ff f8 00 00       	if (r15 != -128) goto 0 <osd_str_matrix+0xE3A : 10adba >
  10adba:    00 00             	nop
  10adbc:    00 00             	nop
  10adbe:    00 00             	nop
  10adc0:    00 00             	nop
  10adc2:    00 00             	nop
  10adc4:    00 00             	nop
  10adc6:    00 00             	nop
  10adc8:    00 00             	nop
  10adca:    00 00             	nop
  10adcc:    03 c0              <unknown instruction>
  10adce:    03 c0              <unknown instruction>
  10add0:    03 c0              <unknown instruction>
  10add2:    03 c0              <unknown instruction>
  10add4:    03 c0              <unknown instruction>
  10add6:    03 c0              <unknown instruction>
  10add8:    01 c0              <unknown instruction>
  10adda:    01 80             	call 0 <osd_str_matrix+0xE5C : 10addc >
  10addc:    01 80             	call 0 <osd_str_matrix+0xE5E : 10adde >
  10adde:    01 80             	call 0 <osd_str_matrix+0xE60 : 10ade0 >
  10ade0:    01 80             	call 0 <osd_str_matrix+0xE62 : 10ade2 >
  10ade2:    01 80             	call 0 <osd_str_matrix+0xE64 : 10ade4 >
  10ade4:    01 80             	call 0 <osd_str_matrix+0xE66 : 10ade6 >
  10ade6:    01 80             	call 0 <osd_str_matrix+0xE68 : 10ade8 >
  10ade8:    01 80             	call 0 <osd_str_matrix+0xE6A : 10adea >
  10adea:    00 00             	nop
  10adec:    00 00             	nop
  10adee:    00 00             	nop
  10adf0:    01 80             	call 0 <osd_str_matrix+0xE72 : 10adf2 >
  10adf2:    03 c0              <unknown instruction>
  10adf4:    03 c0              <unknown instruction>
  10adf6:    01 80             	call 0 <osd_str_matrix+0xE78 : 10adf8 >
  10adf8:    00 00             	nop
  10adfa:    00 00             	nop
  10adfc:    00 00             	nop
  10adfe:    00 00             	nop
  10ae00:    00 00             	nop
  10ae02:    00 00             	nop
  10ae04:    00 00             	nop
  10ae06:    00 00             	nop
  10ae08:    00 00             	nop
  10ae0a:    00 00             	nop
  10ae0c:    00 00             	nop
  10ae0e:    00 00             	nop
  10ae10:    00 00             	nop
  10ae12:    00 00             	nop
  10ae14:    00 00             	nop
  10ae16:    00 00             	nop
  10ae18:    00 00             	nop
  10ae1a:    01 80             	call 0 <osd_str_matrix+0xE9C : 10ae1c >
  10ae1c:    03 c0              <unknown instruction>
  10ae1e:    03 c0              <unknown instruction>
  10ae20:    01 80             	call 0 <osd_str_matrix+0xEA2 : 10ae22 >
  10ae22:    00 00             	nop
  10ae24:    00 00             	nop
  10ae26:    00 00             	nop
  10ae28:    00 00             	nop
  10ae2a:    00 00             	nop
  10ae2c:    00 00             	nop
  10ae2e:    00 00             	nop
  10ae30:    01 80             	call 0 <osd_str_matrix+0xEB2 : 10ae32 >
  10ae32:    03 c0              <unknown instruction>
  10ae34:    03 c0              <unknown instruction>
  10ae36:    01 80             	call 0 <osd_str_matrix+0xEB8 : 10ae38 >
  10ae38:    00 00             	nop
  10ae3a:    00 00             	nop
  10ae3c:    00 00             	nop
  10ae3e:    00 00             	nop
  10ae40:    00 00             	nop
  10ae42:    00 00             	nop
  10ae44:    00 00             	nop
  10ae46:    00 00             	nop
  10ae48:    00 00             	nop
  10ae4a:    00 00             	nop
  10ae4c:    00 00             	nop
  10ae4e:    00 00             	nop
  10ae50:    00 00             	nop
  10ae52:    00 00             	nop
  10ae54:    00 00             	nop
  10ae56:    00 00             	nop
  10ae58:    00 00             	nop
  10ae5a:    00 00             	nop
  10ae5c:    00 00             	nop
  10ae5e:    00 00             	nop
  10ae60:    00 00             	nop
  10ae62:    00 00             	nop
  10ae64:    00 00             	nop
  10ae66:    00 00             	nop
  10ae68:    00 00             	nop
  10ae6a:    00 00             	nop
  10ae6c:    00 00             	nop
  10ae6e:    00 00             	nop
  10ae70:    18 00              <unknown instruction>
  10ae72:    3c 00              <unknown instruction>
  10ae74:    3c 00              <unknown instruction>
  10ae76:    18 00              <unknown instruction>
  10ae78:    00 00             	nop
  10ae7a:    00 00             	nop
  10ae7c:    00 00             	nop
  10ae7e:    00 00             	nop
  10ae80:    00 00             	nop
  10ae82:    00 00             	nop
  10ae84:    00 00             	nop
  10ae86:    00 00             	nop
  10ae88:    00 00             	nop
  10ae8a:    08 00              <unknown instruction>
  10ae8c:    01 c0              <unknown instruction>
  10ae8e:    0e 00              <unknown instruction>
  10ae90:    01 c0              <unknown instruction>
  10ae92:    1c 00              <unknown instruction>
  10ae94:    03 83              <unknown instruction>
  10ae96:    18 08             	[r1++=r8] = r0
  10ae98:    03 ff 9f fc 06 40 	if (r15 < 3231) goto 32780 <text_end+0x611E : 112eaa >
  10ae9e:    32 00             	ssync
  10aea0:    04 20             	r4 = [sp]
  10aea2:    21 80             	call 128 <osd_str_matrix+0xFA4 : 10af24 >
  10aea4:    0c 30             	r12 = [sp+64]
  10aea6:    41 80             	call -256 <osd_str_matrix+0xE28 : 10ada8 >
  10aea8:    18 30              <unknown instruction>
  10aeaa:    81 80              <unknown instruction>
  10aeac:    20 10             	r0 = b[r2++=r8] (u)
  10aeae:    c0 80             	rep 26 1 {
  10aeb0:    40 00             		lockclr
  10aeb2:    80 40             		if (r0 != 0) goto 0 <osd_str_matrix+0xF34 : 10aeb4 >
  10aeb4:    03 ff ff e0 00 00 		if (r14 < 255) goto 0 <osd_str_matrix+0xF3A : 10aeba >
  10aeba:    80 00             		rts
  10aebc:    00 00             		nop
  10aebe:    80 00             		rts
  10aec0:    00 00             		nop
  10aec2:    80 08             		r0 = [r0++=r9] 
  10aec4:    3f ff              <unknown instruction>
  10aec6:    ff fc 00 00       		if (r15 <= 896) goto 0 <osd_str_matrix+0xF4A : 10aeca >
  10aeca:    04 00              <unknown instruction>
  10aecc:    00 00             		nop
                               	}
  10aece:    07 00              <unknown instruction>
  10aed0:    00 00             	nop
  10aed2:    06 18             	r6 += r0
  10aed4:    0f ff ff fc 00 20 	if (r15 ?? -769) goto 16384 <text_end+0x214E : 10eeda >
  10aeda:    06 00              <unknown instruction>
  10aedc:    00 30             	r0 = [sp+64]
  10aede:    06 00              <unknown instruction>
  10aee0:    00 18             	r0 += r0
  10aee2:    06 00              <unknown instruction>
  10aee4:    00 0c             	r0 = h[r0++=r8] (u)
  10aee6:    06 00              <unknown instruction>
  10aee8:    00 0c             	r0 = h[r0++=r8] (u)
  10aeea:    06 00              <unknown instruction>
  10aeec:    00 0c             	r0 = h[r0++=r8] (u)
  10aeee:    06 00              <unknown instruction>
  10aef0:    00 00             	nop
  10aef2:    7e 00              <unknown instruction>
  10aef4:    00 00             	nop
  10aef6:    1e 00              <unknown instruction>
  10aef8:    00 00             	nop
  10aefa:    0c 00              <unknown instruction>
  10aefc:    00 00             	nop
  10aefe:    00 00             	nop
  10af00:    00 00             	nop
  10af02:    00 00             	nop
  10af04:    00 00             	nop
  10af06:    00 00             	nop
  10af08:    00 80             	rep 2 1 {
  10af0a:    30 00              <unknown instruction>
  10af0c:    00 e0 38 00       		r0.l = 56
                               	}
  10af10:    01 c0              <unknown instruction>
  10af12:    30 00              <unknown instruction>
  10af14:    01 80             	call 0 <osd_str_matrix+0xF96 : 10af16 >
  10af16:    30 00              <unknown instruction>
  10af18:    03 00             	hbkpt
  10af1a:    30 40             	if (r0 == 0) goto 192 <osd_str_matrix+0x105C : 10afdc >
  10af1c:    02 0f             	r2 = h[r0++=r14] (u)
  10af1e:    ff e0 06 00       	r15 = r0 - 0x6
  10af22:    30 00              <unknown instruction>
  10af24:    0c 60             	r4 = h[r0+0] (u)
  10af26:    30 00              <unknown instruction>
  10af28:    08 e0 30 00       	r8.l = 48
  10af2c:    10 c0              <unknown instruction>
  10af2e:    30 00              <unknown instruction>
  10af30:    21 80             	call 128 <osd_str_matrix+0x1032 : 10afb2 >
  10af32:    30 18             	r0 += r3
  10af34:    01 bf             	r1 = r0 << 31
  10af36:    ff fc 03 00       	if (r15 <= 896) goto 6 <osd_str_matrix+0xFC0 : 10af40 >
  10af3a:    02 00             	bkpt
  10af3c:    03 00             	hbkpt
  10af3e:    01 80             	call 0 <osd_str_matrix+0xFC0 : 10af40 >
  10af40:    05 00              <unknown instruction>
  10af42:    01 80             	call 0 <osd_str_matrix+0xFC4 : 10af44 >
  10af44:    09 00              <unknown instruction>
  10af46:    01 98             	call 48 <osd_str_matrix+0xFF8 : 10af78 >
  10af48:    11 1f             	r1 = r1 - r4
  10af4a:    ff fc 21 00       	if (r15 <= 896) goto 66 <osd_str_matrix+0x1010 : 10af90 >
  10af4e:    01 80             	call 0 <osd_str_matrix+0xFD0 : 10af50 >
  10af50:    01 02             	pfetch [r1]
  10af52:    01 80             	call 0 <osd_str_matrix+0xFD4 : 10af54 >
  10af54:    01 01             	tbb [r1]
  10af56:    81 80              <unknown instruction>
  10af58:    01 00             	idle
  10af5a:    c1 80              <unknown instruction>
  10af5c:    01 00             	idle
  10af5e:    c1 80              <unknown instruction>
  10af60:    01 00             	idle
  10af62:    41 80             	call -256 <osd_str_matrix+0xEE4 : 10ae64 >
  10af64:    01 00             	idle
  10af66:    01 80             	call 0 <osd_str_matrix+0xFE8 : 10af68 >
  10af68:    01 00             	idle
  10af6a:    01 80             	call 0 <osd_str_matrix+0xFEC : 10af6c >
  10af6c:    01 00             	idle
  10af6e:    01 80             	call 0 <osd_str_matrix+0xFF0 : 10af70 >
  10af70:    01 00             	idle
  10af72:    3f 80             	r7 = r3 + 0
  10af74:    01 00             	idle
  10af76:    07 00              <unknown instruction>
  10af78:    02 00             	bkpt
  10af7a:    02 00             	bkpt
  10af7c:    00 00             	nop
  10af7e:    00 00             	nop
  10af80:    00 00             	nop
  10af82:    00 00             	nop
  10af84:    00 00             	nop
  10af86:    00 00             	nop
  10af88:    00 00             	nop
  10af8a:    20 00             	csync
  10af8c:    00 00             	nop
  10af8e:    30 00              <unknown instruction>
  10af90:    0c 00              <unknown instruction>
  10af92:    60 00             	cli
  10af94:    06 00              <unknown instruction>
  10af96:    60 00             	cli
  10af98:    07 00              <unknown instruction>
  10af9a:    c0 30             	r0 += 16
  10af9c:    03 3f             	r3 = [sp+124]
  10af9e:    ff f8 02 00       	if (r15 != -128) goto 4 <osd_str_matrix+0x1026 : 10afa6 >
  10afa2:    c0 00             	call r0
  10afa4:    00 01             	tbb [r0]
  10afa6:    80 00             	rts
  10afa8:    00 01             	tbb [r0]
  10afaa:    80 00             	rts
  10afac:    00 03             	rep 2 r0 {
  10afae:    1c 00              <unknown instruction>
  10afb0:    01 03             		rep 2 r1
                               	} {
  10afb2:    18 00              <unknown instruction>
  10afb4:    3f 86             		r7 = r3 + 6
                               	}
  10afb6:    18 00              <unknown instruction>
  10afb8:    03 0e             	r3 = h[r0++=r12] (u)
  10afba:    18 40             	r0 = b[r1+0] (u)
  10afbc:    03 1f             	r3 = r0 - r4
  10afbe:    ff e0 03 0c       	r15 = r0 - 0x8300
  10afc2:    18 00              <unknown instruction>
  10afc4:    03 00             	hbkpt
  10afc6:    18 00              <unknown instruction>
  10afc8:    03 00             	hbkpt
  10afca:    18 00              <unknown instruction>
  10afcc:    03 00             	hbkpt
  10afce:    18 18             	r8 += r1
  10afd0:    03 3f             	r3 = [sp+124]
  10afd2:    ff fc 03 00       	if (r15 <= 896) goto 6 <osd_str_matrix+0x105C : 10afdc >
  10afd6:    18 00              <unknown instruction>
  10afd8:    03 00             	hbkpt
  10afda:    18 00              <unknown instruction>
  10afdc:    03 00             	hbkpt
  10afde:    18 00              <unknown instruction>
  10afe0:    03 00             	hbkpt
  10afe2:    18 00              <unknown instruction>
  10afe4:    0c c0              <unknown instruction>
  10afe6:    18 00              <unknown instruction>
  10afe8:    18 60             	r0 = h[r1+0] (u)
  10afea:    18 00              <unknown instruction>
  10afec:    30 1e             	r0 = r3 - r0
  10afee:    00 06             	r0 = h[r0++=2] (u)
  10aff0:    10 0f             	r0 = h[r1++=r14] (u)
  10aff2:    ff f8 00 00       	if (r15 != -128) goto 0 <osd_str_matrix+0x1076 : 10aff6 >
  10aff6:    ff f0 00 00       	r15 = r0 - 0x0  #
  10affa:    00 00             		 nop
  10affc:    00 00             	nop
  10affe:    00 00             	nop
  10b000:    00 00             	nop
  10b002:    00 00             	nop
  10b004:    00 00             	nop
  10b006:    00 00             	nop
  10b008:    01 00             	idle
  10b00a:    00 00             	nop
  10b00c:    01 80             	call 0 <osd_str_matrix+0x108E : 10b00e >
  10b00e:    30 00              <unknown instruction>
  10b010:    01 00             	idle
  10b012:    18 00              <unknown instruction>
  10b014:    01 00             	idle
  10b016:    08 00              <unknown instruction>
  10b018:    01 00             	idle
  10b01a:    08 30             	r8 = [sp+64]
  10b01c:    01 07             	r1 = b[r0++=1] (u)
  10b01e:    ff f8 01 11       	if (r15 != -120) goto -510 <osd_str_matrix+0xEA4 : 10ae24 >
  10b022:    01 80             	call 0 <osd_str_matrix+0x10A4 : 10b024 >
  10b024:    3f f8 81 80       	if (r15 == 448) goto 258 <osd_str_matrix+0x11AA : 10b12a >
  10b028:    01 00             	idle
  10b02a:    c3 00             	call r3
  10b02c:    01 00             	idle
  10b02e:    62 00              <unknown instruction>
  10b030:    01 00             	idle
  10b032:    42 18             	r2 += r4
  10b034:    01 1f             	r1 = r0 - r4
  10b036:    ff fc 01 00       	if (r15 <= 896) goto 2 <osd_str_matrix+0x10BC : 10b03c >
  10b03a:    20 00             	csync
  10b03c:    01 20             	r1 = [sp]
  10b03e:    38 00              <unknown instruction>
  10b040:    01 c0              <unknown instruction>
  10b042:    70 00              <unknown instruction>
  10b044:    07 00              <unknown instruction>
  10b046:    60 00             	cli
  10b048:    3d 00              <unknown instruction>
  10b04a:    60 08             	r0 = [r6++=r8] 
  10b04c:    39 3f             	r1 ^= 2147483648
  10b04e:    ff fc 21 00       	if (r15 <= 896) goto 66 <osd_str_matrix+0x1114 : 10b094 >
  10b052:    c1 80              <unknown instruction>
  10b054:    01 01             	tbb [r1]
  10b056:    81 80              <unknown instruction>
  10b058:    01 01             	tbb [r1]
  10b05a:    03 00             	hbkpt
  10b05c:    01 03             	rep 2 r1 {
  10b05e:    03 00             		hbkpt
                               	}
  10b060:    01 01             	tbb [r1]
  10b062:    e6 00             	cli r6
  10b064:    01 00             	idle
  10b066:    1e 00              <unknown instruction>
  10b068:    01 00             	idle
  10b06a:    1b 80             	r3 = r1 + 0
  10b06c:    01 00             	idle
  10b06e:    30 e0              <unknown instruction>
  10b070:    1f 00              <unknown instruction>
  10b072:    c0 78             	[r4+-32] = r0
  10b074:    07 07             	r7 = b[r0++=1] (u)
  10b076:    00 18             	r0 += r0
  10b078:    00 78             	r0 = [r0+-32] 
  10b07a:    00 08             	r0 = [r0++=r8] 
  10b07c:    00 00             	nop
  10b07e:    00 00             	nop
  10b080:    00 00             	nop
  10b082:    00 00             	nop
  10b084:    00 00             	nop
  10b086:    00 00             	nop
  10b088:    00 01             	tbb [r0]
  10b08a:    00 00             	nop
  10b08c:    00 01             	tbb [r0]
  10b08e:    c0 00             	call r0
  10b090:    00 81             	rep 2 2 {
  10b092:    81 00             		rti
                               	}
  10b094:    00 c1              <unknown instruction>
  10b096:    83 80              <unknown instruction>
  10b098:    00 61             	r0 = [r0+4] 
  10b09a:    83 00             	rte
  10b09c:    00 71             	r0 = [r0+-60] 
  10b09e:    86 00              <unknown instruction>
  10b0a0:    00 31             	r0 = [sp+68]
  10b0a2:    8c 00              <unknown instruction>
  10b0a4:    04 21             	r4 = [sp+4]
  10b0a6:    88 08             	[r0++=r9] = r0
  10b0a8:    07 ff ff fc 0c 00 	if (r15 ?? -769) goto 24 <osd_str_matrix+0x1146 : 10b0c6 >
  10b0ae:    00 18             	r0 += r0
  10b0b0:    1c 00              <unknown instruction>
  10b0b2:    00 30             	r0 = [sp+64]
  10b0b4:    38 00              <unknown instruction>
  10b0b6:    00 20             	r0 = [sp]
  10b0b8:    10 00              <unknown instruction>
  10b0ba:    03 00             	hbkpt
  10b0bc:    01 ff ff 80 00 00 	if (r8 != 255) goto 0 <osd_str_matrix+0x1142 : 10b0c2 >
  10b0c2:    00 00             	nop
  10b0c4:    00 00             	nop
  10b0c6:    00 00             	nop
  10b0c8:    00 00             	nop
  10b0ca:    00 20             	r0 = [sp]
  10b0cc:    00 00             	nop
  10b0ce:    00 70             	r0 = [r0+-64] 
  10b0d0:    1f ff              <unknown instruction>
  10b0d2:    ff f8 00 04       	if (r15 != -126) goto 0 <osd_str_matrix+0x1156 : 10b0d6 >
  10b0d6:    00 00             	nop
  10b0d8:    00 0f             	r0 = h[r0++=r14] (u)
  10b0da:    00 00             	nop
  10b0dc:    00 1c             	r0 = r0 + r0
  10b0de:    00 00             	nop
  10b0e0:    00 18             	r0 += r0
  10b0e2:    08 00              <unknown instruction>
  10b0e4:    00 20             	r0 = [sp]
  10b0e6:    06 00              <unknown instruction>
  10b0e8:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0x116A : 10b0ea >
  10b0ea:    03 00             	hbkpt
  10b0ec:    01 80             	call 0 <osd_str_matrix+0x116E : 10b0ee >
  10b0ee:    01 80             	call 0 <osd_str_matrix+0x1170 : 10b0f0 >
  10b0f0:    03 ff ff c0 01 f0 	if (r12 < 255) goto -8190 <imd_spi_isr+0xB2 : 1090f8 >
  10b0f6:    00 c0              <unknown instruction>
  10b0f8:    01 00             	idle
  10b0fa:    00 80             	rep 2 1 {
  10b0fc:    00 00             		nop
                               	}
  10b0fe:    00 00             	nop
  10b100:    00 00             	nop
  10b102:    00 00             	nop
  10b104:    00 00             	nop
  10b106:    00 00             	nop
  10b108:    00 00             	nop
  10b10a:    04 00              <unknown instruction>
  10b10c:    00 00             	nop
  10b10e:    07 c0              <unknown instruction>
  10b110:    0c 00              <unknown instruction>
  10b112:    06 70             	r6 = [r0+-64] 
  10b114:    06 00              <unknown instruction>
  10b116:    06 30             	r6 = [sp+64]
  10b118:    03 00             	hbkpt
  10b11a:    06 10             	r6 = b[r0++=r8] (u)
  10b11c:    03 00             	hbkpt
  10b11e:    06 18             	r6 += r0
  10b120:    03 00             	hbkpt
  10b122:    06 08             	r6 = [r0++=r8] 
  10b124:    00 3f             	r0 = [sp+124]
  10b126:    ff fc 00 00       	if (r15 <= 896) goto 0 <osd_str_matrix+0x11AA : 10b12a >
  10b12a:    06 00              <unknown instruction>
  10b12c:    00 00             	nop
  10b12e:    06 00              <unknown instruction>
  10b130:    00 00             	nop
  10b132:    06 00              <unknown instruction>
  10b134:    01 00             	idle
  10b136:    06 00              <unknown instruction>
  10b138:    7f 80             	r7 = r7 + 0
  10b13a:    16 00              <unknown instruction>
  10b13c:    03 1f             	r3 = r0 - r4
  10b13e:    fa 00             	sti r10
  10b140:    03 01             	tbb [r3]
  10b142:    82 00             	rtx
  10b144:    03 01             	tbb [r3]
  10b146:    83 00             	rte
  10b148:    03 01             	tbb [r3]
  10b14a:    83 00             	rte
  10b14c:    03 01             	tbb [r3]
  10b14e:    83 00             	rte
  10b150:    03 01             	tbb [r3]
  10b152:    81 00             	rti
  10b154:    03 01             	tbb [r3]
  10b156:    81 80              <unknown instruction>
  10b158:    03 09             	r3 = [r0++=r10] 
  10b15a:    81 80              <unknown instruction>
  10b15c:    03 11             	r3 = b[r0++=r10] (u)
  10b15e:    8c c4              <unknown instruction>
  10b160:    03 21             	r3 = [sp+4]
  10b162:    f0 c4              <unknown instruction>
  10b164:    03 43             	if (r3 == 0) goto 6 <osd_str_matrix+0x11EC : 10b16c >
  10b166:    c0 64             	[r4+16] = r0
  10b168:    03 de             	r3 = r0 - r0  #
  10b16a:    00 74             		 r0 = [r0+-48] 
  10b16c:    03 88              <unknown instruction>
  10b16e:    00 3c             	r0 = [sp+112]
  10b170:    03 80              <unknown instruction>
  10b172:    00 1c             	r0 = r0 + r0
  10b174:    01 00             	idle
  10b176:    00 0c             	r0 = h[r0++=r8] (u)
  10b178:    00 00             	nop
  10b17a:    00 04             	pc = [sp++]
  10b17c:    00 00             	nop
  10b17e:    00 00             	nop
  10b180:    00 00             	nop
  10b182:    00 00             	nop
  10b184:    00 00             	nop
  10b186:    00 00             	nop
  10b188:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0x120A : 10b18a >
  10b18a:    10 00              <unknown instruction>
  10b18c:    00 60             	r0 = [r0+0] 
  10b18e:    18 00              <unknown instruction>
  10b190:    00 c0              <unknown instruction>
  10b192:    18 00              <unknown instruction>
  10b194:    00 c0              <unknown instruction>
  10b196:    18 00              <unknown instruction>
  10b198:    00 c0              <unknown instruction>
  10b19a:    18 18             	r8 += r1
  10b19c:    01 9f             	call 62 <osd_str_matrix+0x125C : 10b1dc >
  10b19e:    ff fc 01 80       	if (r15 <= 960) goto 2 <osd_str_matrix+0x1224 : 10b1a4 >
  10b1a2:    18 00              <unknown instruction>
  10b1a4:    03 00             	hbkpt
  10b1a6:    18 00              <unknown instruction>
  10b1a8:    03 00             	hbkpt
  10b1aa:    18 20              <unknown instruction>
  10b1ac:    07 87             	goto -1010 <osd_str_matrix+0xE3C : 10adbc >
  10b1ae:    ff f0 05 04       	r15 = r0 - 0x85000000  #
  10b1b2:    18 20              <unknown instruction>
  10b1b4:    0d 04              <unknown instruction>
  10b1b6:    18 20              <unknown instruction>
  10b1b8:    09 04              <unknown instruction>
  10b1ba:    18 20              <unknown instruction>
  10b1bc:    11 04              <unknown instruction>
  10b1be:    18 20              <unknown instruction>
  10b1c0:    11 04              <unknown instruction>
  10b1c2:    18 20              <unknown instruction>
  10b1c4:    21 07             		 r1 = b[r2++=1] (u)
  10b1c6:    ff e0 01 04       	r15 = r0 - 0x81000000
  10b1ca:    18 20              <unknown instruction>
  10b1cc:    01 02             	pfetch [r1]
  10b1ce:    18 00              <unknown instruction>
  10b1d0:    01 01             	tbb [r1]
  10b1d2:    18 00              <unknown instruction>
  10b1d4:    01 01             	tbb [r1]
  10b1d6:    10 00              <unknown instruction>
  10b1d8:    01 00             	idle
  10b1da:    b0 00             	testset b[r0]
  10b1dc:    01 00             	idle
  10b1de:    f0 00             	sti r0
  10b1e0:    01 00             	idle
  10b1e2:    60 00             	cli
  10b1e4:    01 00             	idle
  10b1e6:    70 00              <unknown instruction>
  10b1e8:    01 00             	idle
  10b1ea:    dc 00             	goto r12
  10b1ec:    01 01             	tbb [r1]
  10b1ee:    87 80             	goto -512 <osd_str_matrix+0x1070 : 10aff0 >
  10b1f0:    01 06             	r1 = h[r0++=2] (u)
  10b1f2:    03 fc 01 18       	if (r3 > 12) goto 2 <osd_str_matrix+0x1278 : 10b1f8 >
  10b1f6:    00 f8 00 60       	if (r0 == 48) goto 0 <osd_str_matrix+0x127A : 10b1fa >
  10b1fa:    00 10             	r0 = b[r0++=r8] (u)
  10b1fc:    00 00             	nop
  10b1fe:    00 00             	nop
  10b200:    00 00             	nop
  10b202:    00 00             	nop
  10b204:    00 00             	nop
  10b206:    00 00             	nop
  10b208:    04 00              <unknown instruction>
  10b20a:    00 20             	r0 = [sp]
  10b20c:    03 ff ff f0 02 01 	if (r15 < 255) goto 516 <osd_str_matrix+0x1496 : 10b416 >
  10b212:    80 60             	[r0+0] = r0
  10b214:    02 01             	tbb [r2]
  10b216:    80 60             	[r0+0] = r0
  10b218:    02 01             	tbb [r2]
  10b21a:    80 60             	[r0+0] = r0
  10b21c:    02 01             	tbb [r2]
  10b21e:    80 60             	[r0+0] = r0
  10b220:    02 01             	tbb [r2]
  10b222:    80 60             	[r0+0] = r0
  10b224:    02 01             	tbb [r2]
  10b226:    80 60             	[r0+0] = r0
  10b228:    02 01             	tbb [r2]
  10b22a:    80 60             	[r0+0] = r0
  10b22c:    03 ff ff e0 02 01 	if (r14 < 255) goto 516 <osd_str_matrix+0x14B6 : 10b436 >
  10b232:    80 60             	[r0+0] = r0
  10b234:    02 01             	tbb [r2]
  10b236:    80 60             	[r0+0] = r0
  10b238:    02 01             	tbb [r2]
  10b23a:    80 60             	[r0+0] = r0
  10b23c:    02 01             	tbb [r2]
  10b23e:    80 60             	[r0+0] = r0
  10b240:    06 01             	tbb [r6]
  10b242:    80 60             	[r0+0] = r0
  10b244:    06 01             	tbb [r6]
  10b246:    80 60             	[r0+0] = r0
  10b248:    07 ff ff e0 06 01 	if (r14 ?? 255) goto 524 <osd_str_matrix+0x14DA : 10b45a >
  10b24e:    80 60             	[r0+0] = r0
  10b250:    06 01             	tbb [r6]
  10b252:    80 60             	[r0+0] = r0
  10b254:    06 01             	tbb [r6]
  10b256:    80 60             	[r0+0] = r0
  10b258:    04 01             	tbb [r4]
  10b25a:    80 60             	[r0+0] = r0
  10b25c:    04 01             	tbb [r4]
  10b25e:    80 60             	[r0+0] = r0
  10b260:    0c 01             	tbb [r12]
  10b262:    80 60             	[r0+0] = r0
  10b264:    08 01             	tbb [r8]
  10b266:    80 60             	[r0+0] = r0
  10b268:    08 01             	tbb [r8]
  10b26a:    80 60             	[r0+0] = r0
  10b26c:    10 01             	tbh [r0]
  10b26e:    8e e0              <unknown instruction>
  10b270:    10 01             	tbh [r0]
  10b272:    83 e0              <unknown instruction>
  10b274:    20 00             	csync
  10b276:    00 c0              <unknown instruction>
  10b278:    40 00             	lockclr
  10b27a:    00 80             	rep 2 1 {
  10b27c:    00 00             		nop
                               	}
  10b27e:    00 00             	nop
  10b280:    00 00             	nop
  10b282:    00 00             	nop
  10b284:    00 00             	nop
  10b286:    00 00             	nop
  10b288:    00 80             	rep 2 1 {
  10b28a:    00 00             		nop
                               	}
  10b28c:    00 e0 1c 00       	r0.l = 28
  10b290:    01 80             	call 0 <osd_str_matrix+0x1312 : 10b292 >
  10b292:    18 00              <unknown instruction>
  10b294:    01 80             	call 0 <osd_str_matrix+0x1316 : 10b296 >
  10b296:    18 00              <unknown instruction>
  10b298:    01 82             	call 4 <osd_str_matrix+0x131E : 10b29e >
  10b29a:    10 00              <unknown instruction>
  10b29c:    3f ff              <unknown instruction>
  10b29e:    30 00              <unknown instruction>
  10b2a0:    03 00             	hbkpt
  10b2a2:    20 10             	r0 = b[r2++=r8] (u)
  10b2a4:    03 00             	hbkpt
  10b2a6:    3f f8 02 00       	if (r15 == 384) goto 4 <osd_str_matrix+0x132E : 10b2ae >
  10b2aa:    60 18             	r0 += r6
  10b2ac:    06 60             	r6 = [r0+0] 
  10b2ae:    40 30             	r0 = 16
  10b2b0:    06 60             	r6 = [r0+0] 
  10b2b2:    8c 20             	[sp] = r12
  10b2b4:    04 61             	r4 = [r0+4] 
  10b2b6:    0e 40             	r6 = b[r0+0] (u)
  10b2b8:    0c 61             	r4 = h[r0+2] (u)
  10b2ba:    0c 00              <unknown instruction>
  10b2bc:    0c 62             	r4 = h[r0+4] (u)
  10b2be:    0c 00              <unknown instruction>
  10b2c0:    0f ff 0e 00 08 60 	if (r0 ?? 14) goto 49168 <EX_RAM_BEGIN+0x32D6 : 1172d6 >
  10b2c6:    0a 00              <unknown instruction>
  10b2c8:    00 60             	r0 = [r0+0] 
  10b2ca:    0a 00              <unknown instruction>
  10b2cc:    00 60             	r0 = [r0+0] 
  10b2ce:    1a 00              <unknown instruction>
  10b2d0:    00 66             	r0 = [r0+24] 
  10b2d2:    1b 00              <unknown instruction>
  10b2d4:    00 78             	r0 = [r0+-32] 
  10b2d6:    19 00              <unknown instruction>
  10b2d8:    03 e0 31 00       	r3.l = 49
  10b2dc:    3e 60             	r6 = h[r3+0] (u)
  10b2de:    31 80             	call 192 <osd_str_matrix+0x1420 : 10b3a0 >
  10b2e0:    18 60             	r0 = h[r1+0] (u)
  10b2e2:    20 80             	rep 6 1 {
  10b2e4:    10 60             		r0 = [r1+0] 
  10b2e6:    60 c0              <unknown instruction>
  10b2e8:    00 60             		r0 = [r0+0] 
  10b2ea:    c0 60             		[r4+0] = r0
                               	}
  10b2ec:    00 61             	r0 = [r0+4] 
  10b2ee:    80 70             	[r0+-64] = r0
  10b2f0:    00 63             	r0 = [r0+12] 
  10b2f2:    00 3c             	r0 = [sp+112]
  10b2f4:    00 66             	r0 = [r0+24] 
  10b2f6:    00 18             	r0 += r0
  10b2f8:    00 48             	if (r0 == 0) goto 16 <osd_str_matrix+0x138A : 10b30a >
  10b2fa:    00 00             	nop
  10b2fc:    00 00             	nop
  10b2fe:    00 00             	nop
  10b300:    00 00             	nop
  10b302:    00 00             	nop
  10b304:    00 00             	nop
  10b306:    00 00             	nop
  10b308:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0x138A : 10b30a >
  10b30a:    08 00              <unknown instruction>
  10b30c:    00 70             	r0 = [r0+-64] 
  10b30e:    0e 00              <unknown instruction>
  10b310:    00 e0 0c 00       	r0.l = 12
  10b314:    00 c3              <unknown instruction>
  10b316:    0c 00              <unknown instruction>
  10b318:    00 c3              <unknown instruction>
  10b31a:    0c 00              <unknown instruction>
  10b31c:    01 83             	call 6 <osd_str_matrix+0x13A4 : 10b324 >
  10b31e:    0c 00              <unknown instruction>
  10b320:    01 82             	call 4 <osd_str_matrix+0x13A6 : 10b326 >
  10b322:    0c 00              <unknown instruction>
  10b324:    03 06             	r3 = h[r0++=2] (u)
  10b326:    0c 30             	r12 = [sp+64]
  10b328:    03 87              <unknown instruction>
  10b32a:    ff f8 07 84       	if (r15 != -62) goto 14 <osd_str_matrix+0x13BC : 10b33c >
  10b32e:    0c 00              <unknown instruction>
  10b330:    05 0c             	r5 = h[r0++=r8] (u)
  10b332:    0c 00              <unknown instruction>
  10b334:    0d 08             	[r0++=r8] = r5
  10b336:    0c 00              <unknown instruction>
  10b338:    09 08             	[r0++=r8] = r1
  10b33a:    0c 00              <unknown instruction>
  10b33c:    11 10             	r1 = b[r1++=r8] (u)
  10b33e:    0c 00              <unknown instruction>
  10b340:    21 00             	syscall
  10b342:    0c 00              <unknown instruction>
  10b344:    21 00             	syscall
  10b346:    0c 08             	[r0++=r8] = r4
  10b348:    41 3f             	r1 = 31
  10b34a:    ff fc 01 00       	if (r15 <= 896) goto 2 <osd_str_matrix+0x13D0 : 10b350 >
  10b34e:    0c 00              <unknown instruction>
  10b350:    01 00             	idle
  10b352:    0c 00              <unknown instruction>
  10b354:    01 00             	idle
  10b356:    0c 00              <unknown instruction>
  10b358:    01 00             	idle
  10b35a:    0c 00              <unknown instruction>
  10b35c:    01 00             	idle
  10b35e:    0c 00              <unknown instruction>
  10b360:    01 00             	idle
  10b362:    0c 00              <unknown instruction>
  10b364:    01 00             	idle
  10b366:    0c 00              <unknown instruction>
  10b368:    01 00             	idle
  10b36a:    0c 00              <unknown instruction>
  10b36c:    01 00             	idle
  10b36e:    0c 00              <unknown instruction>
  10b370:    01 00             	idle
  10b372:    0c 00              <unknown instruction>
  10b374:    01 00             	idle
  10b376:    0c 00              <unknown instruction>
  10b378:    02 00             	bkpt
  10b37a:    08 00              <unknown instruction>
  10b37c:    00 00             	nop
  10b37e:    00 00             	nop
  10b380:    00 00             	nop
  10b382:    00 00             	nop
  10b384:    00 00             	nop
  10b386:    00 00             	nop
  10b388:    00 00             	nop
  10b38a:    00 80             	rep 2 1 {
  10b38c:    00 00             		nop
                               	}
  10b38e:    0f c0              <unknown instruction>
  10b390:    00 01             	tbb [r0]
  10b392:    ff e0 0f ff       	r15 = r15 - 0x23C
  10b396:    80 00             	rts
  10b398:    00 01             	tbb [r0]
  10b39a:    80 00             	rts
  10b39c:    00 01             	tbb [r0]
  10b39e:    80 00             	rts
  10b3a0:    00 01             	tbb [r0]
  10b3a2:    80 00             	rts
  10b3a4:    00 01             	tbb [r0]
  10b3a6:    80 00             	rts
  10b3a8:    00 01             	tbb [r0]
  10b3aa:    80 c0              <unknown instruction>
  10b3ac:    0f ff ff e0 00 01 	if (r14 ?? 255) goto 512 <osd_str_matrix+0x1632 : 10b5b2 >
  10b3b2:    80 00             	rts
  10b3b4:    00 01             	tbb [r0]
  10b3b6:    80 00             	rts
  10b3b8:    00 01             	tbb [r0]
  10b3ba:    80 00             	rts
  10b3bc:    00 01             	tbb [r0]
  10b3be:    80 00             	rts
  10b3c0:    00 01             	tbb [r0]
  10b3c2:    80 00             	rts
  10b3c4:    00 01             	tbb [r0]
  10b3c6:    80 18             	r0 += r8
  10b3c8:    7f ff              <unknown instruction>
  10b3ca:    ff fc 00 01       	if (r15 <= 896) goto -512 <osd_str_matrix+0x124E : 10b1ce >
  10b3ce:    80 00             	rts
  10b3d0:    00 01             	tbb [r0]
  10b3d2:    80 00             	rts
  10b3d4:    00 01             	tbb [r0]
  10b3d6:    80 00             	rts
  10b3d8:    00 01             	tbb [r0]
  10b3da:    80 00             	rts
  10b3dc:    00 01             	tbb [r0]
  10b3de:    80 00             	rts
  10b3e0:    00 01             	tbb [r0]
  10b3e2:    80 00             	rts
  10b3e4:    00 01             	tbb [r0]
  10b3e6:    80 00             	rts
  10b3e8:    00 01             	tbb [r0]
  10b3ea:    80 00             	rts
  10b3ec:    00 03             	rep 2 r0 {
  10b3ee:    80 00             		rts
                               	}
  10b3f0:    00 3f             	r0 = [sp+124]
  10b3f2:    00 00             	nop
  10b3f4:    00 07             	r0 = b[r0++=1] (u)
  10b3f6:    00 00             	nop
  10b3f8:    00 06             	r0 = h[r0++=2] (u)
  10b3fa:    00 00             	nop
  10b3fc:    00 00             	nop
  10b3fe:    00 00             	nop
  10b400:    00 00             	nop
  10b402:    00 00             	nop
  10b404:    00 00             	nop
  10b406:    00 00             	nop
  10b408:    00 00             	nop
  10b40a:    08 00              <unknown instruction>
  10b40c:    00 00             	nop
  10b40e:    0e 00              <unknown instruction>
  10b410:    00 00             	nop
  10b412:    0c 00              <unknown instruction>
  10b414:    00 0c             	r0 = h[r0++=r8] (u)
  10b416:    0c 00              <unknown instruction>
  10b418:    1f fe 0c 00       	ifs (r15 > 128) goto 24 <osd_str_matrix+0x14B4 : 10b434 >
  10b41c:    00 00             	nop
  10b41e:    0c 00              <unknown instruction>
  10b420:    00 00             	nop
  10b422:    0c 00              <unknown instruction>
  10b424:    00 00             	nop
  10b426:    0c 00              <unknown instruction>
  10b428:    00 00             	nop
  10b42a:    ff fc 00 02       	if (r15 <= 897) goto 0 <osd_str_matrix+0x14AE : 10b42e >
  10b42e:    0c 18             	r12 += r0
  10b430:    3f ff              <unknown instruction>
  10b432:    0c 18             	r12 += r0
  10b434:    00 80             	rep 2 1 {
  10b436:    0c 18             		r12 += r0
                               	}
  10b438:    01 e0 0c 18       	r1.l = 6156
  10b43c:    01 80             	call 0 <osd_str_matrix+0x14BE : 10b43e >
  10b43e:    0c 18             	r12 += r0
  10b440:    03 00             	hbkpt
  10b442:    08 18             	r8 += r0
  10b444:    03 00             	hbkpt
  10b446:    08 18             	r8 += r0
  10b448:    06 10             	r6 = b[r0++=r8] (u)
  10b44a:    18 18             	r8 += r1
  10b44c:    04 08             	r4 = [r0++=r8] 
  10b44e:    18 18             	r8 += r1
  10b450:    0c 0c             	h[r0++=r8] = r4
  10b452:    10 18             	r0 += r1
  10b454:    08 06             	r0 = h[r0++=-2] (u)
  10b456:    10 18             	r0 += r1
  10b458:    10 7f             	r0 = [r1+-4] 
  10b45a:    30 10             	r0 = b[r3++=r8] (u)
  10b45c:    3f 83             	r7 = r3 + 3
  10b45e:    20 10             	r0 = b[r2++=r8] (u)
  10b460:    38 02             	flushinv [r8]
  10b462:    60 10             	r0 = b[r6++=r8] (u)
  10b464:    00 00             	nop
  10b466:    c0 30             	r0 += 16
  10b468:    00 01             	tbb [r0]
  10b46a:    80 30             	[sp+64] = r0
  10b46c:    00 01             	tbb [r0]
  10b46e:    0c 30             	r12 = [sp+64]
  10b470:    00 06             	r0 = h[r0++=2] (u)
  10b472:    03 e0 00 08       	r3.l = 2048
  10b476:    01 e0 00 10       	r1.l = 4096
  10b47a:    00 80             	rep 2 1 {
  10b47c:    00 00             		nop
                               	}
  10b47e:    00 00             	nop
  10b480:    00 00             	nop
  10b482:    00 00             	nop
  10b484:    00 00             	nop
  10b486:    00 00             	nop
  10b488:    01 00             	idle
  10b48a:    00 00             	nop
  10b48c:    01 c0              <unknown instruction>
  10b48e:    03 00             	hbkpt
  10b490:    01 80             	call 0 <osd_str_matrix+0x1512 : 10b492 >
  10b492:    03 00             	hbkpt
  10b494:    03 08             	r3 = [r0++=r8] 
  10b496:    03 00             	hbkpt
  10b498:    03 fc 03 00       	if (r3 > 0) goto 6 <osd_str_matrix+0x1522 : 10b4a2 >
  10b49c:    02 18             	r2 += r0
  10b49e:    03 00             	hbkpt
  10b4a0:    06 10             	r6 = b[r0++=r8] (u)
  10b4a2:    03 00             	hbkpt
  10b4a4:    0c 20             	r12 = [sp]
  10b4a6:    03 00             	hbkpt
  10b4a8:    08 24             	r8 = [sp+16]
  10b4aa:    7f f8 1f fe       	if (r15 == -1) goto 62 <osd_str_matrix+0x156C : 10b4ec >
  10b4ae:    63 18             	r3 += r6
  10b4b0:    2c 46             	r4 = b[r2+6] (u)
  10b4b2:    63 18             	r3 += r6
  10b4b4:    4c 46             	r4 = b[r4+6] (u)
  10b4b6:    63 18             	r3 += r6
  10b4b8:    0c 46             	r4 = b[r0+6] (u)
  10b4ba:    63 18             	r3 += r6
  10b4bc:    0f fe 63 18       	ifs (r15 > 12) goto 198 <osd_str_matrix+0x1606 : 10b586 >
  10b4c0:    0c 46             	r4 = b[r0+6] (u)
  10b4c2:    63 18             	r3 += r6
  10b4c4:    0c 46             	r4 = b[r0+6] (u)
  10b4c6:    63 18             	r3 += r6
  10b4c8:    0c 46             	r4 = b[r0+6] (u)
  10b4ca:    63 18             	r3 += r6
  10b4cc:    0c 46             	r4 = b[r0+6] (u)
  10b4ce:    7f f8 0f fe       	if (r15 == -1) goto 30 <osd_str_matrix+0x1570 : 10b4f0 >
  10b4d2:    63 18             	r3 += r6
  10b4d4:    0c 46             	r4 = b[r0+6] (u)
  10b4d6:    03 00             	hbkpt
  10b4d8:    0c 46             	r4 = b[r0+6] (u)
  10b4da:    03 00             	hbkpt
  10b4dc:    08 46             	r0 = b[r0+6] (u)
  10b4de:    03 20             	r3 = [sp]
  10b4e0:    08 46             	r0 = b[r0+6] (u)
  10b4e2:    03 10             	r3 = b[r0++=r8] (u)
  10b4e4:    08 46             	r0 = b[r0+6] (u)
  10b4e6:    03 18             	r3 += r0
  10b4e8:    10 46             	if (r0 == 0) goto 76 <osd_str_matrix+0x15B6 : 10b536 >
  10b4ea:    03 fc 10 47       	if (r3 > 35) goto -480 <osd_str_matrix+0x138E : 10b30e >
  10b4ee:    ff 0c             	h[r7++=r9] = r7
  10b4f0:    20 66             	r0 = [r2+24] 
  10b4f2:    e0 04             	[--sp] = {psr}
  10b4f4:    20 1c             	r0 = r2 + r0
  10b4f6:    80 00             	rts
  10b4f8:    40 04             	{r3-r0} = [sp++]
  10b4fa:    00 00             	nop
  10b4fc:    00 00             	nop
  10b4fe:    00 00             	nop
  10b500:    00 00             	nop
  10b502:    00 00             	nop
  10b504:    00 00             	nop
  10b506:    00 00             	nop
  10b508:    00 04             	pc = [sp++]
  10b50a:    00 00             	nop
  10b50c:    00 06             	r0 = h[r0++=2] (u)
  10b50e:    08 00              <unknown instruction>
  10b510:    03 06             	r3 = h[r0++=2] (u)
  10b512:    06 00              <unknown instruction>
  10b514:    03 04              <unknown instruction>
  10b516:    03 00             	hbkpt
  10b518:    03 0c             	r3 = h[r0++=r8] (u)
  10b51a:    03 80              <unknown instruction>
  10b51c:    06 0c             	r6 = h[r0++=r8] (u)
  10b51e:    01 80             	call 0 <osd_str_matrix+0x15A0 : 10b520 >
  10b520:    06 0c             	r6 = h[r0++=r8] (u)
  10b522:    00 80             	rep 2 1 {
  10b524:    0c 0c             		h[r0++=r8] = r4
                               	}
  10b526:    00 18             	r0 += r0
  10b528:    1f ff              <unknown instruction>
  10b52a:    ff fc 08 08       	if (r15 <= 900) goto 16 <osd_str_matrix+0x15BE : 10b53e >
  10b52e:    00 00             	nop
  10b530:    00 18             	r0 += r0
  10b532:    00 00             	nop
  10b534:    00 18             	r0 += r0
  10b536:    00 00             	nop
  10b538:    00 18             	r0 += r0
  10b53a:    00 80             	rep 2 1 {
  10b53c:    00 3f             		r0 = [sp+124]
                               	}
  10b53e:    ff c0              <unknown instruction>
  10b540:    00 34             	r0 = [sp+80]
  10b542:    01 80             	call 0 <osd_str_matrix+0x15C4 : 10b544 >
  10b544:    00 32             	r0 = [sp+72]
  10b546:    03 80              <unknown instruction>
  10b548:    00 62             	r0 = [r0+8] 
  10b54a:    03 00             	hbkpt
  10b54c:    00 61             	r0 = [r0+4] 
  10b54e:    06 00              <unknown instruction>
  10b550:    00 41             	if (r0 == 0) goto 2 <osd_str_matrix+0x15D4 : 10b554 >
  10b552:    86 00              <unknown instruction>
  10b554:    00 c0              <unknown instruction>
  10b556:    cc 00             	call r12
  10b558:    00 80             	rep 2 1 {
  10b55a:    58 00              <unknown instruction>
  10b55c:    01 80             		call 0
                               	} <osd_str_matrix+0x15DE : 10b55e >
  10b55e:    70 00              <unknown instruction>
  10b560:    03 00             	hbkpt
  10b562:    78 00              <unknown instruction>
  10b564:    02 00             	bkpt
  10b566:    fc 00             	sti r12
  10b568:    04 01             	tbb [r4]
  10b56a:    8f 00              <unknown instruction>
  10b56c:    08 07             	r0 = b[r0++=-1] (u)
  10b56e:    03 c0              <unknown instruction>
  10b570:    10 0c             	r0 = h[r1++=r8] (u)
  10b572:    01 fc 20 70       	if (r1 > 56) goto 64 <osd_str_matrix+0x1636 : 10b5b6 >
  10b576:    00 78             	r0 = [r0+-32] 
  10b578:    01 80             	call 0 <osd_str_matrix+0x15FA : 10b57a >
  10b57a:    00 00             	nop
  10b57c:    00 00             	nop
  10b57e:    00 00             	nop
  10b580:    00 00             	nop
  10b582:    00 00             	nop
  10b584:    00 00             	nop
  10b586:    00 00             	nop
  10b588:    00 00             	nop
  10b58a:    10 00              <unknown instruction>
  10b58c:    00 00             	nop
  10b58e:    1c 00              <unknown instruction>
  10b590:    03 00             	hbkpt
  10b592:    18 00              <unknown instruction>
  10b594:    03 00             	hbkpt
  10b596:    18 00              <unknown instruction>
  10b598:    03 02             	pfetch [r3]
  10b59a:    18 00              <unknown instruction>
  10b59c:    03 03             	rep 2 r3 {
  10b59e:    18 00              <unknown instruction>
  10b5a0:    03 03             		rep 2 r3
                               	} {
  10b5a2:    18 00              <unknown instruction>
  10b5a4:    03 03             		rep 2 r3
                               	} {
  10b5a6:    18 20              <unknown instruction>
  10b5a8:    03 03             		rep 2 r3
                               	} {
  10b5aa:    18 f0 03 03       		r8.h = 771  #
                               	}
  10b5ae:    1f 60             		 r7 = h[r1+0] (u)
  10b5b0:    03 23             	r3 = [sp+12]
  10b5b2:    18 60             	r0 = h[r1+0] (u)
  10b5b4:    3f f3              <unknown instruction>
  10b5b6:    f8 60             	h[r7+0] = r0
  10b5b8:    03 07             	r3 = b[r0++=1] (u)
  10b5ba:    18 60             	r0 = h[r1+0] (u)
  10b5bc:    03 1b             	r3 *= r0
  10b5be:    18 60             	r0 = h[r1+0] (u)
  10b5c0:    03 23             	r3 = [sp+12]
  10b5c2:    18 60             	r0 = h[r1+0] (u)
  10b5c4:    03 03             	rep 2 r3 {
  10b5c6:    18 60             		r0 = h[r1+0] (u)
                               	}
  10b5c8:    03 03             	rep 2 r3 {
  10b5ca:    18 60             		r0 = h[r1+0] (u)
                               	}
  10b5cc:    03 03             	rep 2 r3 {
  10b5ce:    18 60             		r0 = h[r1+0] (u)
                               	}
  10b5d0:    03 03             	rep 2 r3 {
  10b5d2:    18 60             		r0 = h[r1+0] (u)
                               	}
  10b5d4:    03 03             	rep 2 r3 {
  10b5d6:    19 e0 03 03       		r9.h = 771
                               	}
  10b5da:    18 c8              <unknown instruction>
  10b5dc:    03 1b             	r3 *= r0
  10b5de:    18 08             	[r1++=r8] = r0
  10b5e0:    03 e3              <unknown instruction>
  10b5e2:    18 08             	[r1++=r8] = r0
  10b5e4:    07 83             	goto -1018 <osd_str_matrix+0x126C : 10b1ec >
  10b5e6:    00 08             	r0 = [r0++=r8] 
  10b5e8:    3e 03             	rep 8 r14 {
  10b5ea:    00 08             		r0 = [r0++=r8] 
  10b5ec:    38 03             		rep 8 r8 {
  10b5ee:    00 0c             		r0 = h[r0++=r8] (u)
  10b5f0:    20 03             		rep 6 r0 {
  10b5f2:    ff fc 00 01       		if (r15 <= 896) goto -512 <osd_str_matrix+0x1476 : 10b3f6 >
  10b5f6:    ff f8 00 00       		if (r15 != -128) goto 0
                               	} <osd_str_matrix+0x167A : 10b5fa >
  10b5fa:    00 00             	nop
  10b5fc:    00 00             	nop
  10b5fe:    00 00             	nop
  10b600:    00 00             	nop
  10b602:    00 00             	nop
  10b604:    00 00             	nop
  10b606:    00 00             	nop
  10b608:    02 00             	bkpt
  10b60a:    08 00              <unknown instruction>
  10b60c:    03 80              <unknown instruction>
  10b60e:    0e 00              <unknown instruction>
  10b610:    03 00             	hbkpt
  10b612:    0c 00              <unknown instruction>
  10b614:    03 00             	hbkpt
  10b616:    0c 00              <unknown instruction>
  10b618:    03 00             	hbkpt
  10b61a:    0c 00              <unknown instruction>
  10b61c:    03 00             	hbkpt
  10b61e:    0c 00              <unknown instruction>
  10b620:    03 00             	hbkpt
  10b622:    0c 00              <unknown instruction>
  10b624:    03 00             	hbkpt
  10b626:    0c 00              <unknown instruction>
  10b628:    03 03             	rep 2 r3 {
  10b62a:    0c 00              <unknown instruction>
  10b62c:    03 13             		r3 = b[r0++=r14] (u)
                               	}
  10b62e:    8c 00              <unknown instruction>
  10b630:    3f fb 0c 00       	if ((r15 & r3) != 0) goto 24 <osd_str_matrix+0x16CC : 10b64c >
  10b634:    03 03             	rep 2 r3 {
  10b636:    0c 18             		r12 += r0
                               	}
  10b638:    03 03             	rep 2 r3 {
  10b63a:    0f fc 03 03       		if (r15 > 1) goto -506
                               	} <osd_str_matrix+0x14C4 : 10b444 >
  10b63e:    0c 00              <unknown instruction>
  10b640:    03 03             	rep 2 r3 {
  10b642:    0c 00              <unknown instruction>
  10b644:    03 03             		rep 2 r3
                               	} {
  10b646:    0c 00              <unknown instruction>
  10b648:    03 03             		rep 2 r3
                               	} {
  10b64a:    0c 00              <unknown instruction>
  10b64c:    03 03             		rep 2 r3
                               	} {
  10b64e:    0c 00              <unknown instruction>
  10b650:    03 03             		rep 2 r3
                               	} {
  10b652:    0c 00              <unknown instruction>
  10b654:    03 03             		rep 2 r3
                               	} {
  10b656:    0c 00              <unknown instruction>
  10b658:    03 0b             		r3 = [r0++=r14] 
                               	}
  10b65a:    0c 00              <unknown instruction>
  10b65c:    03 73             	r3 = [r0+-52] 
  10b65e:    0c 00              <unknown instruction>
  10b660:    03 83              <unknown instruction>
  10b662:    0c 00              <unknown instruction>
  10b664:    1e 03             	rep 4 r14 {
  10b666:    0c 00              <unknown instruction>
  10b668:    38 03             		rep 8 r8 {
  10b66a:    0c 00              <unknown instruction>
  10b66c:    30 03             		rep 8 r0 {
  10b66e:    0c 18             		r12 += r0
  10b670:    00 7f             		r0 = [r0+-4] 
  10b672:    ff fc 00 00       		if (r15 <= 896) goto 0
                               	} <osd_str_matrix+0x16F6 : 10b676 >
  10b676:    00 00             	nop
  10b678:    00 00             	nop
  10b67a:    00 00             	nop
  10b67c:    00 00             	nop
  10b67e:    00 00             	nop
  10b680:    00 00             	nop
  10b682:    00 00             	nop
  10b684:    00 00             	nop
  10b686:    00 00             	nop
  10b688:    00 00             	nop
  10b68a:    00 00             	nop
  10b68c:    00 30             	r0 = [sp+64]
  10b68e:    00 00             	nop
  10b690:    00 3c             	r0 = [sp+112]
  10b692:    00 00             	nop
  10b694:    00 06             	r0 = h[r0++=2] (u)
  10b696:    00 00             	nop
  10b698:    00 03             	rep 2 r0 {
  10b69a:    00 00             		nop
                               	}
  10b69c:    00 01             	tbb [r0]
  10b69e:    00 00             	nop
  10b6a0:    00 01             	tbb [r0]
  10b6a2:    80 00             	rts
  10b6a4:    00 01             	tbb [r0]
  10b6a6:    80 00             	rts
  10b6a8:    00 03             	rep 2 r0 {
  10b6aa:    c0 00             		call r0
                               	}
  10b6ac:    00 03             	rep 2 r0 {
  10b6ae:    c0 00             		call r0
                               	}
  10b6b0:    00 03             	rep 2 r0 {
  10b6b2:    40 00             		lockclr
                               	}
  10b6b4:    00 06             	r0 = h[r0++=2] (u)
  10b6b6:    60 00             	cli
  10b6b8:    00 06             	r0 = h[r0++=2] (u)
  10b6ba:    60 00             	cli
  10b6bc:    00 06             	r0 = h[r0++=2] (u)
  10b6be:    20 00             	csync
  10b6c0:    00 0c             	r0 = h[r0++=r8] (u)
  10b6c2:    30 00              <unknown instruction>
  10b6c4:    00 0c             	r0 = h[r0++=r8] (u)
  10b6c6:    30 00              <unknown instruction>
  10b6c8:    00 18             	r0 += r0
  10b6ca:    18 00              <unknown instruction>
  10b6cc:    00 30             	r0 = [sp+64]
  10b6ce:    1c 00              <unknown instruction>
  10b6d0:    00 30             	r0 = [sp+64]
  10b6d2:    0c 00              <unknown instruction>
  10b6d4:    00 60             	r0 = [r0+0] 
  10b6d6:    06 00              <unknown instruction>
  10b6d8:    00 c0              <unknown instruction>
  10b6da:    07 00              <unknown instruction>
  10b6dc:    01 80             	call 0 <osd_str_matrix+0x175E : 10b6de >
  10b6de:    03 80              <unknown instruction>
  10b6e0:    01 00             	idle
  10b6e2:    01 c0              <unknown instruction>
  10b6e4:    02 00             	bkpt
  10b6e6:    00 f0 04 00       	r0.l = 4  #
  10b6ea:    00 7c             		 r0 = [r0+-16] 
  10b6ec:    08 00              <unknown instruction>
  10b6ee:    00 38             	r0 = [sp+96]
  10b6f0:    30 00              <unknown instruction>
  10b6f2:    00 10             	r0 = b[r0++=r8] (u)
  10b6f4:    40 00             	lockclr
  10b6f6:    00 00             	nop
  10b6f8:    00 00             	nop
  10b6fa:    00 00             	nop
  10b6fc:    00 00             	nop
  10b6fe:    00 00             	nop
  10b700:    00 00             	nop
  10b702:    00 00             	nop
  10b704:    00 00             	nop
  10b706:    00 00             	nop
  10b708:    00 00             	nop
  10b70a:    00 00             	nop
  10b70c:    00 01             	tbb [r0]
  10b70e:    00 20             	r0 = [sp]
  10b710:    00 21             	r0 = [sp+4]
  10b712:    ff f0 3f f1       	r15 = r15 - 0x3F003F  #
  10b716:    80 60             		 [r0+0] = r0
  10b718:    00 21             	r0 = [sp+4]
  10b71a:    80 60             	[r0+0] = r0
  10b71c:    00 21             	r0 = [sp+4]
  10b71e:    80 60             	[r0+0] = r0
  10b720:    00 21             	r0 = [sp+4]
  10b722:    80 60             	[r0+0] = r0
  10b724:    00 21             	r0 = [sp+4]
  10b726:    ff e0 00 21       	r15 = r2 - 0x0
  10b72a:    88 60             	h[r0+0] = r0
  10b72c:    00 21             	r0 = [sp+4]
  10b72e:    0e 00              <unknown instruction>
  10b730:    0f e0 0c 00       	r15.l = 12
  10b734:    08 20             	r8 = [sp]
  10b736:    0c 00              <unknown instruction>
  10b738:    08 02             	pfetch [r8]
  10b73a:    0c 10             	b[r0++=r8] = r4
  10b73c:    08 03             	rep 2 r8 {
  10b73e:    ff f8 18 03       		if (r15 != -127) goto -464
                               	} <osd_str_matrix+0x15F2 : 10b572 >
  10b742:    0c 10             	b[r0++=r8] = r4
  10b744:    18 23              <unknown instruction>
  10b746:    0c 10             	b[r0++=r8] = r4
  10b748:    1f f3              <unknown instruction>
  10b74a:    0c 10             	b[r0++=r8] = r4
  10b74c:    10 63             	r0 = [r1+12] 
  10b74e:    0c 10             	b[r0++=r8] = r4
  10b750:    00 63             	r0 = [r0+12] 
  10b752:    0c 10             	b[r0++=r8] = r4
  10b754:    00 63             	r0 = [r0+12] 
  10b756:    ff f0 00 63       	r15 = r6 - 0x0  #
  10b75a:    0c 10             		 b[r0++=r8] = r4
  10b75c:    00 62             	r0 = [r0+8] 
  10b75e:    0c 00              <unknown instruction>
  10b760:    00 60             	r0 = [r0+0] 
  10b762:    0c 20             	r12 = [sp]
  10b764:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0x17E6 : 10b766 >
  10b766:    0c 30             	r12 = [sp+64]
  10b768:    00 c0              <unknown instruction>
  10b76a:    0c 18             	r12 += r0
  10b76c:    00 c0              <unknown instruction>
  10b76e:    0c 7c             	r4 = h[r0+-8] (u)
  10b770:    0f 8f             	r7 = r0 + 15
  10b772:    ff 8c              <unknown instruction>
  10b774:    07 8f             	goto -994 <osd_str_matrix+0x1414 : 10b394 >
  10b776:    80 04             	{} = [sp++]
  10b778:    02 00             	bkpt
  10b77a:    00 00             	nop
  10b77c:    00 00             	nop
  10b77e:    00 00             	nop
  10b780:    00 00             	nop
  10b782:    00 00             	nop
  10b784:    00 00             	nop
  10b786:    00 00             	nop
  10b788:    00 40             	if (r0 == 0) goto 0 <osd_str_matrix+0x180A : 10b78a >
  10b78a:    00 10             	r0 = b[r0++=r8] (u)
  10b78c:    00 30             	r0 = [sp+64]
  10b78e:    00 18             	r0 += r0
  10b790:    00 20             	r0 = [sp]
  10b792:    00 10             	r0 = b[r0++=r8] (u)
  10b794:    06 20             	r6 = [sp]
  10b796:    00 10             	r0 = b[r0++=r8] (u)
  10b798:    0c 20             	r12 = [sp]
  10b79a:    00 10             	r0 = b[r0++=r8] (u)
  10b79c:    0c 21             	r12 = [sp+4]
  10b79e:    06 10             	r6 = b[r0++=r8] (u)
  10b7a0:    0f ff 86 10 08 20 	if (r1 ?? 134) goto 16400 <text_end+0x2A2A : 10f7b6 >
  10b7a6:    06 10             	r6 = b[r0++=r8] (u)
  10b7a8:    10 20             	r0 = -32
  10b7aa:    06 10             	r6 = b[r0++=r8] (u)
  10b7ac:    10 20             	r0 = -32
  10b7ae:    06 10             	r6 = b[r0++=r8] (u)
  10b7b0:    20 20             	r0 = [sp+128]
  10b7b2:    c6 10             	r6 = b[r4++=r9] (u)
  10b7b4:    3f ff              <unknown instruction>
  10b7b6:    e6 10             	r6 = b[r6++=r9] (u)
  10b7b8:    00 20             	r0 = [sp]
  10b7ba:    06 10             	r6 = b[r0++=r8] (u)
  10b7bc:    00 20             	r0 = [sp]
  10b7be:    06 10             	r6 = b[r0++=r8] (u)
  10b7c0:    00 20             	r0 = [sp]
  10b7c2:    86 10             	r6 = b[r0++=r9] (u)
  10b7c4:    0f ff c6 10 08 21 	if (r1 ?? 198) goto 16912 <text_end+0x2C4E : 10f9da >
  10b7ca:    86 10             	r6 = b[r0++=r9] (u)
  10b7cc:    08 21             	r8 = [sp+4]
  10b7ce:    86 10             	r6 = b[r0++=r9] (u)
  10b7d0:    08 21             	r8 = [sp+4]
  10b7d2:    86 10             	r6 = b[r0++=r9] (u)
  10b7d4:    08 21             	r8 = [sp+4]
  10b7d6:    86 10             	r6 = b[r0++=r9] (u)
  10b7d8:    08 21             	r8 = [sp+4]
  10b7da:    86 10             	r6 = b[r0++=r9] (u)
  10b7dc:    08 21             	r8 = [sp+4]
  10b7de:    80 10             	r0 = b[r0++=r9] (u)
  10b7e0:    08 21             	r8 = [sp+4]
  10b7e2:    80 10             	r0 = b[r0++=r9] (u)
  10b7e4:    08 27             	r8 = [sp+28]
  10b7e6:    80 10             	r0 = b[r0++=r9] (u)
  10b7e8:    08 23             	r8 = [sp+12]
  10b7ea:    00 10             	r0 = b[r0++=r8] (u)
  10b7ec:    00 20             	r0 = [sp]
  10b7ee:    00 10             	r0 = b[r0++=r8] (u)
  10b7f0:    00 20             	r0 = [sp]
  10b7f2:    03 f0 00 20       	r3.l = 8192  #
  10b7f6:    00 70             		 r0 = [r0+-64] 
  10b7f8:    00 20             	r0 = [sp]
  10b7fa:    00 20             	r0 = [sp]
  10b7fc:    00 00             	nop
  10b7fe:    00 00             	nop


gpio_regs:
  10b800:    00 50             	if (r0 == 0) goto 32 <gpio_regs+0x22 : 10b822 >
  10b802:    fd 00             	sti r13
  10b804:    00 51             	if (r0 == 0) goto 34 <get_clk_div.div2_tab : 10b828 >
  10b806:    fd 00             	sti r13
  10b808:    00 52             	if (r0 == 0) goto 36 <get_clk_div.div2_tab+0x6 : 10b82e >
  10b80a:    fd 00             	sti r13
  10b80c:    00 53             	if (r0 == 0) goto 38 <get_clk_div.div2_tab+0xC : 10b834 >
  10b80e:    fd 00             	sti r13
  10b810:    00 54             	if (r0 == 0) goto 40 <get_clk_div.div2_tab+0x12 : 10b83a >
  10b812:    fd 00             	sti r13
  10b814:    00 55             	if (r0 == 0) goto 42 <get_clk_div.div2_tab+0x18 : 10b840 >
  10b816:    fd 00             	sti r13
  10b818:    00 57             	if (r0 == 0) goto 46 <get_clk_div.div2_tab+0x20 : 10b848 >
  10b81a:    fd 00             	sti r13
  10b81c:    00 00             	nop
  10b81e:    00 00             	nop
  10b820:    20 00             	csync
  10b822:    3a 00             	ssync


get_clk_div.div1_tab:
  10b824:    01 03             	rep 2 r1 {
  10b826:    05 07             		r5 = b[r0++=1] (u)
                               	}


get_clk_div.div2_tab:
  10b828:    01 02             	pfetch [r1]
  10b82a:    04 08             	r4 = [r0++=r8] 
  10b82c:    25 64             	r5 = [r2+16] 
  10b82e:    25 25             	r5 = [sp+148]
  10b830:    00 25             	r0 = [sp+20]
  10b832:    30 32             	r0 |= 262144
  10b834:    58 00              <unknown instruction>
  10b836:    25 30             	r5 = [sp+192]
  10b838:    32 78             	r2 = [r3+-32] 
  10b83a:    20 00             	csync
  10b83c:    63 6d             	r3 = [r6+52] 
  10b83e:    64 3a             	r4 = 154
  10b840:    25 73             	r5 = [r2+-52] 
  10b842:    00 75             	r0 = [r0+-44] 
  10b844:    69 5f             	r1 = b[r6+-1] (u)
  10b846:    64 69             	r4 = [r6+36] 
  10b848:    73 70             	r3 = [r7+-64] 
  10b84a:    00 00             	nop


ui_cfg_data:
  10b84c:    02 00             	bkpt
  10b84e:    00 00             	nop
  10b850:    c8 9d             	r0 = sp + 93
  10b852:    10 00              <unknown instruction>
  10b854:    30 78             	r0 = [r3+-32] 
  10b856:    25 30             	r5 = [sp+192]
  10b858:    32 78             	r2 = [r3+-32] 
  10b85a:    2c 20             	r12 = [sp+128]
  10b85c:    00 c9              <unknown instruction>
  10b85e:    fd bc             	r5 = r7 >>> 28
  10b860:    b6 cd              <unknown instruction>
  10b862:    ea b1             	r2 = r6 >>> 17
  10b864:    cf 00             	call r15
  10b866:    c9 fd bc b6       	ifs (r9 < -421) goto 376 <imd_clock_init.div+0x22 : 10b9e2 >
  10b86a:    d6 d0              <unknown instruction>
  10b86c:    2e 2e             	r14 = [sp+184]
  10b86e:    2e 00             	ssync
  10b870:    c9 fd bc b6       	ifs (r9 < -421) goto 376 <imd_clock_init.div+0x2C : 10b9ec >
  10b874:    bd f8 b6 c8       	if (r13 != 484) goto 364 <imd_clock_init.div+0x24 : 10b9e4 >
  10b878:    3a 00             	ssync
  10b87a:    c7 eb b2 bb       	[r11+28] += -1102
  10b87e:    d2 aa             	r2 = r5 >> 10
  10b880:    b6 cf              <unknown instruction>
  10b882:    b5 e7              <unknown instruction>
  10b884:    21 00             	syscall
  10b886:    00 00             	nop
  10b888:    f1 0f             	r1 = h[r7++=r15] (u)
  10b88a:    00 00             	nop
  10b88c:    f2 0f             	r2 = h[r7++=r15] (u)
  10b88e:    00 00             	nop
  10b890:    f4 0f             	r4 = h[r7++=r15] (u)
  10b892:    00 00             	nop
  10b894:    00 00             	nop
  10b896:    04 00              <unknown instruction>
  10b898:    00 00             	nop
  10b89a:    10 00              <unknown instruction>
  10b89c:    00 00             	nop
  10b89e:    40 00             	lockclr
  10b8a0:    10 00              <unknown instruction>
  10b8a2:    00 00             	nop
  10b8a4:    20 00             	csync
  10b8a6:    00 00             	nop
  10b8a8:    40 00             	lockclr
  10b8aa:    00 00             	nop
  10b8ac:    00 00             	nop
  10b8ae:    06 00              <unknown instruction>
  10b8b0:    00 00             	nop
  10b8b2:    18 00              <unknown instruction>
  10b8b4:    00 00             	nop
  10b8b6:    60 00             	cli
  10b8b8:    69 6d             	r1 = h[r6+26] (u)
  10b8ba:    64 20             	r4 = 128
  10b8bc:    72 67             	r2 = [r7+28] 
  10b8be:    62 20             	r2 = 128
  10b8c0:    70 6e             	r0 = [r7+56] 
  10b8c2:    64 00              <unknown instruction>
  10b8c4:    f9 0f             	h[r7++=r15] = r1
  10b8c6:    00 00             	nop
  10b8c8:    fa 0f             	h[r7++=r15] = r2
  10b8ca:    00 00             	nop
  10b8cc:    fc 0f             	h[r7++=r15] = r4
  10b8ce:    00 00             	nop
  10b8d0:    ff ff              <unknown instruction>
  10b8d2:    f9 ff              <unknown instruction>
  10b8d4:    ff ff              <unknown instruction>
  10b8d6:    e7 ff ff ff 9f ff 	sr7 = 4288675839
  10b8dc:    00 00             	nop
  10b8de:    02 00             	bkpt
  10b8e0:    00 00             	nop
  10b8e2:    08 00              <unknown instruction>
  10b8e4:    00 00             	nop
  10b8e6:    20 00             	csync
  10b8e8:    ff 8f              <unknown instruction>
  10b8ea:    ff ff              <unknown instruction>
  10b8ec:    ff 7f             	h[r7+-2] = r7
  10b8ee:    fc ff              <unknown instruction>
  10b8f0:    ff ff              <unknown instruction>
  10b8f2:    e3 ff 00 40 00 00 	rets = 16384
  10b8f8:    00 00             	nop
  10b8fa:    02 00             	bkpt
  10b8fc:    00 00             	nop
  10b8fe:    10 00              <unknown instruction>
  10b900:    ef ff ff ff df ff 	pc = 4292870143
  10b906:    ff ff              <unknown instruction>
  10b908:    bf ff              <unknown instruction>
  10b90a:    ff ff              <unknown instruction>
  10b90c:    01 00             	idle
  10b90e:    00 00             	nop
  10b910:    02 00             	bkpt
  10b912:    00 00             	nop
  10b914:    04 00              <unknown instruction>
  10b916:    00 00             	nop
  10b918:    00 50             	if (r0 == 0) goto 32 <ui_cfg_data+0xEE : 10b93a >
  10b91a:    00 00             	nop
  10b91c:    00 80             	rep 2 1 {
  10b91e:    02 00             		bkpt
                               	}
  10b920:    00 00             	nop
  10b922:    14 00              <unknown instruction>
  10b924:    00 60             	r0 = [r0+0] 
  10b926:    00 00             	nop
  10b928:    00 00             	nop
  10b92a:    03 00             	hbkpt
  10b92c:    00 00             	nop
  10b92e:    18 00              <unknown instruction>
  10b930:    74 65             	r4 = [r7+20] 
  10b932:    6d 70             	r5 = h[r6+-32] (u)
  10b934:    20 3a             	r0 = [sp+232]
  10b936:    20 30             	r0 = [sp+192]
  10b938:    78 25             	r0 = 229
  10b93a:    78 0a             	[r7++=r12] = r0
  10b93c:    00 64             	r0 = [r0+16] 
  10b93e:    65 6c             	r5 = [r6+48] 
  10b940:    61 79             	r1 = [r6+-28] 
  10b942:    20 25             	r0 = [sp+148]
  10b944:    64 20             	r4 = 128
  10b946:    6d 73             	r5 = h[r6+-26] (u)
  10b948:    0a 00              <unknown instruction>
  10b94a:    55 50             	if (r5 == 0) goto -160 <ui_cfg_data+0x60 : 10b8ac >
  10b94c:    44 41             	if (r4 == 0) goto -254 <ui_cfg_data+0x4 : 10b850 >
  10b94e:    54 45             	if (r4 == 0) goto -182 <ui_cfg_data+0x4E : 10b89a >
  10b950:    5f 53             	r7 = b[r5+-13] (u)
  10b952:    54 4f             	if (r4 == 0) goto -162 <ui_cfg_data+0x66 : 10b8b2 >
  10b954:    50 2e             	r0 = 78
  10b956:    00 bb             	r0 = r0 << 27
  10b958:    fa c6              <unknown instruction>
  10b95a:    f7 bc             	r7 = r7 >> 28
  10b95c:    b4 bd             	r4 = r3 >> 29
  10b95e:    ab d6             	r11 = r10  #
  10b960:    d8 c6              <unknown instruction>
  10b962:    f4 00             		 sti r4
  10b964:    69 6d             	r1 = h[r6+26] (u)
  10b966:    64 5f             	if (r4 == 0) goto -66 <ui_cfg_data+0xDA : 10b926 >
  10b968:    70 61             	r0 = [r7+4] 
  10b96a:    70 5f             	if (r0 == 0) goto -2 <ui_cfg_data+0x11E : 10b96a >
  10b96c:    69 6e             	r1 = h[r6+28] (u)
  10b96e:    69 74             	r1 = h[r6+-24] (u)
  10b970:    00 69             	r0 = [r0+36] 
  10b972:    6d 64             	r5 = h[r6+8] (u)
  10b974:    5f 65             	r7 = h[r5+10] (u)
  10b976:    6d 70             	r5 = h[r6+-32] (u)
  10b978:    74 79             	r4 = [r7+-28] 
  10b97a:    5f 66             	r7 = h[r5+12] (u)
  10b97c:    6c 61             	r4 = h[r6+2] (u)
  10b97e:    67 00              <unknown instruction>
  10b980:    30 78             	r0 = [r3+-32] 
  10b982:    25 78             	r5 = [r2+-32] 
  10b984:    2c 20             	r12 = [sp+128]
  10b986:    25 64             	r5 = [r2+16] 
  10b988:    20 78             	r0 = [r2+-32] 
  10b98a:    20 25             	r0 = [sp+148]
  10b98c:    64 0a             	r4 = [r6++=r12] 
  10b98e:    00 55             	if (r0 == 0) goto 42 <ui_cfg_data+0x16E : 10b9ba >
  10b990:    50 44             	if (r0 == 0) goto -184 <ui_cfg_data+0x8E : 10b8da >
  10b992:    41 54             	if (r1 == 0) goto -216 <ui_cfg_data+0x70 : 10b8bc >
  10b994:    45 5f             	if (r5 == 0) goto -194 <ui_cfg_data+0x88 : 10b8d4 >
  10b996:    50 52             	if (r0 == 0) goto -156 <ui_cfg_data+0xB0 : 10b8fc >
  10b998:    4f 43             	r7 = b[r4+3] (u)
  10b99a:    45 53             	if (r5 == 0) goto -218 <ui_cfg_data+0x76 : 10b8c2 >
  10b99c:    53 2e             	r3 = 78
  10b99e:    00 65             	r0 = [r0+20] 
  10b9a0:    78 5f             	r0 = b[r7+-1] (u)
  10b9a2:    61 70             	r1 = [r6+-64] 
  10b9a4:    69 5f             	r1 = b[r6+-1] (u)
  10b9a6:    72 65             	r2 = [r7+20] 
  10b9a8:    67 69             	r7 = [r6+36] 
  10b9aa:    73 74             	r3 = [r7+-48] 
  10b9ac:    65 72             	r5 = [r6+-56] 
  10b9ae:    00 00             	nop
  10b9b0:    00 00             	nop
  10b9b2:    80 3f             	[sp+124] = r0
  10b9b4:    00 00             	nop
  10b9b6:    00 40             	if (r0 == 0) goto 0 <ui_cfg_data+0x16C : 10b9b8 >
  10b9b8:    00 00             	nop
  10b9ba:    40 40             	if (r0 == 0) goto -256 <ui_cfg_data+0x70 : 10b8bc >
  10b9bc:    00 00             	nop
  10b9be:    c0 3f             	r0 += 31


imd_clock_init.div:
  10b9c0:    01 02             	pfetch [r1]
  10b9c2:    03 04              <unknown instruction>
  10b9c4:    05 06             	r5 = h[r0++=2] (u)
  10b9c6:    07 08             	r7 = [r0++=r8] 
  10b9c8:    0a 0c             	h[r0++=r8] = r2
  10b9ca:    0e 14              <unknown instruction>
  10b9cc:    18 1c             	r0 = r1 + r1
  10b9ce:    28 38             	r8 = [sp+224]
  10b9d0:    65 72             	r5 = [r6+-56] 
  10b9d2:    72 6f             	r2 = [r7+60] 
  10b9d4:    72 20             	r2 = 192
  10b9d6:    63 6f             	r3 = [r6+60] 
  10b9d8:    64 65             	r4 = [r6+20] 
  10b9da:    3a 30             	r2 ^= 65536
  10b9dc:    78 25             	r0 = 229
  10b9de:    78 0a             	[r7++=r12] = r0
  10b9e0:    00 41             	if (r0 == 0) goto 2 <imd_clock_init.div+0x24 : 10b9e4 >
  10b9e2:    53 53             	if (r3 == 0) goto -154 <ui_cfg_data+0xFE : 10b94a >
  10b9e4:    45 52             	if (r5 == 0) goto -220 <ui_cfg_data+0xBE : 10b90a >
  10b9e6:    54 2d             	r4 = 77
  10b9e8:    46 41             	if (r6 == 0) goto -254 <ui_cfg_data+0xA0 : 10b8ec >
  10b9ea:    49 4c             	r1 = b[r4+12] (u)
  10b9ec:    44 3a             	r4 = 26
  10b9ee:    20 30             	r0 = [sp+192]
  10b9f0:    20 00             	csync
  10b9f2:    73 65             	r3 = [r7+20] 
  10b9f4:    6e 64             	r6 = h[r6+8] (u)
  10b9f6:    20 3a             	r0 = [sp+232]
  10b9f8:    20 30             	r0 = [sp+192]
  10b9fa:    78 25             	r0 = 229
  10b9fc:    30 32             	r0 |= 262144
  10b9fe:    78 28             	r0 = 232
  10ba00:    25 64             	r5 = [r2+16] 
  10ba02:    29 2c             	r9 = [sp+176]
  10ba04:    20 00             	csync
  10ba06:    41 53             	if (r1 == 0) goto -218 <ui_cfg_data+0xE2 : 10b92e >
  10ba08:    53 45             	if (r3 == 0) goto -182 <ui_cfg_data+0x108 : 10b954 >
  10ba0a:    52 54             	if (r2 == 0) goto -152 <ui_cfg_data+0x128 : 10b974 >
  10ba0c:    2d 46             	r5 = b[r2+6] (u)
  10ba0e:    41 49             	if (r1 == 0) goto -238 <ui_cfg_data+0xD6 : 10b922 >
  10ba10:    4c 44             	r4 = b[r4+4] (u)
  10ba12:    3a 20             	r2 ^= 1
  10ba14:    70 72             	r0 = [r7+-56] 
  10ba16:    69 76             	r1 = h[r6+-20] (u)
  10ba18:    20 00             	csync
  10ba1a:    41 53             	if (r1 == 0) goto -218 <ui_cfg_data+0xF6 : 10b942 >
  10ba1c:    53 45             	if (r3 == 0) goto -182 <ui_cfg_data+0x11C : 10b968 >
  10ba1e:    52 54             	if (r2 == 0) goto -152 <ui_cfg_data+0x13C : 10b988 >
  10ba20:    2d 46             	r5 = b[r2+6] (u)
  10ba22:    41 49             	if (r1 == 0) goto -238 <ui_cfg_data+0xEA : 10b936 >
  10ba24:    4c 44             	r4 = b[r4+4] (u)
  10ba26:    3a 20             	r2 ^= 1
  10ba28:    5f 5f             	r7 = b[r5+-1] (u)
  10ba2a:    74 68             	r4 = [r7+32] 
  10ba2c:    69 73             	r1 = h[r6+-26] (u)
  10ba2e:    20 00             	csync
  10ba30:    55 50             	if (r5 == 0) goto -160 <ui_cfg_data+0x146 : 10b992 >
  10ba32:    44 41             	if (r4 == 0) goto -254 <ui_cfg_data+0xEA : 10b936 >
  10ba34:    54 45             	if (r4 == 0) goto -182 <ui_cfg_data+0x134 : 10b980 >
  10ba36:    5f 53             	r7 = b[r5+-13] (u)
  10ba38:    54 41             	if (r4 == 0) goto -190 <ui_cfg_data+0x130 : 10b97c >
  10ba3a:    52 54             	if (r2 == 0) goto -152 <ui_cfg_data+0x158 : 10b9a4 >
  10ba3c:    2e 70             	r6 = h[r2+-32] (u)
  10ba3e:    61 72             	r1 = [r6+-56] 
  10ba40:    61 6d             	r1 = [r6+52] 
  10ba42:    3a 25             	r2 ^= 32
  10ba44:    64 0a             	r4 = [r6++=r12] 
  10ba46:    00 41             	if (r0 == 0) goto 2 <imd_clock_init.div+0x8A : 10ba4a >
  10ba48:    44 44             	if (r4 == 0) goto -248 <ui_cfg_data+0x106 : 10b952 >
  10ba4a:    52 3a             	r2 = 90
  10ba4c:    25 58             	if (r5 == 0) goto 176 <imd_clock_init.div+0x13E : 10bafe >
  10ba4e:    3a 25             	r2 ^= 32
  10ba50:    58 3a             	r0 = 122
  10ba52:    25 58             	if (r5 == 0) goto 176 <imd_clock_init.div+0x144 : 10bb04 >
  10ba54:    3a 25             	r2 ^= 32
  10ba56:    58 3a             	r0 = 122
  10ba58:    25 58             	if (r5 == 0) goto 176 <imd_clock_init.div+0x14A : 10bb0a >
  10ba5a:    3a 25             	r2 ^= 32
  10ba5c:    58 00              <unknown instruction>
  10ba5e:    63 70             	r3 = [r6+-64] 
  10ba60:    75 20             	r5 = 192
  10ba62:    25 64             	r5 = [r2+16] 
  10ba64:    20 66             	r0 = [r2+24] 
  10ba66:    69 6c             	r1 = h[r6+24] (u)
  10ba68:    65 3a             	r5 = 154
  10ba6a:    25 73             	r5 = [r2+-52] 
  10ba6c:    2c 20             	r12 = [sp+128]
  10ba6e:    6c 69             	r4 = h[r6+18] (u)
  10ba70:    6e 65             	r6 = h[r6+10] (u)
  10ba72:    3a 25             	r2 ^= 32
  10ba74:    64 00              <unknown instruction>
  10ba76:    5b 25             	r3 = 101
  10ba78:    73 5d             	if (r3 == 0) goto -6 <imd_clock_init.div+0xB4 : 10ba74 >
  10ba7a:    20 73             	r0 = [r2+-52] 
  10ba7c:    74 20             	r4 = 192
  10ba7e:    3a 20             	r2 ^= 1
  10ba80:    25 64             	r5 = [r2+16] 
  10ba82:    2c 20             	r12 = [sp+128]
  10ba84:    70 61             	r0 = [r7+4] 
  10ba86:    72 61             	r2 = [r7+4] 
  10ba88:    6d 20             	r5 = 160
  10ba8a:    3a 20             	r2 ^= 1
  10ba8c:    25 64             	r5 = [r2+16] 
  10ba8e:    0a 00              <unknown instruction>
  10ba90:    41 53             	if (r1 == 0) goto -218 <ui_cfg_data+0x16C : 10b9b8 >
  10ba92:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x1E : 10b9de >
  10ba94:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0x3E : 10b9fe >
  10ba96:    2d 46             	r5 = b[r2+6] (u)
  10ba98:    41 49             	if (r1 == 0) goto -238 <ui_cfg_data+0x160 : 10b9ac >
  10ba9a:    4c 44             	r4 = b[r4+4] (u)
  10ba9c:    3a 20             	r2 ^= 1
  10ba9e:    5f 5f             	r7 = b[r5+-1] (u)
  10baa0:    74 68             	r4 = [r7+32] 
  10baa2:    69 73             	r1 = h[r6+-26] (u)
  10baa4:    2d 3e             	r13 = [sp+248]
  10baa6:    6c 63             	r4 = h[r6+6] (u)
  10baa8:    64 20             	r4 = 128
  10baaa:    00 41             	if (r0 == 0) goto 2 <imd_clock_init.div+0xEE : 10baae >
  10baac:    53 53             	if (r3 == 0) goto -154 <imd_clock_init.div+0x54 : 10ba14 >
  10baae:    45 52             	if (r5 == 0) goto -220 <imd_clock_init.div+0x14 : 10b9d4 >
  10bab0:    54 2d             	r4 = 77
  10bab2:    46 41             	if (r6 == 0) goto -254 <ui_cfg_data+0x16A : 10b9b6 >
  10bab4:    49 4c             	r1 = b[r4+12] (u)
  10bab6:    44 3a             	r4 = 26
  10bab8:    20 70             	r0 = [r2+-64] 
  10baba:    72 69             	r2 = [r7+36] 
  10babc:    76 2d             	r6 = 205
  10babe:    3e 70             	r6 = h[r3+-32] (u)
  10bac0:    61 72             	r1 = [r6+-56] 
  10bac2:    61 6d             	r1 = [r6+52] 
  10bac4:    20 00             	csync
  10bac6:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0x2E : 10b9ee >
  10bac8:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x54 : 10ba14 >
  10baca:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0x74 : 10ba34 >
  10bacc:    2d 46             	r5 = b[r2+6] (u)
  10bace:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x22 : 10b9e2 >
  10bad0:    4c 44             	r4 = b[r4+4] (u)
  10bad2:    3a 20             	r2 ^= 1
  10bad4:    5f 5f             	r7 = b[r5+-1] (u)
  10bad6:    6c 63             	r4 = h[r6+6] (u)
  10bad8:    64 2d             	r4 = 141
  10bada:    3e 6c             	r6 = h[r3+24] (u)
  10badc:    63 64             	r3 = [r6+16] 
  10bade:    5f 62             	r7 = h[r5+4] (u)
  10bae0:    75 66             	r5 = [r7+24] 
  10bae2:    20 00             	csync
  10bae4:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0x4C : 10ba0c >
  10bae6:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x72 : 10ba32 >
  10bae8:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0x92 : 10ba52 >
  10baea:    2d 46             	r5 = b[r2+6] (u)
  10baec:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x40 : 10ba00 >
  10baee:    4c 44             	r4 = b[r4+4] (u)
  10baf0:    3a 20             	r2 ^= 1
  10baf2:    28 75             	r0 = h[r2+-22] (u)
  10baf4:    33 32             	r3 |= 262144
  10baf6:    29 63             	r1 = h[r2+6] (u)
  10baf8:    6f 6c             	r7 = h[r6+24] (u)
  10bafa:    6f 72             	r7 = h[r6+-28] (u)
  10bafc:    5f 38             	r7 = 120
  10bafe:    38 38             	r0 ^= 16777216
  10bb00:    20 00             	csync
  10bb02:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0x6A : 10ba2a >
  10bb04:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x90 : 10ba50 >
  10bb06:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0xB0 : 10ba70 >
  10bb08:    2d 46             	r5 = b[r2+6] (u)
  10bb0a:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x5E : 10ba1e >
  10bb0c:    4c 44             	r4 = b[r4+4] (u)
  10bb0e:    3a 20             	r2 ^= 1
  10bb10:    30 20             	r0 |= 1
  10bb12:    75 6e             	r5 = [r7+56] 
  10bb14:    72 65             	r2 = [r7+20] 
  10bb16:    63 6f             	r3 = [r6+60] 
  10bb18:    67 6e             	r7 = [r6+56] 
  10bb1a:    69 7a             	r1 = h[r6+-12] (u)
  10bb1c:    65 64             	r5 = [r6+16] 
  10bb1e:    21 00             	syscall
  10bb20:    62 73             	r2 = [r6+-52] 
  10bb22:    73 5f             	if (r3 == 0) goto -2 <imd_clock_init.div+0x162 : 10bb22 >
  10bb24:    62 65             	r2 = [r6+20] 
  10bb26:    67 69             	r7 = [r6+36] 
  10bb28:    6e 20             	r6 = 160
  10bb2a:    3a 30             	r2 ^= 65536
  10bb2c:    78 25             	r0 = 229
  10bb2e:    78 2c             	r0 = 236
  10bb30:    20 62             	r0 = [r2+8] 
  10bb32:    73 73             	r3 = [r7+-52] 
  10bb34:    5f 73             	r7 = h[r5+-26] (u)
  10bb36:    69 7a             	r1 = h[r6+-12] (u)
  10bb38:    65 20             	r5 = 128
  10bb3a:    3a 20             	r2 ^= 1
  10bb3c:    30 78             	r0 = [r3+-32] 
  10bb3e:    25 78             	r5 = [r2+-32] 
  10bb40:    0a 00              <unknown instruction>
  10bb42:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0xAA : 10ba6a >
  10bb44:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0xD0 : 10ba90 >
  10bb46:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0xF0 : 10bab0 >
  10bb48:    2d 46             	r5 = b[r2+6] (u)
  10bb4a:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x9E : 10ba5e >
  10bb4c:    4c 44             	r4 = b[r4+4] (u)
  10bb4e:    3a 20             	r2 ^= 1
  10bb50:    77 69             	r7 = [r7+36] 
  10bb52:    64 74             	r4 = [r6+-48] 
  10bb54:    68 20             	r0 = 160
  10bb56:    2c 20             	r12 = [sp+128]
  10bb58:    77 69             	r7 = [r7+36] 
  10bb5a:    64 74             	r4 = [r6+-48] 
  10bb5c:    68 20             	r0 = 160
  10bb5e:    3a 20             	r2 ^= 1
  10bb60:    25 64             	r5 = [r2+16] 
  10bb62:    0a 00              <unknown instruction>
  10bb64:    5f 5f             	r7 = b[r5+-1] (u)
  10bb66:    6c 63             	r4 = h[r6+6] (u)
  10bb68:    64 20             	r4 = 128
  10bb6a:    3a 20             	r2 ^= 1
  10bb6c:    30 78             	r0 = [r3+-32] 
  10bb6e:    25 78             	r5 = [r2+-32] 
  10bb70:    2c 20             	r12 = [sp+128]
  10bb72:    5f 5f             	r7 = b[r5+-1] (u)
  10bb74:    6c 63             	r4 = h[r6+6] (u)
  10bb76:    64 2d             	r4 = 141
  10bb78:    3e 72             	r6 = h[r3+-28] (u)
  10bb7a:    65 73             	r5 = [r6+-52] 
  10bb7c:    65 74             	r5 = [r6+-48] 
  10bb7e:    20 3a             	r0 = [sp+232]
  10bb80:    20 30             	r0 = [sp+192]
  10bb82:    78 25             	r0 = 229
  10bb84:    78 0a             	[r7++=r12] = r0
  10bb86:    00 41             	if (r0 == 0) goto 2 <imd_clock_init.div+0x1CA : 10bb8a >
  10bb88:    53 53             	if (r3 == 0) goto -154 <imd_clock_init.div+0x130 : 10baf0 >
  10bb8a:    45 52             	if (r5 == 0) goto -220 <imd_clock_init.div+0xF0 : 10bab0 >
  10bb8c:    54 2d             	r4 = 77
  10bb8e:    46 41             	if (r6 == 0) goto -254 <imd_clock_init.div+0xD2 : 10ba92 >
  10bb90:    49 4c             	r1 = b[r4+12] (u)
  10bb92:    44 3a             	r4 = 26
  10bb94:    20 6f             	r0 = [r2+60] 
  10bb96:    74 68             	r4 = [r7+32] 
  10bb98:    65 72             	r5 = [r6+-56] 
  10bb9a:    5f 6d             	r7 = h[r5+26] (u)
  10bb9c:    61 73             	r1 = [r6+-52] 
  10bb9e:    6b 5f             	r3 = b[r6+-1] (u)
  10bba0:    63 6e             	r3 = [r6+56] 
  10bba2:    74 20             	r4 = 192
  10bba4:    3d 3d             	r5 ^= 536870912
  10bba6:    20 30             	r0 = [sp+192]
  10bba8:    20 00             	csync
  10bbaa:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0x112 : 10bad2 >
  10bbac:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x138 : 10baf8 >
  10bbae:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0x158 : 10bb18 >
  10bbb0:    2d 46             	r5 = b[r2+6] (u)
  10bbb2:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x106 : 10bac6 >
  10bbb4:    4c 44             	r4 = b[r4+4] (u)
  10bbb6:    3a 20             	r2 ^= 1
  10bbb8:    68 65             	r0 = h[r6+10] (u)
  10bbba:    69 67             	r1 = h[r6+14] (u)
  10bbbc:    68 74             	r0 = h[r6+-24] (u)
  10bbbe:    20 2c             	r0 = [sp+176]
  10bbc0:    20 68             	r0 = [r2+32] 
  10bbc2:    65 69             	r5 = [r6+36] 
  10bbc4:    67 68             	r7 = [r6+32] 
  10bbc6:    74 20             	r4 = 192
  10bbc8:    3a 20             	r2 ^= 1
  10bbca:    25 64             	r5 = [r2+16] 
  10bbcc:    0a 00              <unknown instruction>
  10bbce:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0x136 : 10baf6 >
  10bbd0:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x15C : 10bb1c >
  10bbd2:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0x17C : 10bb3c >
  10bbd4:    2d 46             	r5 = b[r2+6] (u)
  10bbd6:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x12A : 10baea >
  10bbd8:    4c 44             	r4 = b[r4+4] (u)
  10bbda:    3a 20             	r2 ^= 1
  10bbdc:    73 74             	r3 = [r7+-48] 
  10bbde:    72 69             	r2 = [r7+36] 
  10bbe0:    64 65             	r4 = [r6+20] 
  10bbe2:    20 2c             	r0 = [sp+176]
  10bbe4:    20 73             	r0 = [r2+-52] 
  10bbe6:    74 72             	r4 = [r7+-56] 
  10bbe8:    69 64             	r1 = h[r6+8] (u)
  10bbea:    65 20             	r5 = 128
  10bbec:    3a 20             	r2 ^= 1
  10bbee:    25 64             	r5 = [r2+16] 
  10bbf0:    0a 00              <unknown instruction>
  10bbf2:    77 72             	r7 = [r7+-56] 
  10bbf4:    5f 73             	r7 = h[r5+-26] (u)
  10bbf6:    65 6c             	r5 = [r6+48] 
  10bbf8:    20 63             	r0 = [r2+12] 
  10bbfa:    61 6e             	r1 = [r6+56] 
  10bbfc:    27 74             	r7 = [r2+-48] 
  10bbfe:    20 62             	r0 = [r2+8] 
  10bc00:    65 20             	r5 = 128
  10bc02:    74 68             	r4 = [r7+32] 
  10bc04:    65 20             	r5 = 128
  10bc06:    73 61             	r3 = [r7+4] 
  10bc08:    6d 65             	r5 = h[r6+10] (u)
  10bc0a:    20 61             	r0 = [r2+4] 
  10bc0c:    73 20             	r3 = 192
  10bc0e:    72 64             	r2 = [r7+16] 
  10bc10:    5f 73             	r7 = h[r5+-26] (u)
  10bc12:    65 6c             	r5 = [r6+48] 
  10bc14:    2e 00             	ssync
  10bc16:    73 70             	r3 = [r7+-64] 
  10bc18:    69 20             	r1 = 160
  10bc1a:    70 69             	r0 = [r7+36] 
  10bc1c:    6e 20             	r6 = 160
  10bc1e:    72 65             	r2 = [r7+20] 
  10bc20:    73 74             	r3 = [r7+-48] 
  10bc22:    3a 25             	r2 ^= 32
  10bc24:    64 2c             	r4 = 140
  10bc26:    20 63             	r0 = [r2+12] 
  10bc28:    73 3a             	r3 = 218
  10bc2a:    25 64             	r5 = [r2+16] 
  10bc2c:    2c 20             	r12 = [sp+128]
  10bc2e:    64 63             	r4 = [r6+12] 
  10bc30:    3a 25             	r2 ^= 32
  10bc32:    64 2c             	r4 = 140
  10bc34:    20 65             	r0 = [r2+20] 
  10bc36:    6e 3a             	r6 = 186
  10bc38:    25 64             	r5 = [r2+16] 
  10bc3a:    0a 00              <unknown instruction>
  10bc3c:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0x1A4 : 10bb64 >
  10bc3e:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x1CA : 10bb8a >
  10bc40:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0x1EA : 10bbaa >
  10bc42:    2d 46             	r5 = b[r2+6] (u)
  10bc44:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x198 : 10bb58 >
  10bc46:    4c 44             	r4 = b[r4+4] (u)
  10bc48:    3a 20             	r2 ^= 1
  10bc4a:    30 20             	r0 |= 1
  10bc4c:    52 47             	if (r2 == 0) goto -178 <imd_clock_init.div+0x1DC : 10bb9c >
  10bc4e:    42 20             	r2 = 0
  10bc50:    69 73             	r1 = h[r6+-26] (u)
  10bc52:    20 6e             	r0 = [r2+56] 
  10bc54:    6f 74             	r7 = h[r6+-24] (u)
  10bc56:    20 73             	r0 = [r2+-52] 
  10bc58:    75 70             	r5 = [r7+-64] 
  10bc5a:    70 6f             	r0 = [r7+60] 
  10bc5c:    72 74             	r2 = [r7+-48] 
  10bc5e:    20 79             	r0 = [r2+-28] 
  10bc60:    65 74             	r5 = [r6+-48] 
  10bc62:    21 00             	syscall
  10bc64:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0x1CC : 10bb8c >
  10bc66:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x1F2 : 10bbb2 >
  10bc68:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0x212 : 10bbd2 >
  10bc6a:    2d 46             	r5 = b[r2+6] (u)
  10bc6c:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x1C0 : 10bb80 >
  10bc6e:    4c 44             	r4 = b[r4+4] (u)
  10bc70:    3a 20             	r2 ^= 1
  10bc72:    28 75             	r0 = h[r2+-22] (u)
  10bc74:    33 32             	r3 |= 262144
  10bc76:    29 6c             	r1 = h[r2+24] (u)
  10bc78:    69 6e             	r1 = h[r6+28] (u)
  10bc7a:    65 5f             	if (r5 == 0) goto -66 <imd_clock_init.div+0x27A : 10bc3a >
  10bc7c:    62 65             	r2 = [r6+20] 
  10bc7e:    67 69             	r7 = [r6+36] 
  10bc80:    6e 5f             	r6 = b[r6+-1] (u)
  10bc82:    63 6d             	r3 = [r6+52] 
  10bc84:    64 20             	r4 = 128
  10bc86:    25 20             	r5 = [sp+128]
  10bc88:    34 20             	r4 |= 1
  10bc8a:    3d 3d             	r5 ^= 536870912
  10bc8c:    20 30             	r0 = [sp+192]
  10bc8e:    20 00             	csync
  10bc90:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0x1F8 : 10bbb8 >
  10bc92:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x21E : 10bbde >
  10bc94:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0x23E : 10bbfe >
  10bc96:    2d 46             	r5 = b[r2+6] (u)
  10bc98:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x1EC : 10bbac >
  10bc9a:    4c 44             	r4 = b[r4+4] (u)
  10bc9c:    3a 20             	r2 ^= 1
  10bc9e:    6c 63             	r4 = h[r6+6] (u)
  10bca0:    64 5f             	if (r4 == 0) goto -66 <imd_clock_init.div+0x2A0 : 10bc60 >
  10bca2:    64 61             	r4 = [r6+4] 
  10bca4:    74 20             	r4 = 192
  10bca6:    45 72             	r5 = [r4+-56] 
  10bca8:    72 6f             	r2 = [r7+60] 
  10bcaa:    72 21             	r2 = 193
  10bcac:    20 73             	r0 = [r2+-52] 
  10bcae:    70 69             	r0 = [r7+36] 
  10bcb0:    20 69             	r0 = [r2+36] 
  10bcb2:    6f 20             	r7 = 160
  10bcb4:    6e 6f             	r6 = h[r6+30] (u)
  10bcb6:    74 20             	r4 = 192
  10bcb8:    63 6f             	r3 = [r6+60] 
  10bcba:    6e 66             	r6 = h[r6+12] (u)
  10bcbc:    69 67             	r1 = h[r6+14] (u)
  10bcbe:    00 41             	if (r0 == 0) goto 2 <imd_clock_init.div+0x302 : 10bcc2 >
  10bcc0:    53 53             	if (r3 == 0) goto -154 <imd_clock_init.div+0x268 : 10bc28 >
  10bcc2:    45 52             	if (r5 == 0) goto -220 <imd_clock_init.div+0x228 : 10bbe8 >
  10bcc4:    54 2d             	r4 = 77
  10bcc6:    46 41             	if (r6 == 0) goto -254 <imd_clock_init.div+0x20A : 10bbca >
  10bcc8:    49 4c             	r1 = b[r4+12] (u)
  10bcca:    44 3a             	r4 = 26
  10bccc:    20 28             	r0 = [sp+160]
  10bcce:    28 75             	r0 = h[r2+-22] (u)
  10bcd0:    33 32             	r3 |= 262144
  10bcd2:    29 66             	r1 = h[r2+12] (u)
  10bcd4:    72 61             	r2 = [r7+4] 
  10bcd6:    6d 65             	r5 = h[r6+10] (u)
  10bcd8:    5f 62             	r7 = h[r5+4] (u)
  10bcda:    65 67             	r5 = [r6+28] 
  10bcdc:    69 6e             	r1 = h[r6+28] (u)
  10bcde:    5f 63             	r7 = h[r5+6] (u)
  10bce0:    6d 64             	r5 = h[r6+8] (u)
  10bce2:    29 20             	r9 = [sp+128]
  10bce4:    25 20             	r5 = [sp+128]
  10bce6:    34 20             	r4 |= 1
  10bce8:    3d 3d             	r5 ^= 536870912
  10bcea:    20 30             	r0 = [sp+192]
  10bcec:    20 00             	csync
  10bcee:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0x256 : 10bc16 >
  10bcf0:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x27C : 10bc3c >
  10bcf2:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0x29C : 10bc5c >
  10bcf4:    2d 46             	r5 = b[r2+6] (u)
  10bcf6:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x24A : 10bc0a >
  10bcf8:    4c 44             	r4 = b[r4+4] (u)
  10bcfa:    3a 20             	r2 ^= 1
  10bcfc:    72 65             	r2 = [r7+20] 
  10bcfe:    66 72             	r6 = [r6+-56] 
  10bd00:    65 73             	r5 = [r6+-52] 
  10bd02:    68 5f             	r0 = b[r6+-1] (u)
  10bd04:    69 6e             	r1 = h[r6+28] (u)
  10bd06:    66 6f             	r6 = [r6+60] 
  10bd08:    2e 6c             	r6 = h[r2+24] (u)
  10bd0a:    63 64             	r3 = [r6+16] 
  10bd0c:    5f 64             	r7 = h[r5+8] (u)
  10bd0e:    72 61             	r2 = [r7+4] 
  10bd10:    77 5f             	if (r7 == 0) goto -2 <imd_clock_init.div+0x350 : 10bd10 >
  10bd12:    73 74             	r3 = [r7+-48] 
  10bd14:    61 67             	r1 = [r6+28] 
  10bd16:    65 20             	r5 = 128
  10bd18:    3d 3d             	r5 ^= 536870912
  10bd1a:    20 30             	r0 = [sp+192]
  10bd1c:    20 00             	csync
  10bd1e:    25 64             	r5 = [r2+16] 
  10bd20:    20 78             	r0 = [r2+-32] 
  10bd22:    20 25             	r0 = [sp+148]
  10bd24:    64 2c             	r4 = 140
  10bd26:    20 25             	r0 = [sp+148]
  10bd28:    64 66             	r4 = [r6+24] 
  10bd2a:    70 73             	r0 = [r7+-52] 
  10bd2c:    2c 20             	r12 = [sp+128]
  10bd2e:    66 61             	r6 = [r6+4] 
  10bd30:    63 74             	r3 = [r6+-48] 
  10bd32:    6f 72             	r7 = h[r6+-28] (u)
  10bd34:    20 3a             	r0 = [sp+232]
  10bd36:    20 25             	r0 = [sp+148]
  10bd38:    64 2e             	r4 = 142
  10bd3a:    25 64             	r5 = [r2+16] 
  10bd3c:    2c 20             	r12 = [sp+128]
  10bd3e:    74 61             	r4 = [r7+4] 
  10bd40:    72 67             	r2 = [r7+28] 
  10bd42:    65 74             	r5 = [r6+-48] 
  10bd44:    5f 63             	r7 = h[r5+6] (u)
  10bd46:    6c 6b             	r4 = h[r6+22] (u)
  10bd48:    20 3a             	r0 = [sp+232]
  10bd4a:    20 25             	r0 = [sp+148]
  10bd4c:    64 0a             	r4 = [r6++=r12] 
  10bd4e:    00 41             	if (r0 == 0) goto 2 <imd_clock_init.div+0x392 : 10bd52 >
  10bd50:    53 53             	if (r3 == 0) goto -154 <imd_clock_init.div+0x2F8 : 10bcb8 >
  10bd52:    45 52             	if (r5 == 0) goto -220 <imd_clock_init.div+0x2B8 : 10bc78 >
  10bd54:    54 2d             	r4 = 77
  10bd56:    46 41             	if (r6 == 0) goto -254 <imd_clock_init.div+0x29A : 10bc5a >
  10bd58:    49 4c             	r1 = b[r4+12] (u)
  10bd5a:    44 3a             	r4 = 26
  10bd5c:    20 74             	r0 = [r2+-48] 
  10bd5e:    61 72             	r1 = [r6+-56] 
  10bd60:    67 65             	r7 = [r6+20] 
  10bd62:    74 5f             	if (r4 == 0) goto -2 <imd_clock_init.div+0x3A2 : 10bd62 >
  10bd64:    63 6c             	r3 = [r6+48] 
  10bd66:    6b 20             	r3 = 160
  10bd68:    45 72             	r5 = [r4+-56] 
  10bd6a:    72 6f             	r2 = [r7+60] 
  10bd6c:    72 21             	r2 = 193
  10bd6e:    20 69             	r0 = [r2+36] 
  10bd70:    6d 64             	r5 = h[r6+8] (u)
  10bd72:    20 74             	r0 = [r2+-48] 
  10bd74:    61 72             	r1 = [r6+-56] 
  10bd76:    67 65             	r7 = [r6+20] 
  10bd78:    74 20             	r4 = 192
  10bd7a:    63 6c             	r3 = [r6+48] 
  10bd7c:    6f 63             	r7 = h[r6+6] (u)
  10bd7e:    6b 20             	r3 = 160
  10bd80:    69 73             	r1 = h[r6+-26] (u)
  10bd82:    20 30             	r0 = [sp+192]
  10bd84:    00 41             	if (r0 == 0) goto 2 <imd_clock_init.div+0x3C8 : 10bd88 >
  10bd86:    53 53             	if (r3 == 0) goto -154 <imd_clock_init.div+0x32E : 10bcee >
  10bd88:    45 52             	if (r5 == 0) goto -220 <imd_clock_init.div+0x2EE : 10bcae >
  10bd8a:    54 2d             	r4 = 77
  10bd8c:    46 41             	if (r6 == 0) goto -254 <imd_clock_init.div+0x2D0 : 10bc90 >
  10bd8e:    49 4c             	r1 = b[r4+12] (u)
  10bd90:    44 3a             	r4 = 26
  10bd92:    20 21             	r0 = [sp+132]
  10bd94:    6d 65             	r5 = h[r6+10] (u)
  10bd96:    6d 63             	r5 = h[r6+6] (u)
  10bd98:    6d 70             	r5 = h[r6+-32] (u)
  10bd9a:    28 26             	r8 = [sp+152]
  10bd9c:    72 65             	r2 = [r7+20] 
  10bd9e:    63 74             	r3 = [r6+-48] 
  10bda0:    2c 20             	r12 = [sp+128]
  10bda2:    26 64             	r6 = [r2+16] 
  10bda4:    72 61             	r2 = [r7+4] 
  10bda6:    77 2c             	r7 = 204
  10bda8:    20 73             	r0 = [r2+-52] 
  10bdaa:    69 7a             	r1 = h[r6+-12] (u)
  10bdac:    65 6f             	r5 = [r6+60] 
  10bdae:    66 28             	r6 = 136
  10bdb0:    73 74             	r3 = [r7+-48] 
  10bdb2:    72 75             	r2 = [r7+-44] 
  10bdb4:    63 74             	r3 = [r6+-48] 
  10bdb6:    20 72             	r0 = [r2+-56] 
  10bdb8:    65 63             	r5 = [r6+12] 
  10bdba:    74 29             	r4 = 201
  10bdbc:    29 20             	r9 = [sp+128]
  10bdbe:    00 5b             	if (r0 == 0) goto 54 <imd_clock_init.div+0x436 : 10bdf6 >
  10bdc0:    25 73             	r5 = [r2+-52] 
  10bdc2:    5d 20             	r5 = 96
  10bdc4:    30 78             	r0 = [r3+-32] 
  10bdc6:    25 78             	r5 = [r2+-32] 
  10bdc8:    2c 20             	r12 = [sp+128]
  10bdca:    30 78             	r0 = [r3+-32] 
  10bdcc:    25 78             	r5 = [r2+-32] 
  10bdce:    2c 20             	r12 = [sp+128]
  10bdd0:    30 78             	r0 = [r3+-32] 
  10bdd2:    25 78             	r5 = [r2+-32] 
  10bdd4:    2c 20             	r12 = [sp+128]
  10bdd6:    30 78             	r0 = [r3+-32] 
  10bdd8:    25 78             	r5 = [r2+-32] 
  10bdda:    2c 20             	r12 = [sp+128]
  10bddc:    30 78             	r0 = [r3+-32] 
  10bdde:    25 78             	r5 = [r2+-32] 
  10bde0:    2c 20             	r12 = [sp+128]
  10bde2:    30 78             	r0 = [r3+-32] 
  10bde4:    25 78             	r5 = [r2+-32] 
  10bde6:    2c 20             	r12 = [sp+128]
  10bde8:    30 78             	r0 = [r3+-32] 
  10bdea:    25 78             	r5 = [r2+-32] 
  10bdec:    2c 20             	r12 = [sp+128]
  10bdee:    30 78             	r0 = [r3+-32] 
  10bdf0:    25 78             	r5 = [r2+-32] 
  10bdf2:    2c 20             	r12 = [sp+128]
  10bdf4:    30 78             	r0 = [r3+-32] 
  10bdf6:    25 78             	r5 = [r2+-32] 
  10bdf8:    0a 00              <unknown instruction>
  10bdfa:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0x362 : 10bd22 >
  10bdfc:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x388 : 10bd48 >
  10bdfe:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0x3A8 : 10bd68 >
  10be00:    2d 46             	r5 = b[r2+6] (u)
  10be02:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x356 : 10bd16 >
  10be04:    4c 44             	r4 = b[r4+4] (u)
  10be06:    3a 20             	r2 ^= 1
  10be08:    28 63             	r0 = h[r2+6] (u)
  10be0a:    6d 64             	r5 = h[r6+8] (u)
  10be0c:    5f 63             	r7 = h[r5+6] (u)
  10be0e:    6e 74             	r6 = h[r6+-24] (u)
  10be10:    20 3e             	r0 = [sp+248]
  10be12:    3d 20             	r5 ^= 1
  10be14:    31 29             	r1 |= 512
  10be16:    20 26             	r0 = [sp+152]
  10be18:    26 20             	r6 = [sp+128]
  10be1a:    28 63             	r0 = h[r2+6] (u)
  10be1c:    6d 64             	r5 = h[r6+8] (u)
  10be1e:    5f 63             	r7 = h[r5+6] (u)
  10be20:    6e 74             	r6 = h[r6+-24] (u)
  10be22:    20 3c             	r0 = [sp+240]
  10be24:    3d 20             	r5 ^= 1
  10be26:    34 29             	r4 |= 512
  10be28:    20 2c             	r0 = [sp+176]
  10be2a:    20 63             	r0 = [r2+12] 
  10be2c:    6d 64             	r5 = h[r6+8] (u)
  10be2e:    20 6e             	r0 = [r2+56] 
  10be30:    75 6d             	r5 = [r7+52] 
  10be32:    20 65             	r0 = [r2+20] 
  10be34:    72 72             	r2 = [r7+-56] 
  10be36:    21 00             	syscall
  10be38:    46 3a             	r6 = 26
  10be3a:    5c 6a             	r4 = h[r5+20] (u)
  10be3c:    69 61             	r1 = h[r6+2] (u)
  10be3e:    6e 6c             	r6 = h[r6+24] (u)
  10be40:    6f 6e             	r7 = h[r6+28] (u)
  10be42:    67 5c             	if (r7 == 0) goto -72 <imd_clock_init.div+0x43C : 10bdfc >
  10be44:    73 64             	r3 = [r7+16] 
  10be46:    6b 5c             	r3 = b[r6+-4] (u)
  10be48:    61 63             	r1 = [r6+12] 
  10be4a:    37 30             	r7 |= 65536
  10be4c:    31 5f             	if (r1 == 0) goto 254 <imd_clock_init.div+0x58C : 10bf4c >
  10be4e:    75 62             	r5 = [r7+8] 
  10be50:    6f 6f             	r7 = h[r6+30] (u)
  10be52:    74 5f             	if (r4 == 0) goto -2 <imd_clock_init.div+0x492 : 10be52 >
  10be54:    6c 63             	r4 = h[r6+6] (u)
  10be56:    64 5f             	if (r4 == 0) goto -66 <imd_clock_init.div+0x456 : 10be16 >
  10be58:    75 69             	r5 = [r7+36] 
  10be5a:    5f 30             	r7 = 112
  10be5c:    2e 30             	r14 = [sp+192]
  10be5e:    2e 31             	r14 = [sp+196]
  10be60:    5c 63             	r4 = h[r5+6] (u)
  10be62:    62 70             	r2 = [r6+-64] 
  10be64:    5f 6f             	r7 = h[r5+30] (u)
  10be66:    75 74             	r5 = [r7+-48] 
  10be68:    5c 6c             	r4 = h[r5+24] (u)
  10be6a:    69 62             	r1 = h[r6+4] (u)
  10be6c:    5c 69             	r4 = h[r5+18] (u)
  10be6e:    6d 64             	r5 = h[r6+8] (u)
  10be70:    5c 69             	r4 = h[r5+18] (u)
  10be72:    6d 64             	r5 = h[r6+8] (u)
  10be74:    2e 63             	r6 = h[r2+6] (u)
  10be76:    00 41             	if (r0 == 0) goto 2 <imd_clock_init.div+0x4BA : 10be7a >
  10be78:    53 53             	if (r3 == 0) goto -154 <imd_clock_init.div+0x420 : 10bde0 >
  10be7a:    45 52             	if (r5 == 0) goto -220 <imd_clock_init.div+0x3E0 : 10bda0 >
  10be7c:    54 2d             	r4 = 77
  10be7e:    46 41             	if (r6 == 0) goto -254 <imd_clock_init.div+0x3C2 : 10bd82 >
  10be80:    49 4c             	r1 = b[r4+12] (u)
  10be82:    44 3a             	r4 = 26
  10be84:    20 28             	r0 = [sp+160]
  10be86:    70 61             	r0 = [r7+4] 
  10be88:    72 61             	r2 = [r7+4] 
  10be8a:    5f 63             	r7 = h[r5+6] (u)
  10be8c:    6e 74             	r6 = h[r6+-24] (u)
  10be8e:    20 3e             	r0 = [sp+248]
  10be90:    3d 20             	r5 ^= 1
  10be92:    31 29             	r1 |= 512
  10be94:    20 26             	r0 = [sp+152]
  10be96:    26 20             	r6 = [sp+128]
  10be98:    28 70             	r0 = h[r2+-32] (u)
  10be9a:    61 72             	r1 = [r6+-56] 
  10be9c:    61 5f             	if (r1 == 0) goto -66 <imd_clock_init.div+0x49C : 10be5c >
  10be9e:    63 6e             	r3 = [r6+56] 
  10bea0:    74 20             	r4 = 192
  10bea2:    3c 3d             	r4 ^= 536870912
  10bea4:    20 34             	r0 = [sp+208]
  10bea6:    29 20             	r9 = [sp+128]
  10bea8:    2c 20             	r12 = [sp+128]
  10beaa:    70 61             	r0 = [r7+4] 
  10beac:    72 61             	r2 = [r7+4] 
  10beae:    20 6e             	r0 = [r2+56] 
  10beb0:    75 6d             	r5 = [r7+52] 
  10beb2:    20 65             	r0 = [r2+20] 
  10beb4:    72 72             	r2 = [r7+-56] 
  10beb6:    21 00             	syscall
  10beb8:    46 3a             	r6 = 26
  10beba:    5c 6a             	r4 = h[r5+20] (u)
  10bebc:    69 61             	r1 = h[r6+2] (u)
  10bebe:    6e 6c             	r6 = h[r6+24] (u)
  10bec0:    6f 6e             	r7 = h[r6+28] (u)
  10bec2:    67 5c             	if (r7 == 0) goto -72 <imd_clock_init.div+0x4BC : 10be7c >
  10bec4:    73 64             	r3 = [r7+16] 
  10bec6:    6b 5c             	r3 = b[r6+-4] (u)
  10bec8:    61 63             	r1 = [r6+12] 
  10beca:    37 30             	r7 |= 65536
  10becc:    31 5f             	if (r1 == 0) goto 254 <imd_clock_init.div+0x60C : 10bfcc >
  10bece:    75 62             	r5 = [r7+8] 
  10bed0:    6f 6f             	r7 = h[r6+30] (u)
  10bed2:    74 5f             	if (r4 == 0) goto -2 <imd_clock_init.div+0x512 : 10bed2 >
  10bed4:    6c 63             	r4 = h[r6+6] (u)
  10bed6:    64 5f             	if (r4 == 0) goto -66 <imd_clock_init.div+0x4D6 : 10be96 >
  10bed8:    75 69             	r5 = [r7+36] 
  10beda:    5f 30             	r7 = 112
  10bedc:    2e 30             	r14 = [sp+192]
  10bede:    2e 31             	r14 = [sp+196]
  10bee0:    5c 63             	r4 = h[r5+6] (u)
  10bee2:    62 70             	r2 = [r6+-64] 
  10bee4:    5f 6f             	r7 = h[r5+30] (u)
  10bee6:    75 74             	r5 = [r7+-48] 
  10bee8:    5c 6c             	r4 = h[r5+24] (u)
  10beea:    69 62             	r1 = h[r6+4] (u)
  10beec:    5c 69             	r4 = h[r5+18] (u)
  10beee:    6d 64             	r5 = h[r6+8] (u)
  10bef0:    5c 69             	r4 = h[r5+18] (u)
  10bef2:    6d 64             	r5 = h[r6+8] (u)
  10bef4:    5f 6d             	r7 = h[r5+26] (u)
  10bef6:    63 75             	r3 = [r6+-44] 
  10bef8:    2e 63             	r6 = h[r2+6] (u)
  10befa:    00 46             	if (r0 == 0) goto 12 <imd_clock_init.div+0x548 : 10bf08 >
  10befc:    3a 5c             	r2 = b[r3+-4] (u)
  10befe:    6a 69             	r2 = h[r6+18] (u)
  10bf00:    61 6e             	r1 = [r6+56] 
  10bf02:    6c 6f             	r4 = h[r6+30] (u)
  10bf04:    6e 67             	r6 = h[r6+14] (u)
  10bf06:    5c 73             	r4 = h[r5+-26] (u)
  10bf08:    64 6b             	r4 = [r6+44] 
  10bf0a:    5c 61             	r4 = h[r5+2] (u)
  10bf0c:    63 37             	r3 = 151
  10bf0e:    30 31             	r0 |= 131072
  10bf10:    5f 75             	r7 = h[r5+-22] (u)
  10bf12:    62 6f             	r2 = [r6+60] 
  10bf14:    6f 74             	r7 = h[r6+-24] (u)
  10bf16:    5f 6c             	r7 = h[r5+24] (u)
  10bf18:    63 64             	r3 = [r6+16] 
  10bf1a:    5f 75             	r7 = h[r5+-22] (u)
  10bf1c:    69 5f             	r1 = b[r6+-1] (u)
  10bf1e:    30 2e             	r0 |= 16384
  10bf20:    30 2e             	r0 |= 16384
  10bf22:    31 5c             	if (r1 == 0) goto 248 <imd_clock_init.div+0x65C : 10c01c >
  10bf24:    63 62             	r3 = [r6+8] 
  10bf26:    70 5f             	if (r0 == 0) goto -2 <imd_clock_init.div+0x566 : 10bf26 >
  10bf28:    6f 75             	r7 = h[r6+-22] (u)
  10bf2a:    74 5c             	if (r4 == 0) goto -8 <imd_clock_init.div+0x564 : 10bf24 >
  10bf2c:    6c 69             	r4 = h[r6+18] (u)
  10bf2e:    62 5c             	if (r2 == 0) goto -72 <imd_clock_init.div+0x528 : 10bee8 >
  10bf30:    69 6d             	r1 = h[r6+26] (u)
  10bf32:    64 5c             	if (r4 == 0) goto -72 <imd_clock_init.div+0x52C : 10beec >
  10bf34:    69 6d             	r1 = h[r6+26] (u)
  10bf36:    64 5f             	if (r4 == 0) goto -66 <imd_clock_init.div+0x536 : 10bef6 >
  10bf38:    72 67             	r2 = [r7+28] 
  10bf3a:    62 2e             	r2 = 142
  10bf3c:    63 00              <unknown instruction>
  10bf3e:    46 3a             	r6 = 26
  10bf40:    5c 6a             	r4 = h[r5+20] (u)
  10bf42:    69 61             	r1 = h[r6+2] (u)
  10bf44:    6e 6c             	r6 = h[r6+24] (u)
  10bf46:    6f 6e             	r7 = h[r6+28] (u)
  10bf48:    67 5c             	if (r7 == 0) goto -72 <imd_clock_init.div+0x542 : 10bf02 >
  10bf4a:    73 64             	r3 = [r7+16] 
  10bf4c:    6b 5c             	r3 = b[r6+-4] (u)
  10bf4e:    61 63             	r1 = [r6+12] 
  10bf50:    37 30             	r7 |= 65536
  10bf52:    31 5f             	if (r1 == 0) goto 254 <imd_clock_init.div+0x692 : 10c052 >
  10bf54:    75 62             	r5 = [r7+8] 
  10bf56:    6f 6f             	r7 = h[r6+30] (u)
  10bf58:    74 5f             	if (r4 == 0) goto -2 <imd_clock_init.div+0x598 : 10bf58 >
  10bf5a:    6c 63             	r4 = h[r6+6] (u)
  10bf5c:    64 5f             	if (r4 == 0) goto -66 <imd_clock_init.div+0x55C : 10bf1c >
  10bf5e:    75 69             	r5 = [r7+36] 
  10bf60:    5f 30             	r7 = 112
  10bf62:    2e 30             	r14 = [sp+192]
  10bf64:    2e 31             	r14 = [sp+196]
  10bf66:    5c 63             	r4 = h[r5+6] (u)
  10bf68:    62 70             	r2 = [r6+-64] 
  10bf6a:    5f 6f             	r7 = h[r5+30] (u)
  10bf6c:    75 74             	r5 = [r7+-48] 
  10bf6e:    5c 6c             	r4 = h[r5+24] (u)
  10bf70:    69 62             	r1 = h[r6+4] (u)
  10bf72:    5c 69             	r4 = h[r5+18] (u)
  10bf74:    6d 64             	r5 = h[r6+8] (u)
  10bf76:    5c 69             	r4 = h[r5+18] (u)
  10bf78:    6d 64             	r5 = h[r6+8] (u)
  10bf7a:    5f 73             	r7 = h[r5+-26] (u)
  10bf7c:    70 69             	r0 = [r7+36] 
  10bf7e:    2e 63             	r6 = h[r2+6] (u)
  10bf80:    00 41             	if (r0 == 0) goto 2 <imd_clock_init.div+0x5C4 : 10bf84 >
  10bf82:    53 53             	if (r3 == 0) goto -154 <imd_clock_init.div+0x52A : 10beea >
  10bf84:    45 52             	if (r5 == 0) goto -220 <imd_clock_init.div+0x4EA : 10beaa >
  10bf86:    54 2d             	r4 = 77
  10bf88:    46 41             	if (r6 == 0) goto -254 <imd_clock_init.div+0x4CC : 10be8c >
  10bf8a:    49 4c             	r1 = b[r4+12] (u)
  10bf8c:    44 3a             	r4 = 26
  10bf8e:    20 6c             	r0 = [r2+48] 
  10bf90:    63 64             	r3 = [r6+16] 
  10bf92:    5f 69             	r7 = h[r5+18] (u)
  10bf94:    6e 74             	r6 = h[r6+-24] (u)
  10bf96:    65 72             	r5 = [r6+-56] 
  10bf98:    66 61             	r6 = [r6+4] 
  10bf9a:    63 65             	r3 = [r6+20] 
  10bf9c:    5f 62             	r7 = h[r5+4] (u)
  10bf9e:    65 67             	r5 = [r6+28] 
  10bfa0:    69 6e             	r1 = h[r6+28] (u)
  10bfa2:    20 21             	r0 = [sp+132]
  10bfa4:    3d 20             	r5 ^= 1
  10bfa6:    6c 63             	r4 = h[r6+6] (u)
  10bfa8:    64 5f             	if (r4 == 0) goto -66 <imd_clock_init.div+0x5A8 : 10bf68 >
  10bfaa:    69 6e             	r1 = h[r6+28] (u)
  10bfac:    74 65             	r4 = [r7+20] 
  10bfae:    72 66             	r2 = [r7+24] 
  10bfb0:    61 63             	r1 = [r6+12] 
  10bfb2:    65 5f             	if (r5 == 0) goto -66 <imd_clock_init.div+0x5B2 : 10bf72 >
  10bfb4:    65 6e             	r5 = [r6+56] 
  10bfb6:    64 20             	r4 = 128
  10bfb8:    64 6f             	r4 = [r6+60] 
  10bfba:    6e 27             	r6 = 167
  10bfbc:    74 20             	r4 = 192
  10bfbe:    66 69             	r6 = [r6+36] 
  10bfc0:    6e 64             	r6 = h[r6+8] (u)
  10bfc2:    20 6c             	r0 = [r2+48] 
  10bfc4:    63 64             	r3 = [r6+16] 
  10bfc6:    20 69             	r0 = [r2+36] 
  10bfc8:    6e 74             	r6 = h[r6+-24] (u)
  10bfca:    65 72             	r5 = [r6+-56] 
  10bfcc:    66 61             	r6 = [r6+4] 
  10bfce:    63 65             	r3 = [r6+20] 
  10bfd0:    21 00             	syscall
  10bfd2:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0x53A : 10befa >
  10bfd4:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x560 : 10bf20 >
  10bfd6:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0x580 : 10bf40 >
  10bfd8:    2d 46             	r5 = b[r2+6] (u)
  10bfda:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x52E : 10beee >
  10bfdc:    4c 44             	r4 = b[r4+4] (u)
  10bfde:    3a 20             	r2 ^= 1
  10bfe0:    28 78             	r0 = h[r2+-16] (u)
  10bfe2:    73 74             	r3 = [r7+-48] 
  10bfe4:    61 72             	r1 = [r6+-56] 
  10bfe6:    74 20             	r4 = 192
  10bfe8:    25 20             	r5 = [sp+128]
  10bfea:    5f 5f             	r7 = b[r5+-1] (u)
  10bfec:    69 6d             	r1 = h[r6+26] (u)
  10bfee:    64 2d             	r4 = 141
  10bff0:    3e 72             	r6 = h[r3+-28] (u)
  10bff2:    6f 77             	r7 = h[r6+-18] (u)
  10bff4:    5f 61             	r7 = h[r5+2] (u)
  10bff6:    6c 69             	r4 = h[r6+18] (u)
  10bff8:    67 6e             	r7 = [r6+56] 
  10bffa:    29 20             	r9 = [sp+128]
  10bffc:    3d 3d             	r5 ^= 536870912
  10bffe:    20 30             	r0 = [sp+192]
  10c000:    20 2c             	r0 = [sp+176]
  10c002:    20 78             	r0 = [r2+-32] 
  10c004:    73 74             	r3 = [r7+-48] 
  10c006:    61 72             	r1 = [r6+-56] 
  10c008:    74 20             	r4 = 192
  10c00a:    3a 20             	r2 ^= 1
  10c00c:    25 64             	r5 = [r2+16] 
  10c00e:    2c 20             	r12 = [sp+128]
  10c010:    5f 5f             	r7 = b[r5+-1] (u)
  10c012:    69 6d             	r1 = h[r6+26] (u)
  10c014:    64 2d             	r4 = 141
  10c016:    3e 72             	r6 = h[r3+-28] (u)
  10c018:    6f 77             	r7 = h[r6+-18] (u)
  10c01a:    5f 61             	r7 = h[r5+2] (u)
  10c01c:    6c 69             	r4 = h[r6+18] (u)
  10c01e:    67 6e             	r7 = [r6+56] 
  10c020:    20 3a             	r0 = [sp+232]
  10c022:    20 25             	r0 = [sp+148]
  10c024:    64 0a             	r4 = [r6++=r12] 
  10c026:    00 41             	if (r0 == 0) goto 2 <imd_clock_init.div+0x66A : 10c02a >
  10c028:    53 53             	if (r3 == 0) goto -154 <imd_clock_init.div+0x5D0 : 10bf90 >
  10c02a:    45 52             	if (r5 == 0) goto -220 <imd_clock_init.div+0x590 : 10bf50 >
  10c02c:    54 2d             	r4 = 77
  10c02e:    46 41             	if (r6 == 0) goto -254 <imd_clock_init.div+0x572 : 10bf32 >
  10c030:    49 4c             	r1 = b[r4+12] (u)
  10c032:    44 3a             	r4 = 26
  10c034:    20 28             	r0 = [sp+160]
  10c036:    79 73             	r1 = h[r7+-26] (u)
  10c038:    74 61             	r4 = [r7+4] 
  10c03a:    72 74             	r2 = [r7+-48] 
  10c03c:    20 25             	r0 = [sp+148]
  10c03e:    20 5f             	if (r0 == 0) goto 190 <imd_clock_init.div+0x73E : 10c0fe >
  10c040:    5f 69             	r7 = h[r5+18] (u)
  10c042:    6d 64             	r5 = h[r6+8] (u)
  10c044:    2d 3e             	r13 = [sp+248]
  10c046:    63 6f             	r3 = [r6+60] 
  10c048:    6c 75             	r4 = h[r6+-22] (u)
  10c04a:    6d 6e             	r5 = h[r6+28] (u)
  10c04c:    5f 61             	r7 = h[r5+2] (u)
  10c04e:    6c 69             	r4 = h[r6+18] (u)
  10c050:    67 6e             	r7 = [r6+56] 
  10c052:    29 20             	r9 = [sp+128]
  10c054:    3d 3d             	r5 ^= 536870912
  10c056:    20 30             	r0 = [sp+192]
  10c058:    20 2c             	r0 = [sp+176]
  10c05a:    20 79             	r0 = [r2+-28] 
  10c05c:    73 74             	r3 = [r7+-48] 
  10c05e:    61 72             	r1 = [r6+-56] 
  10c060:    74 20             	r4 = 192
  10c062:    3a 20             	r2 ^= 1
  10c064:    25 64             	r5 = [r2+16] 
  10c066:    2c 20             	r12 = [sp+128]
  10c068:    5f 5f             	r7 = b[r5+-1] (u)
  10c06a:    69 6d             	r1 = h[r6+26] (u)
  10c06c:    64 2d             	r4 = 141
  10c06e:    3e 63             	r6 = h[r3+6] (u)
  10c070:    6f 6c             	r7 = h[r6+24] (u)
  10c072:    75 6d             	r5 = [r7+52] 
  10c074:    6e 5f             	r6 = b[r6+-1] (u)
  10c076:    61 6c             	r1 = [r6+48] 
  10c078:    69 67             	r1 = h[r6+14] (u)
  10c07a:    6e 20             	r6 = 160
  10c07c:    3a 20             	r2 ^= 1
  10c07e:    25 64             	r5 = [r2+16] 
  10c080:    0a 00              <unknown instruction>
  10c082:    44 3a             	r4 = 26
  10c084:    5c e6              <unknown instruction>
  10c086:    89 8b             	r1 = sp + 11
  10c088:    e8 a1             	r0 = r6 >>> 1
  10c08a:    a8 e5              <unknown instruction>
  10c08c:    85 ac             	r5 = r0 >> 12
  10c08e:    e7 89             	goto -110 <imd_clock_init.div+0x662 : 10c022 >
  10c090:    88 e7              <unknown instruction>
  10c092:    a8 8b             	r0 = sp + 43
  10c094:    e5 ba             	r5 = r6 >> 26
  10c096:    8f 5c             	b[r0+-4] = r7
  10c098:    61 63             	r1 = [r6+12] 
  10c09a:    37 30             	r7 |= 65536
  10c09c:    31 6e             	r1 = [r3+56] 
  10c09e:    5f 77             	r7 = h[r5+-18] (u)
  10c0a0:    61 74             	r1 = [r6+-48] 
  10c0a2:    63 68             	r3 = [r6+32] 
  10c0a4:    5f 72             	r7 = h[r5+-28] (u)
  10c0a6:    65 6c             	r5 = [r6+48] 
  10c0a8:    65 61             	r5 = [r6+4] 
  10c0aa:    73 65             	r3 = [r7+20] 
  10c0ac:    5f 76             	r7 = h[r5+-20] (u)
  10c0ae:    32 2e             	r2 |= 16384
  10c0b0:    30 2e             	r0 |= 16384
  10c0b2:    31 76             	r1 = [r3+-40] 
  10c0b4:    5c 63             	r4 = h[r5+6] (u)
  10c0b6:    6f 64             	r7 = h[r6+8] (u)
  10c0b8:    65 5c             	if (r5 == 0) goto -72 <imd_clock_init.div+0x6B2 : 10c072 >
  10c0ba:    6c 6f             	r4 = h[r6+30] (u)
  10c0bc:    61 64             	r1 = [r6+16] 
  10c0be:    65 72             	r5 = [r6+-56] 
  10c0c0:    5c 75             	r4 = h[r5+-22] (u)
  10c0c2:    70 64             	r0 = [r7+16] 
  10c0c4:    61 74             	r1 = [r6+-48] 
  10c0c6:    65 5f             	if (r5 == 0) goto -66 <imd_clock_init.div+0x6C6 : 10c086 >
  10c0c8:    75 69             	r5 = [r7+36] 
  10c0ca:    5c 63             	r4 = h[r5+6] (u)
  10c0cc:    70 75             	r0 = [r7+-44] 
  10c0ce:    5c 62             	r4 = h[r5+4] (u)
  10c0d0:    72 32             	r2 = 210
  10c0d2:    38 5c             	r0 = b[r3+-4] (u)
  10c0d4:    75 69             	r5 = [r7+36] 
  10c0d6:    5f 65             	r7 = h[r5+10] (u)
  10c0d8:    6e 74             	r6 = h[r6+-24] (u)
  10c0da:    72 79             	r2 = [r7+-28] 
  10c0dc:    2e 63             	r6 = h[r2+6] (u)
  10c0de:    00 44             	if (r0 == 0) goto 8 <imd_clock_init.div+0x728 : 10c0e8 >
  10c0e0:    3a 5c             	r2 = b[r3+-4] (u)
  10c0e2:    e6 89             	goto -1134 <imd_clock_init.div+0x2B6 : 10bc76 >
  10c0e4:    8b e8              <unknown instruction>
  10c0e6:    a1 a8             	r1 = r2 >> 8
  10c0e8:    e5 85             	goto 1930 <refresh_info+0x2C : 10c874 >
  10c0ea:    ac e7              <unknown instruction>
  10c0ec:    89 88             	r1 = sp + 8
  10c0ee:    e7 a8             	r7 = r6 >> 8
  10c0f0:    8b e5 ba 8f       	r9_r8 = r11 *|*|*|* 95 (m)
  10c0f4:    5c 61             	r4 = h[r5+2] (u)
  10c0f6:    63 37             	r3 = 151
  10c0f8:    30 31             	r0 |= 131072
  10c0fa:    6e 5f             	r6 = b[r6+-1] (u)
  10c0fc:    77 61             	r7 = [r7+4] 
  10c0fe:    74 63             	r4 = [r7+12] 
  10c100:    68 5f             	r0 = b[r6+-1] (u)
  10c102:    72 65             	r2 = [r7+20] 
  10c104:    6c 65             	r4 = h[r6+10] (u)
  10c106:    61 73             	r1 = [r6+-52] 
  10c108:    65 5f             	if (r5 == 0) goto -66 <imd_clock_init.div+0x708 : 10c0c8 >
  10c10a:    76 32             	r6 = 210
  10c10c:    2e 30             	r14 = [sp+192]
  10c10e:    2e 31             	r14 = [sp+196]
  10c110:    76 5c             	if (r6 == 0) goto -8 <imd_clock_init.div+0x74A : 10c10a >
  10c112:    63 6f             	r3 = [r6+60] 
  10c114:    64 65             	r4 = [r6+20] 
  10c116:    5c 6c             	r4 = h[r5+24] (u)
  10c118:    6f 61             	r7 = h[r6+2] (u)
  10c11a:    64 65             	r4 = [r6+20] 
  10c11c:    72 5c             	if (r2 == 0) goto -8 <imd_clock_init.div+0x756 : 10c116 >
  10c11e:    75 70             	r5 = [r7+-64] 
  10c120:    64 61             	r4 = [r6+4] 
  10c122:    74 65             	r4 = [r7+20] 
  10c124:    5f 75             	r7 = h[r5+-22] (u)
  10c126:    69 5c             	r1 = b[r6+-4] (u)
  10c128:    6c 69             	r4 = h[r6+18] (u)
  10c12a:    62 5c             	if (r2 == 0) goto -72 <imd_clock_init.div+0x724 : 10c0e4 >
  10c12c:    75 69             	r5 = [r7+36] 
  10c12e:    5c 75             	r4 = h[r5+-22] (u)
  10c130:    69 5f             	r1 = b[r6+-1] (u)
  10c132:    64 72             	r4 = [r6+-56] 
  10c134:    61 77             	r1 = [r6+-36] 
  10c136:    5f 61             	r7 = h[r5+2] (u)
  10c138:    72 63             	r2 = [r7+12] 
  10c13a:    2e 63             	r6 = h[r2+6] (u)
  10c13c:    00 41             	if (r0 == 0) goto 2 <imd_clock_init.div+0x780 : 10c140 >
  10c13e:    53 53             	if (r3 == 0) goto -154 <imd_clock_init.div+0x6E6 : 10c0a6 >
  10c140:    45 52             	if (r5 == 0) goto -220 <imd_clock_init.div+0x6A6 : 10c066 >
  10c142:    54 2d             	r4 = 77
  10c144:    46 41             	if (r6 == 0) goto -254 <imd_clock_init.div+0x688 : 10c048 >
  10c146:    49 4c             	r1 = b[r4+12] (u)
  10c148:    44 3a             	r4 = 26
  10c14a:    20 28             	r0 = [sp+160]
  10c14c:    28 78             	r0 = h[r2+-16] (u)
  10c14e:    65 6e             	r5 = [r6+56] 
  10c150:    64 20             	r4 = 128
  10c152:    2d 20             	r13 = [sp+128]
  10c154:    78 73             	r0 = h[r7+-26] (u)
  10c156:    74 61             	r4 = [r7+4] 
  10c158:    72 74             	r2 = [r7+-48] 
  10c15a:    20 2b             	r0 = [sp+172]
  10c15c:    20 31             	r0 = [sp+196]
  10c15e:    29 20             	r9 = [sp+128]
  10c160:    25 20             	r5 = [sp+128]
  10c162:    5f 5f             	r7 = b[r5+-1] (u)
  10c164:    69 6d             	r1 = h[r6+26] (u)
  10c166:    64 2d             	r4 = 141
  10c168:    3e 72             	r6 = h[r3+-28] (u)
  10c16a:    6f 77             	r7 = h[r6+-18] (u)
  10c16c:    5f 61             	r7 = h[r5+2] (u)
  10c16e:    6c 69             	r4 = h[r6+18] (u)
  10c170:    67 6e             	r7 = [r6+56] 
  10c172:    29 20             	r9 = [sp+128]
  10c174:    3d 3d             	r5 ^= 536870912
  10c176:    20 30             	r0 = [sp+192]
  10c178:    20 2c             	r0 = [sp+176]
  10c17a:    20 78             	r0 = [r2+-32] 
  10c17c:    73 74             	r3 = [r7+-48] 
  10c17e:    61 72             	r1 = [r6+-56] 
  10c180:    74 20             	r4 = 192
  10c182:    3a 20             	r2 ^= 1
  10c184:    25 64             	r5 = [r2+16] 
  10c186:    2c 20             	r12 = [sp+128]
  10c188:    78 65             	r0 = h[r7+10] (u)
  10c18a:    6e 64             	r6 = h[r6+8] (u)
  10c18c:    20 3a             	r0 = [sp+232]
  10c18e:    20 25             	r0 = [sp+148]
  10c190:    64 2c             	r4 = 140
  10c192:    20 5f             	if (r0 == 0) goto 190 <imd_clock_init.div+0x892 : 10c252 >
  10c194:    5f 69             	r7 = h[r5+18] (u)
  10c196:    6d 64             	r5 = h[r6+8] (u)
  10c198:    2d 3e             	r13 = [sp+248]
  10c19a:    72 6f             	r2 = [r7+60] 
  10c19c:    77 5f             	if (r7 == 0) goto -2 <imd_clock_init.div+0x7DC : 10c19c >
  10c19e:    61 6c             	r1 = [r6+48] 
  10c1a0:    69 67             	r1 = h[r6+14] (u)
  10c1a2:    6e 20             	r6 = 160
  10c1a4:    3a 20             	r2 ^= 1
  10c1a6:    25 64             	r5 = [r2+16] 
  10c1a8:    0a 00              <unknown instruction>
  10c1aa:    44 3a             	r4 = 26
  10c1ac:    5c e6              <unknown instruction>
  10c1ae:    89 8b             	r1 = sp + 11
  10c1b0:    e8 a1             	r0 = r6 >>> 1
  10c1b2:    a8 e5              <unknown instruction>
  10c1b4:    85 ac             	r5 = r0 >> 12
  10c1b6:    e7 89             	goto -110 <imd_clock_init.div+0x78A : 10c14a >
  10c1b8:    88 e7              <unknown instruction>
  10c1ba:    a8 8b             	r0 = sp + 43
  10c1bc:    e5 ba             	r5 = r6 >> 26
  10c1be:    8f 5c             	b[r0+-4] = r7
  10c1c0:    61 63             	r1 = [r6+12] 
  10c1c2:    37 30             	r7 |= 65536
  10c1c4:    31 6e             	r1 = [r3+56] 
  10c1c6:    5f 77             	r7 = h[r5+-18] (u)
  10c1c8:    61 74             	r1 = [r6+-48] 
  10c1ca:    63 68             	r3 = [r6+32] 
  10c1cc:    5f 72             	r7 = h[r5+-28] (u)
  10c1ce:    65 6c             	r5 = [r6+48] 
  10c1d0:    65 61             	r5 = [r6+4] 
  10c1d2:    73 65             	r3 = [r7+20] 
  10c1d4:    5f 76             	r7 = h[r5+-20] (u)
  10c1d6:    32 2e             	r2 |= 16384
  10c1d8:    30 2e             	r0 |= 16384
  10c1da:    31 76             	r1 = [r3+-40] 
  10c1dc:    5c 63             	r4 = h[r5+6] (u)
  10c1de:    6f 64             	r7 = h[r6+8] (u)
  10c1e0:    65 5c             	if (r5 == 0) goto -72 <imd_clock_init.div+0x7DA : 10c19a >
  10c1e2:    6c 6f             	r4 = h[r6+30] (u)
  10c1e4:    61 64             	r1 = [r6+16] 
  10c1e6:    65 72             	r5 = [r6+-56] 
  10c1e8:    5c 75             	r4 = h[r5+-22] (u)
  10c1ea:    70 64             	r0 = [r7+16] 
  10c1ec:    61 74             	r1 = [r6+-48] 
  10c1ee:    65 5f             	if (r5 == 0) goto -66 <imd_clock_init.div+0x7EE : 10c1ae >
  10c1f0:    75 69             	r5 = [r7+36] 
  10c1f2:    5c 63             	r4 = h[r5+6] (u)
  10c1f4:    70 75             	r0 = [r7+-44] 
  10c1f6:    5c 62             	r4 = h[r5+4] (u)
  10c1f8:    72 32             	r2 = 210
  10c1fa:    38 5c             	r0 = b[r3+-4] (u)
  10c1fc:    75 69             	r5 = [r7+36] 
  10c1fe:    5f 64             	r7 = h[r5+8] (u)
  10c200:    72 69             	r2 = [r7+36] 
  10c202:    76 65             	r6 = [r7+20] 
  10c204:    72 5c             	if (r2 == 0) goto -8 <imd_clock_init.div+0x83E : 10c1fe >
  10c206:    6c 63             	r4 = h[r6+6] (u)
  10c208:    64 5f             	if (r4 == 0) goto -66 <imd_clock_init.div+0x808 : 10c1c8 >
  10c20a:    64 72             	r4 = [r6+-56] 
  10c20c:    69 76             	r1 = h[r6+-20] (u)
  10c20e:    65 5c             	if (r5 == 0) goto -72 <imd_clock_init.div+0x808 : 10c1c8 >
  10c210:    6c 63             	r4 = h[r6+6] (u)
  10c212:    64 5f             	if (r4 == 0) goto -66 <imd_clock_init.div+0x812 : 10c1d2 >
  10c214:    64 72             	r4 = [r6+-56] 
  10c216:    69 76             	r1 = h[r6+-20] (u)
  10c218:    65 2e             	r5 = 142
  10c21a:    63 00              <unknown instruction>
  10c21c:    41 53             	if (r1 == 0) goto -218 <imd_clock_init.div+0x784 : 10c144 >
  10c21e:    53 45             	if (r3 == 0) goto -182 <imd_clock_init.div+0x7AA : 10c16a >
  10c220:    52 54             	if (r2 == 0) goto -152 <imd_clock_init.div+0x7CA : 10c18a >
  10c222:    2d 46             	r5 = b[r2+6] (u)
  10c224:    41 49             	if (r1 == 0) goto -238 <imd_clock_init.div+0x778 : 10c138 >
  10c226:    4c 44             	r4 = b[r4+4] (u)
  10c228:    3a 20             	r2 ^= 1
  10c22a:    28 28             	r8 = [sp+160]
  10c22c:    79 65             	r1 = h[r7+10] (u)
  10c22e:    6e 64             	r6 = h[r6+8] (u)
  10c230:    20 2d             	r0 = [sp+180]
  10c232:    20 79             	r0 = [r2+-28] 
  10c234:    73 74             	r3 = [r7+-48] 
  10c236:    61 72             	r1 = [r6+-56] 
  10c238:    74 20             	r4 = 192
  10c23a:    2b 20             	r11 = [sp+128]
  10c23c:    31 29             	r1 |= 512
  10c23e:    20 25             	r0 = [sp+148]
  10c240:    20 5f             	if (r0 == 0) goto 190 <update_text_buf+0x71 : 10c300 >
  10c242:    5f 69             	r7 = h[r5+18] (u)
  10c244:    6d 64             	r5 = h[r6+8] (u)
  10c246:    2d 3e             	r13 = [sp+248]
  10c248:    63 6f             	r3 = [r6+60] 
  10c24a:    6c 75             	r4 = h[r6+-22] (u)
  10c24c:    6d 6e             	r5 = h[r6+28] (u)
  10c24e:    5f 61             	r7 = h[r5+2] (u)
  10c250:    6c 69             	r4 = h[r6+18] (u)
  10c252:    67 6e             	r7 = [r6+56] 
  10c254:    29 20             	r9 = [sp+128]
  10c256:    3d 3d             	r5 ^= 536870912
  10c258:    20 30             	r0 = [sp+192]
  10c25a:    20 2c             	r0 = [sp+176]
  10c25c:    20 79             	r0 = [r2+-28] 
  10c25e:    73 74             	r3 = [r7+-48] 
  10c260:    61 72             	r1 = [r6+-56] 
  10c262:    74 20             	r4 = 192
  10c264:    3a 20             	r2 ^= 1
  10c266:    25 64             	r5 = [r2+16] 
  10c268:    2c 20             	r12 = [sp+128]
  10c26a:    79 65             	r1 = h[r7+10] (u)
  10c26c:    6e 64             	r6 = h[r6+8] (u)
  10c26e:    20 3a             	r0 = [sp+232]
  10c270:    20 25             	r0 = [sp+148]
  10c272:    64 2c             	r4 = 140
  10c274:    20 5f             	if (r0 == 0) goto 190 <update_text_buf+0xA5 : 10c334 >
  10c276:    5f 69             	r7 = h[r5+18] (u)
  10c278:    6d 64             	r5 = h[r6+8] (u)
  10c27a:    2d 3e             	r13 = [sp+248]
  10c27c:    63 6f             	r3 = [r6+60] 
  10c27e:    6c 75             	r4 = h[r6+-22] (u)
  10c280:    6d 6e             	r5 = h[r6+28] (u)
  10c282:    5f 61             	r7 = h[r5+2] (u)
  10c284:    6c 69             	r4 = h[r6+18] (u)
  10c286:    67 6e             	r7 = [r6+56] 
  10c288:    20 3a             	r0 = [sp+232]
  10c28a:    20 25             	r0 = [sp+148]
  10c28c:    64 0a             	r4 = [r6++=r12] 
  10c28e:    00 b5             	r0 = r0 << 21


update_text_buf:
  10c28f:    b5 c8              <unknown instruction>
  10c291:    b4 fd c1 ac       	ifs (r4 < 470) goto 386 <lcd_drive+0x13 : 10c417 >
  10c295:    bd d3              <unknown instruction>
  10c297:    00 00             	nop
  10c299:    00 00             	nop
  10c29b:    00 00             	nop
  10c29d:    00 00             	nop
  10c29f:    00 00             	nop
  10c2a1:    00 00             	nop
  10c2a3:    b5 c8              <unknown instruction>
  10c2a5:    b4 fd c9 fd       	ifs (r4 < 510) goto -110 <imd_clock_init.div+0x87B : 10c23b >
  10c2a9:    bc b6             	r4 = r3 >>> 22
  10c2ab:    00 00             	nop
  10c2ad:    00 00             	nop
  10c2af:    00 00             	nop
  10c2b1:    00 00             	nop
  10c2b3:    00 00             	nop
  10c2b5:    00 00             	nop
  10c2b7:    c7 eb b3 a2       	[r10+28] += 691
  10c2bb:    ca d4              <unknown instruction>
  10c2bd:    ca b9             	r2 = r4 >>> 25
  10c2bf:    d3 c3              <unknown instruction>
  10c2c1:    c9 fd bc b6       	ifs (r9 < -421) goto 376 <lcd_drive+0x39 : 10c43d >
  10c2c5:    00 00             	nop
  10c2c7:    00 00             	nop
  10c2c9:    00 00             	nop
  10c2cb:    c8 ed              <unknown instruction>
  10c2cd:    bc fe ca d6       	ifs (r12 <= 491) goto 404 <frame_begin_cmd+0x11 : 10c465 >
  10c2d1:    b6 af             	r6 = r3 >> 15
  10c2d3:    b4 a5             	r4 = r3 >> 5
  10c2d5:    b7 a2             	r7 = r3 >> 2
  10c2d7:    c9 fd bc b6       	ifs (r9 < -421) goto 376 <line_begin_cmd.157+0xF : 10c453 >
  10c2db:    00 00             	nop
  10c2dd:    00 00             	nop
  10c2df:    b5 d8             	r5 += r11  #
  10c2e1:    d6 b7             		 r6 = r5 >> 23
  10c2e3:    3a 00             	ssync
  10c2e5:    00 00             	nop
  10c2e7:    00 00             	nop
  10c2e9:    00 00             	nop
  10c2eb:    00 00             	nop
  10c2ed:    00 00             	nop
  10c2ef:    00 00             	nop
  10c2f1:    00 00             	nop
  10c2f3:    bd f8 b6 c8       	if (r13 != 484) goto 364 <frame_begin_cmd+0xF : 10c463 >
  10c2f7:    00 00             	nop
  10c2f9:    00 00             	nop
  10c2fb:    00 00             	nop
  10c2fd:    00 00             	nop
  10c2ff:    00 00             	nop
  10c301:    00 00             	nop
  10c303:    00 00             	nop
  10c305:    00 00             	nop
  10c307:    2e 00             	ssync
  10c309:    00 00             	nop
  10c30b:    00 00             	nop
  10c30d:    00 00             	nop
  10c30f:    00 00             	nop
  10c311:    00 00             	nop
  10c313:    00 00             	nop
  10c315:    00 00             	nop
  10c317:    00 00             	nop
  10c319:    00 00             	nop
  10c31b:    bd f8 c8 eb       	if (r13 != 501) goto -112 <update_text_buf+0x20 : 10c2af >
  10c31f:    c9 fd bc b6       	ifs (r9 < -421) goto 376 <imd_rgb_io+0x13 : 10c49b >
  10c323:    00 00             	nop
  10c325:    00 00             	nop
  10c327:    00 00             	nop
  10c329:    00 00             	nop
  10c32b:    00 00             	nop
  10c32d:    00 00             	nop
  10c32f:    bd f8 c8 eb       	if (r13 != 501) goto -112 <update_text_buf+0x34 : 10c2c3 >
  10c333:    c7 bf             	r7 = r4 >> 31
  10c335:    d6 c6              <unknown instruction>
  10c337:    c9 fd bc b6       	ifs (r9 < -421) goto 376 <imd_spi_io+0x13 : 10c4b3 >
  10c33b:    00 00             	nop
  10c33d:    00 00             	nop
  10c33f:    00 00             	nop
  10c341:    00 00             	nop
  10c343:    00 00             	nop
  10c345:    00 00             	nop
  10c347:    00 00             	nop
  10c349:    00 00             	nop
  10c34b:    00 00             	nop
  10c34d:    00 00             	nop
  10c34f:    00 00             	nop


lcd_spi_sh8601a_param:
  10c350:    00 00             	nop
  10c352:    00 00             	nop
  10c354:    00 00             	nop
  10c356:    00 00             	nop
  10c358:    c6 01              <unknown instruction>
  10c35a:    00 00             	nop
  10c35c:    c6 01              <unknown instruction>
  10c35e:    00 00             	nop
  10c360:    c6 01              <unknown instruction>
  10c362:    00 00             	nop
  10c364:    c6 01              <unknown instruction>
  10c366:    00 00             	nop
  10c368:    00 00             	nop
  10c36a:    00 00             	nop
  10c36c:    02 00             	bkpt
  10c36e:    00 00             	nop
  10c370:    c0 1b             	r0 *= r12
  10c372:    01 00             	idle
  10c374:    c6 01              <unknown instruction>
  10c376:    00 00             	nop
  10c378:    c6 01              <unknown instruction>
  10c37a:    00 00             	nop
  10c37c:    01 00             	idle
  10c37e:    00 00             	nop
  10c380:    00 00             	nop
  10c382:    00 00             	nop
  10c384:    00 00             	nop
  10c386:    00 00             	nop
  10c388:    00 00             	nop
  10c38a:    ff 00             	sti r15
  10c38c:    00 00             	nop
  10c38e:    00 00             	nop
  10c390:    00 00             	nop
  10c392:    00 00             	nop
  10c394:    3c 00              <unknown instruction>
  10c396:    00 00             	nop
  10c398:    22 00             	ssync
  10c39a:    00 00             	nop
  10c39c:    21 00             	syscall
  10c39e:    00 00             	nop
  10c3a0:    01 00             	idle
  10c3a2:    00 00             	nop
  10c3a4:    00 00             	nop
  10c3a6:    00 00             	nop
  10c3a8:    00 00             	nop
  10c3aa:    00 00             	nop
  10c3ac:    00 00             	nop
  10c3ae:    00 00             	nop
  10c3b0:    00 00             	nop
  10c3b2:    00 00             	nop
  10c3b4:    00 00             	nop
  10c3b6:    00 00             	nop
  10c3b8:    00 00             	nop
  10c3ba:    00 00             	nop
  10c3bc:    00 00             	nop
  10c3be:    00 00             	nop
  10c3c0:    00 00             	nop
  10c3c2:    00 00             	nop
  10c3c4:    00 00             	nop
  10c3c6:    00 00             	nop
  10c3c8:    00 00             	nop
  10c3ca:    00 00             	nop
  10c3cc:    00 00             	nop
  10c3ce:    00 00             	nop
  10c3d0:    00 00             	nop
  10c3d2:    00 00             	nop
  10c3d4:    00 00             	nop
  10c3d6:    00 00             	nop
  10c3d8:    00 00             	nop
  10c3da:    00 00             	nop
  10c3dc:    00 00             	nop
  10c3de:    00 00             	nop
  10c3e0:    00 00             	nop
  10c3e2:    00 00             	nop
  10c3e4:    00 00             	nop
  10c3e6:    00 00             	nop
  10c3e8:    00 00             	nop
  10c3ea:    00 00             	nop
  10c3ec:    00 00             	nop
  10c3ee:    00 00             	nop
  10c3f0:    00 00             	nop
  10c3f2:    00 00             	nop
  10c3f4:    00 00             	nop
  10c3f6:    00 00             	nop
  10c3f8:    00 00             	nop
  10c3fa:    00 00             	nop
  10c3fc:    00 00             	nop
  10c3fe:    00 00             	nop
  10c400:    00 00             	nop
  10c402:    00 00             	nop


lcd_drive:
  10c404:    1a 9a             	r2 = r1 + 26
  10c406:    10 00              <unknown instruction>
  10c408:    02 02             	pfetch [r2]
  10c40a:    00 00             	nop
  10c40c:    80 9c             	rep 18 29 {
  10c40e:    10 00              <unknown instruction>
  10c410:    be 00             		testset b[r14]
  10c412:    00 00             		nop
  10c414:    00 00             		nop
  10c416:    00 00             		nop
  10c418:    00 00             		nop
  10c41a:    00 00             		nop
  10c41c:    00 00             		nop
  10c41e:    00 00             		nop
  10c420:    00 00             		nop
                               	}
  10c422:    00 00             	nop
  10c424:    00 00             	nop
  10c426:    00 00             	nop
  10c428:    00 00             	nop
  10c42a:    00 00             	nop
  10c42c:    50 c3              <unknown instruction>
  10c42e:    10 00              <unknown instruction>
  10c430:    00 00             	nop
  10c432:    00 00             	nop
  10c434:    f4 76             	[r7+-40] = r4
  10c436:    10 00              <unknown instruction>
  10c438:    3c 77             	r4 = h[r3+-18] (u)
  10c43a:    10 00              <unknown instruction>
  10c43c:    64 77             	r4 = [r6+-36] 
  10c43e:    10 00              <unknown instruction>
  10c440:    c4 77             	[r4+-36] = r4
  10c442:    10 00              <unknown instruction>


line_begin_cmd.157:
  10c444:    11 01             	tbh [r1]
  10c446:    11 10             	r1 = b[r1++=r8] (u)
  10c448:    00 00             	nop
  10c44a:    00 00             	nop
  10c44c:    01 10             	r1 = b[r0++=r8] (u)
  10c44e:    00 00             	nop
  10c450:    00 00             	nop
  10c452:    00 00             	nop


frame_begin_cmd:
  10c454:    11 01             	tbh [r1]
  10c456:    11 10             	r1 = b[r1++=r8] (u)
  10c458:    00 00             	nop
  10c45a:    00 00             	nop
  10c45c:    01 10             	r1 = b[r0++=r8] (u)
  10c45e:    00 01             	tbb [r0]
  10c460:    00 00             	nop
  10c462:    00 00             	nop
  10c464:    00 00             	nop
  10c466:    00 00             	nop
  10c468:    00 00             	nop
  10c46a:    00 00             	nop
  10c46c:    00 00             	nop
  10c46e:    00 00             	nop


imd_pap_io:
  10c470:    d6 80             	goto -1216 <imd_clock_init.div+0x5F2 : 10bfb2 >
  10c472:    10 00              <unknown instruction>
  10c474:    f8 82              <unknown instruction>
  10c476:    10 00              <unknown instruction>
  10c478:    56 83             	goto -1722 <imd_clock_init.div+0x400 : 10bdc0 >
  10c47a:    10 00              <unknown instruction>
  10c47c:    4a 84             	r2 = r4 + 4
  10c47e:    10 00              <unknown instruction>
  10c480:    92 84              <unknown instruction>
  10c482:    10 00              <unknown instruction>
  10c484:    1c 85             	r4 = r1 + 5
  10c486:    10 00              <unknown instruction>


imd_rgb_io:
  10c488:    62 85             	sp += 404
  10c48a:    10 00              <unknown instruction>
  10c48c:    00 00             	nop
  10c48e:    00 00             	nop
  10c490:    00 00             	nop
  10c492:    00 00             	nop
  10c494:    00 00             	nop
  10c496:    00 00             	nop
  10c498:    ac 87             	r4 = sp + 39
  10c49a:    10 00              <unknown instruction>
  10c49c:    f0 87             	rep 32 8 {
  10c49e:    10 00              <unknown instruction>


imd_spi_io:
  10c4a0:    c2 88             		sp += -224
  10c4a2:    10 00              <unknown instruction>
  10c4a4:    4a 8b             		r2 = r4 + 11
  10c4a6:    10 00              <unknown instruction>
  10c4a8:    b2 8c              <unknown instruction>
  10c4aa:    10 00              <unknown instruction>
  10c4ac:    d8 8d              <unknown instruction>
  10c4ae:    10 00              <unknown instruction>
  10c4b0:    dc 8f              <unknown instruction>
  10c4b2:    10 00              <unknown instruction>
  10c4b4:    46 90             		goto -1760 <imd_clock_init.div+0x416 : 10bdd6 >
  10c4b6:    10 00              <unknown instruction>


bss_begin:
  10c4b8:    00 00             		nop
  10c4ba:    00 00             		nop
  10c4bc:    00 00             		nop
  10c4be:    00 00             		nop


user_api_param:
  10c4c0:    00 00             		nop
  10c4c2:    00 00             		nop
  10c4c4:    00 00             		nop
  10c4c6:    00 00             		nop


ui_disp.last_status:
  10c4c8:    00 00             		nop
  10c4ca:    00 00             		nop


line_buffer:
  10c4cc:    00 00             		nop
  10c4ce:    00 00             		nop
  10c4d0:    00 00             		nop
                               	}
  10c4d2:    00 00             	nop
  10c4d4:    00 00             	nop
  10c4d6:    00 00             	nop
  10c4d8:    00 00             	nop
  10c4da:    00 00             	nop
  10c4dc:    00 00             	nop
  10c4de:    00 00             	nop
  10c4e0:    00 00             	nop
  10c4e2:    00 00             	nop
  10c4e4:    00 00             	nop
  10c4e6:    00 00             	nop
  10c4e8:    00 00             	nop
  10c4ea:    00 00             	nop
  10c4ec:    00 00             	nop
  10c4ee:    00 00             	nop
  10c4f0:    00 00             	nop
  10c4f2:    00 00             	nop
  10c4f4:    00 00             	nop
  10c4f6:    00 00             	nop
  10c4f8:    00 00             	nop
  10c4fa:    00 00             	nop
  10c4fc:    00 00             	nop
  10c4fe:    00 00             	nop
  10c500:    00 00             	nop
  10c502:    00 00             	nop
  10c504:    00 00             	nop
  10c506:    00 00             	nop
  10c508:    00 00             	nop
  10c50a:    00 00             	nop
  10c50c:    00 00             	nop
  10c50e:    00 00             	nop
  10c510:    00 00             	nop
  10c512:    00 00             	nop
  10c514:    00 00             	nop
  10c516:    00 00             	nop
  10c518:    00 00             	nop
  10c51a:    00 00             	nop
  10c51c:    00 00             	nop
  10c51e:    00 00             	nop
  10c520:    00 00             	nop
  10c522:    00 00             	nop
  10c524:    00 00             	nop
  10c526:    00 00             	nop
  10c528:    00 00             	nop
  10c52a:    00 00             	nop
  10c52c:    00 00             	nop
  10c52e:    00 00             	nop
  10c530:    00 00             	nop
  10c532:    00 00             	nop
  10c534:    00 00             	nop
  10c536:    00 00             	nop
  10c538:    00 00             	nop
  10c53a:    00 00             	nop
  10c53c:    00 00             	nop
  10c53e:    00 00             	nop
  10c540:    00 00             	nop
  10c542:    00 00             	nop
  10c544:    00 00             	nop
  10c546:    00 00             	nop
  10c548:    00 00             	nop
  10c54a:    00 00             	nop
  10c54c:    00 00             	nop
  10c54e:    00 00             	nop
  10c550:    00 00             	nop
  10c552:    00 00             	nop
  10c554:    00 00             	nop
  10c556:    00 00             	nop
  10c558:    00 00             	nop
  10c55a:    00 00             	nop
  10c55c:    00 00             	nop
  10c55e:    00 00             	nop
  10c560:    00 00             	nop
  10c562:    00 00             	nop
  10c564:    00 00             	nop
  10c566:    00 00             	nop
  10c568:    00 00             	nop
  10c56a:    00 00             	nop
  10c56c:    00 00             	nop
  10c56e:    00 00             	nop
  10c570:    00 00             	nop
  10c572:    00 00             	nop
  10c574:    00 00             	nop
  10c576:    00 00             	nop
  10c578:    00 00             	nop
  10c57a:    00 00             	nop
  10c57c:    00 00             	nop
  10c57e:    00 00             	nop
  10c580:    00 00             	nop
  10c582:    00 00             	nop
  10c584:    00 00             	nop
  10c586:    00 00             	nop
  10c588:    00 00             	nop
  10c58a:    00 00             	nop
  10c58c:    00 00             	nop
  10c58e:    00 00             	nop
  10c590:    00 00             	nop
  10c592:    00 00             	nop
  10c594:    00 00             	nop
  10c596:    00 00             	nop
  10c598:    00 00             	nop
  10c59a:    00 00             	nop
  10c59c:    00 00             	nop
  10c59e:    00 00             	nop
  10c5a0:    00 00             	nop
  10c5a2:    00 00             	nop
  10c5a4:    00 00             	nop
  10c5a6:    00 00             	nop
  10c5a8:    00 00             	nop
  10c5aa:    00 00             	nop
  10c5ac:    00 00             	nop
  10c5ae:    00 00             	nop
  10c5b0:    00 00             	nop
  10c5b2:    00 00             	nop
  10c5b4:    00 00             	nop
  10c5b6:    00 00             	nop
  10c5b8:    00 00             	nop
  10c5ba:    00 00             	nop
  10c5bc:    00 00             	nop
  10c5be:    00 00             	nop
  10c5c0:    00 00             	nop
  10c5c2:    00 00             	nop
  10c5c4:    00 00             	nop
  10c5c6:    00 00             	nop
  10c5c8:    00 00             	nop
  10c5ca:    00 00             	nop
  10c5cc:    00 00             	nop
  10c5ce:    00 00             	nop
  10c5d0:    00 00             	nop
  10c5d2:    00 00             	nop
  10c5d4:    00 00             	nop
  10c5d6:    00 00             	nop
  10c5d8:    00 00             	nop
  10c5da:    00 00             	nop
  10c5dc:    00 00             	nop
  10c5de:    00 00             	nop
  10c5e0:    00 00             	nop
  10c5e2:    00 00             	nop
  10c5e4:    00 00             	nop
  10c5e6:    00 00             	nop
  10c5e8:    00 00             	nop
  10c5ea:    00 00             	nop
  10c5ec:    00 00             	nop
  10c5ee:    00 00             	nop
  10c5f0:    00 00             	nop
  10c5f2:    00 00             	nop
  10c5f4:    00 00             	nop
  10c5f6:    00 00             	nop
  10c5f8:    00 00             	nop
  10c5fa:    00 00             	nop
  10c5fc:    00 00             	nop
  10c5fe:    00 00             	nop
  10c600:    00 00             	nop
  10c602:    00 00             	nop
  10c604:    00 00             	nop
  10c606:    00 00             	nop
  10c608:    00 00             	nop
  10c60a:    00 00             	nop
  10c60c:    00 00             	nop
  10c60e:    00 00             	nop
  10c610:    00 00             	nop
  10c612:    00 00             	nop
  10c614:    00 00             	nop
  10c616:    00 00             	nop
  10c618:    00 00             	nop
  10c61a:    00 00             	nop
  10c61c:    00 00             	nop
  10c61e:    00 00             	nop
  10c620:    00 00             	nop
  10c622:    00 00             	nop
  10c624:    00 00             	nop
  10c626:    00 00             	nop
  10c628:    00 00             	nop
  10c62a:    00 00             	nop
  10c62c:    00 00             	nop
  10c62e:    00 00             	nop
  10c630:    00 00             	nop
  10c632:    00 00             	nop
  10c634:    00 00             	nop
  10c636:    00 00             	nop
  10c638:    00 00             	nop
  10c63a:    00 00             	nop
  10c63c:    00 00             	nop
  10c63e:    00 00             	nop
  10c640:    00 00             	nop
  10c642:    00 00             	nop
  10c644:    00 00             	nop
  10c646:    00 00             	nop
  10c648:    00 00             	nop
  10c64a:    00 00             	nop
  10c64c:    00 00             	nop
  10c64e:    00 00             	nop
  10c650:    00 00             	nop
  10c652:    00 00             	nop
  10c654:    00 00             	nop
  10c656:    00 00             	nop
  10c658:    00 00             	nop
  10c65a:    00 00             	nop
  10c65c:    00 00             	nop
  10c65e:    00 00             	nop
  10c660:    00 00             	nop
  10c662:    00 00             	nop
  10c664:    00 00             	nop
  10c666:    00 00             	nop
  10c668:    00 00             	nop
  10c66a:    00 00             	nop
  10c66c:    00 00             	nop
  10c66e:    00 00             	nop
  10c670:    00 00             	nop
  10c672:    00 00             	nop
  10c674:    00 00             	nop
  10c676:    00 00             	nop
  10c678:    00 00             	nop
  10c67a:    00 00             	nop
  10c67c:    00 00             	nop
  10c67e:    00 00             	nop
  10c680:    00 00             	nop
  10c682:    00 00             	nop
  10c684:    00 00             	nop
  10c686:    00 00             	nop
  10c688:    00 00             	nop
  10c68a:    00 00             	nop
  10c68c:    00 00             	nop
  10c68e:    00 00             	nop
  10c690:    00 00             	nop
  10c692:    00 00             	nop
  10c694:    00 00             	nop
  10c696:    00 00             	nop
  10c698:    00 00             	nop
  10c69a:    00 00             	nop
  10c69c:    00 00             	nop
  10c69e:    00 00             	nop
  10c6a0:    00 00             	nop
  10c6a2:    00 00             	nop
  10c6a4:    00 00             	nop
  10c6a6:    00 00             	nop
  10c6a8:    00 00             	nop
  10c6aa:    00 00             	nop
  10c6ac:    00 00             	nop
  10c6ae:    00 00             	nop
  10c6b0:    00 00             	nop
  10c6b2:    00 00             	nop
  10c6b4:    00 00             	nop
  10c6b6:    00 00             	nop
  10c6b8:    00 00             	nop
  10c6ba:    00 00             	nop
  10c6bc:    00 00             	nop
  10c6be:    00 00             	nop
  10c6c0:    00 00             	nop
  10c6c2:    00 00             	nop
  10c6c4:    00 00             	nop
  10c6c6:    00 00             	nop
  10c6c8:    00 00             	nop
  10c6ca:    00 00             	nop
  10c6cc:    00 00             	nop
  10c6ce:    00 00             	nop
  10c6d0:    00 00             	nop
  10c6d2:    00 00             	nop
  10c6d4:    00 00             	nop
  10c6d6:    00 00             	nop
  10c6d8:    00 00             	nop
  10c6da:    00 00             	nop
  10c6dc:    00 00             	nop
  10c6de:    00 00             	nop
  10c6e0:    00 00             	nop
  10c6e2:    00 00             	nop
  10c6e4:    00 00             	nop
  10c6e6:    00 00             	nop
  10c6e8:    00 00             	nop
  10c6ea:    00 00             	nop
  10c6ec:    00 00             	nop
  10c6ee:    00 00             	nop
  10c6f0:    00 00             	nop
  10c6f2:    00 00             	nop
  10c6f4:    00 00             	nop
  10c6f6:    00 00             	nop
  10c6f8:    00 00             	nop
  10c6fa:    00 00             	nop
  10c6fc:    00 00             	nop
  10c6fe:    00 00             	nop
  10c700:    00 00             	nop
  10c702:    00 00             	nop
  10c704:    00 00             	nop
  10c706:    00 00             	nop
  10c708:    00 00             	nop
  10c70a:    00 00             	nop
  10c70c:    00 00             	nop
  10c70e:    00 00             	nop
  10c710:    00 00             	nop
  10c712:    00 00             	nop
  10c714:    00 00             	nop
  10c716:    00 00             	nop
  10c718:    00 00             	nop
  10c71a:    00 00             	nop
  10c71c:    00 00             	nop
  10c71e:    00 00             	nop
  10c720:    00 00             	nop
  10c722:    00 00             	nop
  10c724:    00 00             	nop
  10c726:    00 00             	nop
  10c728:    00 00             	nop
  10c72a:    00 00             	nop
  10c72c:    00 00             	nop
  10c72e:    00 00             	nop
  10c730:    00 00             	nop
  10c732:    00 00             	nop
  10c734:    00 00             	nop
  10c736:    00 00             	nop
  10c738:    00 00             	nop
  10c73a:    00 00             	nop
  10c73c:    00 00             	nop
  10c73e:    00 00             	nop
  10c740:    00 00             	nop
  10c742:    00 00             	nop
  10c744:    00 00             	nop
  10c746:    00 00             	nop
  10c748:    00 00             	nop
  10c74a:    00 00             	nop
  10c74c:    00 00             	nop
  10c74e:    00 00             	nop
  10c750:    00 00             	nop
  10c752:    00 00             	nop
  10c754:    00 00             	nop
  10c756:    00 00             	nop
  10c758:    00 00             	nop
  10c75a:    00 00             	nop
  10c75c:    00 00             	nop
  10c75e:    00 00             	nop
  10c760:    00 00             	nop
  10c762:    00 00             	nop
  10c764:    00 00             	nop
  10c766:    00 00             	nop
  10c768:    00 00             	nop
  10c76a:    00 00             	nop
  10c76c:    00 00             	nop
  10c76e:    00 00             	nop
  10c770:    00 00             	nop
  10c772:    00 00             	nop
  10c774:    00 00             	nop
  10c776:    00 00             	nop
  10c778:    00 00             	nop
  10c77a:    00 00             	nop
  10c77c:    00 00             	nop
  10c77e:    00 00             	nop
  10c780:    00 00             	nop
  10c782:    00 00             	nop
  10c784:    00 00             	nop
  10c786:    00 00             	nop
  10c788:    00 00             	nop
  10c78a:    00 00             	nop
  10c78c:    00 00             	nop
  10c78e:    00 00             	nop
  10c790:    00 00             	nop
  10c792:    00 00             	nop
  10c794:    00 00             	nop
  10c796:    00 00             	nop
  10c798:    00 00             	nop
  10c79a:    00 00             	nop
  10c79c:    00 00             	nop
  10c79e:    00 00             	nop
  10c7a0:    00 00             	nop
  10c7a2:    00 00             	nop
  10c7a4:    00 00             	nop
  10c7a6:    00 00             	nop
  10c7a8:    00 00             	nop
  10c7aa:    00 00             	nop
  10c7ac:    00 00             	nop
  10c7ae:    00 00             	nop
  10c7b0:    00 00             	nop
  10c7b2:    00 00             	nop
  10c7b4:    00 00             	nop
  10c7b6:    00 00             	nop
  10c7b8:    00 00             	nop
  10c7ba:    00 00             	nop
  10c7bc:    00 00             	nop
  10c7be:    00 00             	nop
  10c7c0:    00 00             	nop
  10c7c2:    00 00             	nop
  10c7c4:    00 00             	nop
  10c7c6:    00 00             	nop
  10c7c8:    00 00             	nop
  10c7ca:    00 00             	nop
  10c7cc:    00 00             	nop
  10c7ce:    00 00             	nop
  10c7d0:    00 00             	nop
  10c7d2:    00 00             	nop
  10c7d4:    00 00             	nop
  10c7d6:    00 00             	nop
  10c7d8:    00 00             	nop
  10c7da:    00 00             	nop
  10c7dc:    00 00             	nop
  10c7de:    00 00             	nop
  10c7e0:    00 00             	nop
  10c7e2:    00 00             	nop
  10c7e4:    00 00             	nop
  10c7e6:    00 00             	nop
  10c7e8:    00 00             	nop
  10c7ea:    00 00             	nop
  10c7ec:    00 00             	nop
  10c7ee:    00 00             	nop
  10c7f0:    00 00             	nop
  10c7f2:    00 00             	nop
  10c7f4:    00 00             	nop
  10c7f6:    00 00             	nop
  10c7f8:    00 00             	nop
  10c7fa:    00 00             	nop


sbrk.__init_addr:
  10c7fc:    00 00             	nop
  10c7fe:    00 00             	nop


backlight_status:
  10c800:    00 00             	nop
  10c802:    00 00             	nop


lcd_dat:
  10c804:    00 00             	nop
  10c806:    00 00             	nop


my_irq_disable:
  10c808:    00 00             	nop
  10c80a:    00 00             	nop


my_irq_enable:
  10c80c:    00 00             	nop
  10c80e:    00 00             	nop


my_mdelay:
  10c810:    00 00             	nop
  10c812:    00 00             	nop


_request_irq:
  10c814:    00 00             	nop
  10c816:    00 00             	nop


display.0:
  10c818:    00 00             	nop
  10c81a:    00 00             	nop


__this:
  10c81c:    00 00             	nop
  10c81e:    00 00             	nop


__imd:
  10c820:    00 00             	nop
  10c822:    00 00             	nop


__this.123:
  10c824:    00 00             	nop
  10c826:    00 00             	nop


__imd.134:
  10c828:    00 00             	nop
  10c82a:    00 00             	nop


__this.139:
  10c82c:    00 00             	nop
  10c82e:    00 00             	nop


__this.145:
  10c830:    00 00             	nop
  10c832:    00 00             	nop


__imd.162:
  10c834:    00 00             	nop
  10c836:    00 00             	nop


rets_addr:
  10c838:    00 00             	nop
  10c83a:    00 00             	nop


driver.0:
  10c83c:    00 00             	nop
  10c83e:    00 00             	nop


driver.1:
  10c840:    00 00             	nop
  10c842:    00 00             	nop


driver.2:
  10c844:    00 00             	nop
  10c846:    00 00             	nop


refresh_info:
  10c848:    00 00             	nop
  10c84a:    00 00             	nop
  10c84c:    00 00             	nop
  10c84e:    00 00             	nop
  10c850:    00 00             	nop
  10c852:    00 00             	nop
  10c854:    00 00             	nop
  10c856:    00 00             	nop
  10c858:    00 00             	nop
  10c85a:    00 00             	nop
  10c85c:    00 00             	nop
  10c85e:    00 00             	nop
  10c860:    00 00             	nop
  10c862:    00 00             	nop
  10c864:    00 00             	nop
  10c866:    00 00             	nop
  10c868:    00 00             	nop
  10c86a:    00 00             	nop
  10c86c:    00 00             	nop
  10c86e:    00 00             	nop
  10c870:    00 00             	nop
  10c872:    00 00             	nop
  10c874:    00 00             	nop
  10c876:    00 00             	nop
  10c878:    00 00             	nop
  10c87a:    00 00             	nop


mem_heap:
  10c87c:    00 00             	nop
  10c87e:    00 00             	nop
  10c880:    00 00             	nop
  10c882:    00 00             	nop
  10c884:    00 00             	nop
  10c886:    00 00             	nop
  10c888:    00 00             	nop
  10c88a:    00 00             	nop
  10c88c:    00 00             	nop
  10c88e:    00 00             	nop
  10c890:    00 00             	nop
  10c892:    00 00             	nop
  10c894:    00 00             	nop
  10c896:    00 00             	nop
  10c898:    00 00             	nop
  10c89a:    00 00             	nop
  10c89c:    00 00             	nop
  10c89e:    00 00             	nop
  10c8a0:    00 00             	nop
  10c8a2:    00 00             	nop
  10c8a4:    00 00             	nop
  10c8a6:    00 00             	nop
  10c8a8:    00 00             	nop
  10c8aa:    00 00             	nop
  10c8ac:    00 00             	nop
  10c8ae:    00 00             	nop


param_t:
  10c8b0:    00 00             	nop
  10c8b2:    00 00             	nop
  10c8b4:    00 00             	nop
  10c8b6:    00 00             	nop
  10c8b8:    00 00             	nop
  10c8ba:    00 00             	nop
  10c8bc:    00 00             	nop
  10c8be:    00 00             	nop
  10c8c0:    00 00             	nop
  10c8c2:    00 00             	nop
  10c8c4:    00 00             	nop
  10c8c6:    00 00             	nop
  10c8c8:    00 00             	nop
  10c8ca:    00 00             	nop
  10c8cc:    00 00             	nop
  10c8ce:    00 00             	nop
  10c8d0:    00 00             	nop
  10c8d2:    00 00             	nop
  10c8d4:    00 00             	nop
  10c8d6:    00 00             	nop
  10c8d8:    00 00             	nop
  10c8da:    00 00             	nop
  10c8dc:    00 00             	nop
  10c8de:    00 00             	nop
  10c8e0:    00 00             	nop
  10c8e2:    00 00             	nop
  10c8e4:    00 00             	nop
  10c8e6:    00 00             	nop
  10c8e8:    00 00             	nop
  10c8ea:    00 00             	nop


imd_var:
  10c8ec:    00 00             	nop
  10c8ee:    00 00             	nop
  10c8f0:    00 00             	nop
  10c8f2:    00 00             	nop
  10c8f4:    00 00             	nop
  10c8f6:    00 00             	nop
  10c8f8:    00 00             	nop
  10c8fa:    00 00             	nop
  10c8fc:    00 00             	nop
  10c8fe:    00 00             	nop
  10c900:    00 00             	nop
  10c902:    00 00             	nop
  10c904:    00 00             	nop
  10c906:    00 00             	nop
  10c908:    00 00             	nop
  10c90a:    00 00             	nop
  10c90c:    00 00             	nop
  10c90e:    00 00             	nop
  10c910:    00 00             	nop
  10c912:    00 00             	nop
  10c914:    00 00             	nop
  10c916:    00 00             	nop
  10c918:    00 00             	nop
  10c91a:    00 00             	nop
  10c91c:    00 00             	nop
  10c91e:    00 00             	nop
  10c920:    00 00             	nop
  10c922:    00 00             	nop
  10c924:    00 00             	nop
  10c926:    00 00             	nop
  10c928:    00 00             	nop
  10c92a:    00 00             	nop
  10c92c:    00 00             	nop
  10c92e:    00 00             	nop
  10c930:    00 00             	nop
  10c932:    00 00             	nop
  10c934:    00 00             	nop
  10c936:    00 00             	nop
  10c938:    00 00             	nop
  10c93a:    00 00             	nop
  10c93c:    00 00             	nop
  10c93e:    00 00             	nop
  10c940:    00 00             	nop
  10c942:    00 00             	nop
  10c944:    00 00             	nop
  10c946:    00 00             	nop
  10c948:    00 00             	nop
  10c94a:    00 00             	nop


_mask_list:
  10c94c:    00 00             	nop
  10c94e:    00 00             	nop
  10c950:    00 00             	nop
  10c952:    00 00             	nop
  10c954:    00 00             	nop
  10c956:    00 00             	nop
  10c958:    00 00             	nop
  10c95a:    00 00             	nop
  10c95c:    00 00             	nop
  10c95e:    00 00             	nop
  10c960:    00 00             	nop
  10c962:    00 00             	nop
  10c964:    00 00             	nop
  10c966:    00 00             	nop
  10c968:    00 00             	nop
  10c96a:    00 00             	nop
  10c96c:    00 00             	nop
  10c96e:    00 00             	nop
  10c970:    00 00             	nop
  10c972:    00 00             	nop
  10c974:    00 00             	nop
  10c976:    00 00             	nop
  10c978:    00 00             	nop
  10c97a:    00 00             	nop
  10c97c:    00 00             	nop
  10c97e:    00 00             	nop
  10c980:    00 00             	nop
  10c982:    00 00             	nop
  10c984:    00 00             	nop
  10c986:    00 00             	nop
  10c988:    00 00             	nop
  10c98a:    00 00             	nop
  10c98c:    00 00             	nop
  10c98e:    00 00             	nop
  10c990:    00 00             	nop
  10c992:    00 00             	nop
  10c994:    00 00             	nop
  10c996:    00 00             	nop
  10c998:    00 00             	nop
  10c99a:    00 00             	nop
  10c99c:    00 00             	nop
  10c99e:    00 00             	nop
  10c9a0:    00 00             	nop
  10c9a2:    00 00             	nop
  10c9a4:    00 00             	nop
  10c9a6:    00 00             	nop
  10c9a8:    00 00             	nop
  10c9aa:    00 00             	nop
  10c9ac:    00 00             	nop
  10c9ae:    00 00             	nop
  10c9b0:    00 00             	nop
  10c9b2:    00 00             	nop
  10c9b4:    00 00             	nop
  10c9b6:    00 00             	nop
  10c9b8:    00 00             	nop
  10c9ba:    00 00             	nop
  10c9bc:    00 00             	nop
  10c9be:    00 00             	nop
  10c9c0:    00 00             	nop
  10c9c2:    00 00             	nop
  10c9c4:    00 00             	nop
  10c9c6:    00 00             	nop
  10c9c8:    00 00             	nop
  10c9ca:    00 00             	nop


_mem_buf_get.line_buffer:
  10c9cc:    00 00             	nop
  10c9ce:    00 00             	nop
  10c9d0:    00 00             	nop
  10c9d2:    00 00             	nop
  10c9d4:    00 00             	nop
  10c9d6:    00 00             	nop
  10c9d8:    00 00             	nop
  10c9da:    00 00             	nop
  10c9dc:    00 00             	nop
  10c9de:    00 00             	nop
  10c9e0:    00 00             	nop
  10c9e2:    00 00             	nop
  10c9e4:    00 00             	nop
  10c9e6:    00 00             	nop
  10c9e8:    00 00             	nop
  10c9ea:    00 00             	nop
  10c9ec:    00 00             	nop
  10c9ee:    00 00             	nop
  10c9f0:    00 00             	nop
  10c9f2:    00 00             	nop
  10c9f4:    00 00             	nop
  10c9f6:    00 00             	nop
  10c9f8:    00 00             	nop
  10c9fa:    00 00             	nop
  10c9fc:    00 00             	nop
  10c9fe:    00 00             	nop
  10ca00:    00 00             	nop
  10ca02:    00 00             	nop
  10ca04:    00 00             	nop
  10ca06:    00 00             	nop
  10ca08:    00 00             	nop
  10ca0a:    00 00             	nop
  10ca0c:    00 00             	nop
  10ca0e:    00 00             	nop
  10ca10:    00 00             	nop
  10ca12:    00 00             	nop
  10ca14:    00 00             	nop
  10ca16:    00 00             	nop
  10ca18:    00 00             	nop
  10ca1a:    00 00             	nop
  10ca1c:    00 00             	nop
  10ca1e:    00 00             	nop
  10ca20:    00 00             	nop
  10ca22:    00 00             	nop
  10ca24:    00 00             	nop
  10ca26:    00 00             	nop
  10ca28:    00 00             	nop
  10ca2a:    00 00             	nop
  10ca2c:    00 00             	nop
  10ca2e:    00 00             	nop
  10ca30:    00 00             	nop
  10ca32:    00 00             	nop
  10ca34:    00 00             	nop
  10ca36:    00 00             	nop
  10ca38:    00 00             	nop
  10ca3a:    00 00             	nop
  10ca3c:    00 00             	nop
  10ca3e:    00 00             	nop
  10ca40:    00 00             	nop
  10ca42:    00 00             	nop
  10ca44:    00 00             	nop
  10ca46:    00 00             	nop
  10ca48:    00 00             	nop
  10ca4a:    00 00             	nop
  10ca4c:    00 00             	nop
  10ca4e:    00 00             	nop
  10ca50:    00 00             	nop
  10ca52:    00 00             	nop
  10ca54:    00 00             	nop
  10ca56:    00 00             	nop
  10ca58:    00 00             	nop
  10ca5a:    00 00             	nop
  10ca5c:    00 00             	nop
  10ca5e:    00 00             	nop
  10ca60:    00 00             	nop
  10ca62:    00 00             	nop
  10ca64:    00 00             	nop
  10ca66:    00 00             	nop
  10ca68:    00 00             	nop
  10ca6a:    00 00             	nop
  10ca6c:    00 00             	nop
  10ca6e:    00 00             	nop
  10ca70:    00 00             	nop
  10ca72:    00 00             	nop
  10ca74:    00 00             	nop
  10ca76:    00 00             	nop
  10ca78:    00 00             	nop
  10ca7a:    00 00             	nop
  10ca7c:    00 00             	nop
  10ca7e:    00 00             	nop
  10ca80:    00 00             	nop
  10ca82:    00 00             	nop
  10ca84:    00 00             	nop
  10ca86:    00 00             	nop
  10ca88:    00 00             	nop
  10ca8a:    00 00             	nop
  10ca8c:    00 00             	nop
  10ca8e:    00 00             	nop
  10ca90:    00 00             	nop
  10ca92:    00 00             	nop
  10ca94:    00 00             	nop
  10ca96:    00 00             	nop
  10ca98:    00 00             	nop
  10ca9a:    00 00             	nop
  10ca9c:    00 00             	nop
  10ca9e:    00 00             	nop
  10caa0:    00 00             	nop
  10caa2:    00 00             	nop
  10caa4:    00 00             	nop
  10caa6:    00 00             	nop
  10caa8:    00 00             	nop
  10caaa:    00 00             	nop
  10caac:    00 00             	nop
  10caae:    00 00             	nop
  10cab0:    00 00             	nop
  10cab2:    00 00             	nop
  10cab4:    00 00             	nop
  10cab6:    00 00             	nop
  10cab8:    00 00             	nop
  10caba:    00 00             	nop
  10cabc:    00 00             	nop
  10cabe:    00 00             	nop
  10cac0:    00 00             	nop
  10cac2:    00 00             	nop
  10cac4:    00 00             	nop
  10cac6:    00 00             	nop
  10cac8:    00 00             	nop
  10caca:    00 00             	nop
  10cacc:    00 00             	nop
  10cace:    00 00             	nop
  10cad0:    00 00             	nop
  10cad2:    00 00             	nop
  10cad4:    00 00             	nop
  10cad6:    00 00             	nop
  10cad8:    00 00             	nop
  10cada:    00 00             	nop
  10cadc:    00 00             	nop
  10cade:    00 00             	nop
  10cae0:    00 00             	nop
  10cae2:    00 00             	nop
  10cae4:    00 00             	nop
  10cae6:    00 00             	nop
  10cae8:    00 00             	nop
  10caea:    00 00             	nop
  10caec:    00 00             	nop
  10caee:    00 00             	nop
  10caf0:    00 00             	nop
  10caf2:    00 00             	nop
  10caf4:    00 00             	nop
  10caf6:    00 00             	nop
  10caf8:    00 00             	nop
  10cafa:    00 00             	nop
  10cafc:    00 00             	nop
  10cafe:    00 00             	nop
  10cb00:    00 00             	nop
  10cb02:    00 00             	nop
  10cb04:    00 00             	nop
  10cb06:    00 00             	nop
  10cb08:    00 00             	nop
  10cb0a:    00 00             	nop
  10cb0c:    00 00             	nop
  10cb0e:    00 00             	nop
  10cb10:    00 00             	nop
  10cb12:    00 00             	nop
  10cb14:    00 00             	nop
  10cb16:    00 00             	nop
  10cb18:    00 00             	nop
  10cb1a:    00 00             	nop
  10cb1c:    00 00             	nop
  10cb1e:    00 00             	nop
  10cb20:    00 00             	nop
  10cb22:    00 00             	nop
  10cb24:    00 00             	nop
  10cb26:    00 00             	nop
  10cb28:    00 00             	nop
  10cb2a:    00 00             	nop
  10cb2c:    00 00             	nop
  10cb2e:    00 00             	nop
  10cb30:    00 00             	nop
  10cb32:    00 00             	nop
  10cb34:    00 00             	nop
  10cb36:    00 00             	nop
  10cb38:    00 00             	nop
  10cb3a:    00 00             	nop
  10cb3c:    00 00             	nop
  10cb3e:    00 00             	nop
  10cb40:    00 00             	nop
  10cb42:    00 00             	nop
  10cb44:    00 00             	nop
  10cb46:    00 00             	nop
  10cb48:    00 00             	nop
  10cb4a:    00 00             	nop
  10cb4c:    00 00             	nop
  10cb4e:    00 00             	nop
  10cb50:    00 00             	nop
  10cb52:    00 00             	nop
  10cb54:    00 00             	nop
  10cb56:    00 00             	nop
  10cb58:    00 00             	nop
  10cb5a:    00 00             	nop
  10cb5c:    00 00             	nop
  10cb5e:    00 00             	nop
  10cb60:    00 00             	nop
  10cb62:    00 00             	nop
  10cb64:    00 00             	nop
  10cb66:    00 00             	nop
  10cb68:    00 00             	nop
  10cb6a:    00 00             	nop
  10cb6c:    00 00             	nop
  10cb6e:    00 00             	nop
  10cb70:    00 00             	nop
  10cb72:    00 00             	nop
  10cb74:    00 00             	nop
  10cb76:    00 00             	nop
  10cb78:    00 00             	nop
  10cb7a:    00 00             	nop
  10cb7c:    00 00             	nop
  10cb7e:    00 00             	nop
  10cb80:    00 00             	nop
  10cb82:    00 00             	nop
  10cb84:    00 00             	nop
  10cb86:    00 00             	nop
  10cb88:    00 00             	nop
  10cb8a:    00 00             	nop
  10cb8c:    00 00             	nop
  10cb8e:    00 00             	nop
  10cb90:    00 00             	nop
  10cb92:    00 00             	nop
  10cb94:    00 00             	nop
  10cb96:    00 00             	nop
  10cb98:    00 00             	nop
  10cb9a:    00 00             	nop
  10cb9c:    00 00             	nop
  10cb9e:    00 00             	nop
  10cba0:    00 00             	nop
  10cba2:    00 00             	nop
  10cba4:    00 00             	nop
  10cba6:    00 00             	nop
  10cba8:    00 00             	nop
  10cbaa:    00 00             	nop
  10cbac:    00 00             	nop
  10cbae:    00 00             	nop
  10cbb0:    00 00             	nop
  10cbb2:    00 00             	nop
  10cbb4:    00 00             	nop
  10cbb6:    00 00             	nop
  10cbb8:    00 00             	nop
  10cbba:    00 00             	nop
  10cbbc:    00 00             	nop
  10cbbe:    00 00             	nop
  10cbc0:    00 00             	nop
  10cbc2:    00 00             	nop
  10cbc4:    00 00             	nop
  10cbc6:    00 00             	nop
  10cbc8:    00 00             	nop
  10cbca:    00 00             	nop
  10cbcc:    00 00             	nop
  10cbce:    00 00             	nop
  10cbd0:    00 00             	nop
  10cbd2:    00 00             	nop
  10cbd4:    00 00             	nop
  10cbd6:    00 00             	nop
  10cbd8:    00 00             	nop
  10cbda:    00 00             	nop
  10cbdc:    00 00             	nop
  10cbde:    00 00             	nop
  10cbe0:    00 00             	nop
  10cbe2:    00 00             	nop
  10cbe4:    00 00             	nop
  10cbe6:    00 00             	nop
  10cbe8:    00 00             	nop
  10cbea:    00 00             	nop
  10cbec:    00 00             	nop
  10cbee:    00 00             	nop
  10cbf0:    00 00             	nop
  10cbf2:    00 00             	nop
  10cbf4:    00 00             	nop
  10cbf6:    00 00             	nop
  10cbf8:    00 00             	nop
  10cbfa:    00 00             	nop
  10cbfc:    00 00             	nop
  10cbfe:    00 00             	nop
  10cc00:    00 00             	nop
  10cc02:    00 00             	nop
  10cc04:    00 00             	nop
  10cc06:    00 00             	nop
  10cc08:    00 00             	nop
  10cc0a:    00 00             	nop
  10cc0c:    00 00             	nop
  10cc0e:    00 00             	nop
  10cc10:    00 00             	nop
  10cc12:    00 00             	nop
  10cc14:    00 00             	nop
  10cc16:    00 00             	nop
  10cc18:    00 00             	nop
  10cc1a:    00 00             	nop
  10cc1c:    00 00             	nop
  10cc1e:    00 00             	nop
  10cc20:    00 00             	nop
  10cc22:    00 00             	nop
  10cc24:    00 00             	nop
  10cc26:    00 00             	nop
  10cc28:    00 00             	nop
  10cc2a:    00 00             	nop
  10cc2c:    00 00             	nop
  10cc2e:    00 00             	nop
  10cc30:    00 00             	nop
  10cc32:    00 00             	nop
  10cc34:    00 00             	nop
  10cc36:    00 00             	nop
  10cc38:    00 00             	nop
  10cc3a:    00 00             	nop
  10cc3c:    00 00             	nop
  10cc3e:    00 00             	nop
  10cc40:    00 00             	nop
  10cc42:    00 00             	nop
  10cc44:    00 00             	nop
  10cc46:    00 00             	nop
  10cc48:    00 00             	nop
  10cc4a:    00 00             	nop
  10cc4c:    00 00             	nop
  10cc4e:    00 00             	nop
  10cc50:    00 00             	nop
  10cc52:    00 00             	nop
  10cc54:    00 00             	nop
  10cc56:    00 00             	nop
  10cc58:    00 00             	nop
  10cc5a:    00 00             	nop
  10cc5c:    00 00             	nop
  10cc5e:    00 00             	nop
  10cc60:    00 00             	nop
  10cc62:    00 00             	nop
  10cc64:    00 00             	nop
  10cc66:    00 00             	nop
  10cc68:    00 00             	nop
  10cc6a:    00 00             	nop
  10cc6c:    00 00             	nop
  10cc6e:    00 00             	nop
  10cc70:    00 00             	nop
  10cc72:    00 00             	nop
  10cc74:    00 00             	nop
  10cc76:    00 00             	nop
  10cc78:    00 00             	nop
  10cc7a:    00 00             	nop
  10cc7c:    00 00             	nop
  10cc7e:    00 00             	nop
  10cc80:    00 00             	nop
  10cc82:    00 00             	nop
  10cc84:    00 00             	nop
  10cc86:    00 00             	nop
  10cc88:    00 00             	nop
  10cc8a:    00 00             	nop
  10cc8c:    00 00             	nop
  10cc8e:    00 00             	nop
  10cc90:    00 00             	nop
  10cc92:    00 00             	nop
  10cc94:    00 00             	nop
  10cc96:    00 00             	nop
  10cc98:    00 00             	nop
  10cc9a:    00 00             	nop
  10cc9c:    00 00             	nop
  10cc9e:    00 00             	nop
  10cca0:    00 00             	nop
  10cca2:    00 00             	nop
  10cca4:    00 00             	nop
  10cca6:    00 00             	nop
  10cca8:    00 00             	nop
  10ccaa:    00 00             	nop
  10ccac:    00 00             	nop
  10ccae:    00 00             	nop
  10ccb0:    00 00             	nop
  10ccb2:    00 00             	nop
  10ccb4:    00 00             	nop
  10ccb6:    00 00             	nop
  10ccb8:    00 00             	nop
  10ccba:    00 00             	nop
  10ccbc:    00 00             	nop
  10ccbe:    00 00             	nop
  10ccc0:    00 00             	nop
  10ccc2:    00 00             	nop
  10ccc4:    00 00             	nop
  10ccc6:    00 00             	nop
  10ccc8:    00 00             	nop
  10ccca:    00 00             	nop
  10cccc:    00 00             	nop
  10ccce:    00 00             	nop
  10ccd0:    00 00             	nop
  10ccd2:    00 00             	nop
  10ccd4:    00 00             	nop
  10ccd6:    00 00             	nop
  10ccd8:    00 00             	nop
  10ccda:    00 00             	nop
  10ccdc:    00 00             	nop
  10ccde:    00 00             	nop
  10cce0:    00 00             	nop
  10cce2:    00 00             	nop
  10cce4:    00 00             	nop
  10cce6:    00 00             	nop
  10cce8:    00 00             	nop
  10ccea:    00 00             	nop
  10ccec:    00 00             	nop
  10ccee:    00 00             	nop
  10ccf0:    00 00             	nop
  10ccf2:    00 00             	nop
  10ccf4:    00 00             	nop
  10ccf6:    00 00             	nop
  10ccf8:    00 00             	nop
  10ccfa:    00 00             	nop
  10ccfc:    00 00             	nop
  10ccfe:    00 00             	nop
  10cd00:    00 00             	nop
  10cd02:    00 00             	nop
  10cd04:    00 00             	nop
  10cd06:    00 00             	nop
  10cd08:    00 00             	nop
  10cd0a:    00 00             	nop
  10cd0c:    00 00             	nop
  10cd0e:    00 00             	nop
  10cd10:    00 00             	nop
  10cd12:    00 00             	nop
  10cd14:    00 00             	nop
  10cd16:    00 00             	nop
  10cd18:    00 00             	nop
  10cd1a:    00 00             	nop
  10cd1c:    00 00             	nop
  10cd1e:    00 00             	nop
  10cd20:    00 00             	nop
  10cd22:    00 00             	nop
  10cd24:    00 00             	nop
  10cd26:    00 00             	nop
  10cd28:    00 00             	nop
  10cd2a:    00 00             	nop
  10cd2c:    00 00             	nop
  10cd2e:    00 00             	nop
  10cd30:    00 00             	nop
  10cd32:    00 00             	nop
  10cd34:    00 00             	nop
  10cd36:    00 00             	nop
  10cd38:    00 00             	nop
  10cd3a:    00 00             	nop
  10cd3c:    00 00             	nop
  10cd3e:    00 00             	nop
  10cd40:    00 00             	nop
  10cd42:    00 00             	nop
  10cd44:    00 00             	nop
  10cd46:    00 00             	nop
  10cd48:    00 00             	nop
  10cd4a:    00 00             	nop
  10cd4c:    00 00             	nop
  10cd4e:    00 00             	nop
  10cd50:    00 00             	nop
  10cd52:    00 00             	nop
  10cd54:    00 00             	nop
  10cd56:    00 00             	nop
  10cd58:    00 00             	nop
  10cd5a:    00 00             	nop
  10cd5c:    00 00             	nop
  10cd5e:    00 00             	nop
  10cd60:    00 00             	nop
  10cd62:    00 00             	nop
  10cd64:    00 00             	nop
  10cd66:    00 00             	nop
  10cd68:    00 00             	nop
  10cd6a:    00 00             	nop
  10cd6c:    00 00             	nop
  10cd6e:    00 00             	nop
  10cd70:    00 00             	nop
  10cd72:    00 00             	nop
  10cd74:    00 00             	nop
  10cd76:    00 00             	nop
  10cd78:    00 00             	nop
  10cd7a:    00 00             	nop
  10cd7c:    00 00             	nop
  10cd7e:    00 00             	nop
  10cd80:    00 00             	nop
  10cd82:    00 00             	nop
  10cd84:    00 00             	nop
  10cd86:    00 00             	nop
  10cd88:    00 00             	nop
  10cd8a:    00 00             	nop

Disassembly of section .debug_str:
.debug_str:
Disassembly of section .debug_loc:
.debug_loc:
Disassembly of section .debug_abbrev:
.debug_abbrev:
Disassembly of section .debug_info:
.debug_info:
Disassembly of section .debug_ranges:
.debug_ranges:
Disassembly of section .debug_macinfo:
.debug_macinfo:
Disassembly of section .debug_pubnames:
.debug_pubnames:
Disassembly of section .debug_pubtypes:
.debug_pubtypes:
Disassembly of section .debug_frame:
.debug_frame:
Disassembly of section .debug_line:
.debug_line:
Disassembly of section .shstrtab:
.shstrtab:
Disassembly of section .symtab:
.symtab:
Disassembly of section .strtab:
.strtab:
